import { BS } from "@beep/schema";
import { stringLiteralKit } from "@beep/schema/kits";
import type { Components, Theme } from "@mui/material/styles";
import {
  arSD as arSDDataGrid,
  enUS as enUSDataGrid,
  frFR as frFRDataGrid,
  zhCN as zhCNDataGrid,
} from "@mui/x-data-grid/locales";
import { enUS as enUSDate, frFR as frFRDate, zhCN as zhCNDate } from "@mui/x-date-pickers/locales";
import * as A from "effect/Array";
import * as S from "effect/Schema";
import { CurrencyCodeValue } from "./currency";

export namespace SupportedLangValue {
  export const { Options, Schema, Enum, Mock, JSONSchema, Pretty, Equivalence } = stringLiteralKit(
    "en",
    "fr",
    "cn",
    "ar"
  );

  export type Type = typeof Schema.Type;
}

export const AdapterLocaleKit = BS.stringLiteralKit(
  "default",
  "pt-BR",
  "pt-PT",
  "es-ES",
  "fr-FR",
  "pl-PL",
  "id-ID",
  "ja-JP",
  "ar-SA",
  "el-GR",
  "sv-SE",
  "it-IT",
  "de-DE",
  "de-DE-informal",
  "de-DE-formal",
  "zh-Hant",
  "zh-Hans",
  "ko-KR",
  "hi-HI",
  "tr-TR",
  "nl-NL",
  "nl-NL-informal",
  "nl-NL-formal",
  "fa-IR",
  "ru-RU",
  "mr-MR"
);

export class AdapterLocale extends AdapterLocaleKit.Schema {
  static readonly Options = AdapterLocaleKit.Options;
  static readonly Enum = AdapterLocaleKit.Enum;
}

export class LangValueToAdapterLocale extends S.transformLiterals(
  ["en", "default"],
  ["fr", "fr-FR"],
  ["cn", "zh-Hant"],
  ["ar", "ar-SA"]
) {}

export const fallbackLang = SupportedLangValue.Enum.en;

export const defaultNS = "common";

export const storageConfig = {
  cookie: { key: "i18next", autoDetection: false },
  localStorage: { key: "i18next", autoDetection: false },
} as const;

export namespace CountryCodeValue {
  export const { Options, Schema, Enum, Mock, JSONSchema, Pretty, Equivalence } = stringLiteralKit(
    "AC",
    "AD",
    "AE",
    "AF",
    "AG",
    "AI",
    "AL",
    "AM",
    "AO",
    "AR",
    "AS",
    "AT",
    "AU",
    "AW",
    "AX",
    "AZ",
    "BA",
    "BB",
    "BD",
    "BE",
    "BF",
    "BG",
    "BH",
    "BI",
    "BJ",
    "BL",
    "BM",
    "BN",
    "BO",
    "BQ",
    "BR",
    "BS",
    "BT",
    "BW",
    "BY",
    "BZ",
    "CA",
    "CC",
    "CD",
    "CF",
    "CG",
    "CH",
    "CI",
    "CK",
    "CL",
    "CM",
    "CN",
    "CO",
    "CR",
    "CU",
    "CV",
    "CW",
    "CX",
    "CY",
    "CZ",
    "DE",
    "DJ",
    "DK",
    "DM",
    "DO",
    "DZ",
    "EC",
    "EE",
    "EG",
    "EH",
    "ER",
    "ES",
    "ET",
    "FI",
    "FJ",
    "FK",
    "FM",
    "FO",
    "FR",
    "GA",
    "GB",
    "GD",
    "GE",
    "GF",
    "GG",
    "GH",
    "GI",
    "GL",
    "GM",
    "GN",
    "GP",
    "GQ",
    "GR",
    "GT",
    "GU",
    "GW",
    "GY",
    "HK",
    "HN",
    "HR",
    "HT",
    "HU",
    "ID",
    "IE",
    "IL",
    "IM",
    "IN",
    "IO",
    "IQ",
    "IR",
    "IS",
    "IT",
    "JE",
    "JM",
    "JO",
    "JP",
    "KE",
    "KG",
    "KH",
    "KI",
    "KM",
    "KN",
    "KP",
    "KR",
    "KW",
    "KY",
    "KZ",
    "LA",
    "LB",
    "LC",
    "LI",
    "LK",
    "LR",
    "LS",
    "LT",
    "LU",
    "LV",
    "LY",
    "MA",
    "MC",
    "MD",
    "ME",
    "MF",
    "MG",
    "MH",
    "MK",
    "ML",
    "MM",
    "MN",
    "MO",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MT",
    "MU",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NC",
    "NE",
    "NF",
    "NG",
    "NI",
    "NL",
    "NO",
    "NP",
    "NR",
    "NU",
    "NZ",
    "OM",
    "PA",
    "PE",
    "PF",
    "PG",
    "PH",
    "PK",
    "PL",
    "PM",
    "PR",
    "PS",
    "PT",
    "PW",
    "PY",
    "QA",
    "RE",
    "RO",
    "RS",
    "RU",
    "RW",
    "SA",
    "SB",
    "SC",
    "SD",
    "SE",
    "SG",
    "SH",
    "SI",
    "SJ",
    "SK",
    "SL",
    "SM",
    "SN",
    "SO",
    "SR",
    "SS",
    "ST",
    "SV",
    "SX",
    "SY",
    "SZ",
    "TA",
    "TC",
    "TD",
    "TG",
    "TH",
    "TJ",
    "TK",
    "TL",
    "TM",
    "TN",
    "TO",
    "TR",
    "TT",
    "TV",
    "TW",
    "TZ",
    "UA",
    "UG",
    "US",
    "UY",
    "UZ",
    "VA",
    "VC",
    "VE",
    "VG",
    "VI",
    "VN",
    "VU",
    "WF",
    "WS",
    "XK",
    "YE",
    "YT",
    "ZA",
    "ZM",
    "ZW"
  );

  export type Type = typeof Schema.Type;
}

/**
 * @countryCode https://flagcdn.com/en/codes.json
 * @adapterLocale https://github.com/iamkun/dayjs/tree/master/src/locale
 * @numberFormat https://simplelocalize.io/data/locales/
 */
export type LangOption = {
  value: SupportedLangValue.Type;
  label: string;
  countryCode: CountryCodeValue.Type;
  adapterLocale?: string;
  numberFormat: { code: string; currency: CurrencyCodeValue.Type };
  systemValue?: { components: Components<Theme> };
};

export const allLanguages = A.make(
  {
    value: SupportedLangValue.Enum.en,
    label: "English",
    countryCode: CountryCodeValue.Enum.US,
    adapterLocale: "en",
    numberFormat: { code: "en-US", currency: CurrencyCodeValue.Enum.USD },
    systemValue: {
      components: { ...enUSDate.components, ...enUSDataGrid.components },
    },
  },
  {
    value: SupportedLangValue.Enum.fr,
    label: "French",
    countryCode: CountryCodeValue.Enum.FR,
    adapterLocale: "fr",
    numberFormat: { code: "fr-FR", currency: CurrencyCodeValue.Enum.EUR },
    systemValue: {
      components: { ...frFRDate.components, ...frFRDataGrid.components },
    },
  },
  {
    value: SupportedLangValue.Enum.cn,
    label: "Chinese",
    countryCode: CountryCodeValue.Enum.CN,
    adapterLocale: "zh",
    numberFormat: { code: "zh-CN", currency: CurrencyCodeValue.Enum.CNY },
    systemValue: {
      components: { ...zhCNDate.components, ...zhCNDataGrid.components },
    },
  },
  {
    value: SupportedLangValue.Enum.ar,
    label: "Arabic",
    countryCode: CountryCodeValue.Enum.SD,
    adapterLocale: "ar",
    numberFormat: { code: "ar-SD", currency: CurrencyCodeValue.Enum.SAR },
    systemValue: {
      components: { ...arSDDataGrid.components },
    },
  }
);

export const allLangs = allLanguages;
export type LangCode = LangOption["value"];
