{"version":3,"sources":["turbopack:///[project]/node_modules/kysely/dist/esm/util/object-utils.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/from-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/group-by-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/and-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/or-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/having-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/insert-query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/list-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/update-query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/using-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/delete-query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/where-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/returning-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/explain-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/when-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/merge-query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/output-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/order-by-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/select-query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/query-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/identifier-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/raw-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/random-string.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/query-id.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-compiler/compiled-query.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/create-table-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/operator-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/parens-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/create-view-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/set-operation-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/log-once.js","turbopack:///[project]/node_modules/kysely/dist/esm/plugin/noop-plugin.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/alias-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/join-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/on-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/migration/migrator.js","turbopack:///[project]/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/require-all-props.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/table-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/operation-node-source.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/value-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/column-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/select-all-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/reference-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/expression/expression.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/select-modifier-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/binary-operation-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/binary-operation-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/value-list-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/value-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/over-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/partition-by-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/raw-builder/sql.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/reference-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/expression-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/select-query-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/join-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/parse-utils.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/join-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/over-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/order-by-item-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/collate-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/order-by-item-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/order-by-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/partition-by-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/selection-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/dynamic/dynamic-table-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/table-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/select-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/insert-values-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/values-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/insert-query-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/column-update-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/update-set-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/insert-result.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/no-result-error.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/on-conflict-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/top-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/top-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/or-action-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/delete-result.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/delete-query-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/limit-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/update-query-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/update-result.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/cte-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/with-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/with-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-creator.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/merge-query-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/matched-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/merge-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/deferred.js","turbopack:///[project]/node_modules/kysely/dist/esm/util/provide-controlled-connection.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-executor/query-executor-base.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/merge-result.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/offset-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/group-by-item-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/group-by-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/set-operation-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/expression/expression-wrapper.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/fetch-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/fetch-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/function-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/function-module.js","turbopack:///[project]/node_modules/kysely/dist/esm/expression/expression-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/unary-operation-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/unary-operation-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/case-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/case-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/json-path-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/json-reference-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/query-builder/json-path-builder.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/tuple-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/data-type-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/parser/data-type-parser.js","turbopack:///[project]/node_modules/kysely/dist/esm/operation-node/cast-node.js","turbopack:///[project]/node_modules/kysely/dist/esm/raw-builder/raw-builder.js"],"sourcesContent":["/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    if (!isObject(obj) || getTag(obj) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(obj) === null) {\n        return true;\n    }\n    let proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst toString = Object.prototype.toString;\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return toString.call(value);\n}\n","/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n","/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return freeze({\n            ...groupBy,\n            items: freeze([...groupBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n","/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return freeze({\n            ...havingNode,\n            having: operator === 'And'\n                ? AndNode.create(havingNode.having, operation)\n                : OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n","/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    createWithoutInto() {\n        return freeze({\n            kind: 'InsertQueryNode',\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ListNode = freeze({\n    is(node) {\n        return node.kind === 'ListNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'ListNode',\n            items: freeze(items),\n        });\n    },\n});\n","/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { ListNode } from './list-node.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(tables, withNode) {\n        return freeze({\n            kind: 'UpdateQueryNode',\n            // For backwards compatibility, use the raw table node when there's only one table\n            // and don't rename the property to something like `tables`.\n            table: tables.length === 1 ? tables[0] : ListNode.create(tables),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createWithoutTable() {\n        return freeze({\n            kind: 'UpdateQueryNode',\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return freeze({\n            ...updateQuery,\n            from: updateQuery.from\n                ? FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n    cloneWithLimit(updateQuery, limit) {\n        return freeze({\n            ...updateQuery,\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./using-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UsingNode = freeze({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return freeze({\n            kind: 'UsingNode',\n            tables: freeze(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return freeze({\n            ...using,\n            tables: freeze([...using.tables, ...tables]),\n        });\n    },\n});\n","/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { UsingNode } from './using-node.js';\nimport { QueryNode } from './query-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithOrderByItems: (node, items) => QueryNode.cloneWithOrderByItems(node, items),\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithoutOrderBy: (node) => QueryNode.cloneWithoutOrderBy(node),\n    cloneWithLimit(deleteNode, limit) {\n        return freeze({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithoutLimit(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            limit: undefined,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return freeze({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? UsingNode.cloneWithTables(deleteNode.using, tables)\n                : UsingNode.create(tables),\n        });\n    },\n});\n","/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return freeze({\n            ...whereNode,\n            where: operator === 'And'\n                ? AndNode.create(whereNode.where, operation)\n                : OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n","/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n","/// <reference types=\"./explain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ExplainNode = freeze({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return freeze({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n","/// <reference types=\"./when-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WhenNode = freeze({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return freeze({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return freeze({\n            ...whenNode,\n            result,\n        });\n    },\n});\n","/// <reference types=\"./merge-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const MergeQueryNode = freeze({\n    is(node) {\n        return node.kind === 'MergeQueryNode';\n    },\n    create(into, withNode) {\n        return freeze({\n            kind: 'MergeQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithUsing(mergeNode, using) {\n        return freeze({\n            ...mergeNode,\n            using,\n        });\n    },\n    cloneWithWhen(mergeNode, when) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([...mergeNode.whens, when])\n                : freeze([when]),\n        });\n    },\n    cloneWithThen(mergeNode, then) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([\n                    ...mergeNode.whens.slice(0, -1),\n                    WhenNode.cloneWithResult(mergeNode.whens[mergeNode.whens.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./output-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OutputNode = freeze({\n    is(node) {\n        return node.kind === 'OutputNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'OutputNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(output, selections) {\n        return freeze({\n            ...output,\n            selections: output.selections\n                ? freeze([...output.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n","/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { QueryNode } from './query-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return freeze({\n            ...select,\n            distinctOn: select.distinctOn\n                ? freeze([...select.distinctOn, ...expressions])\n                : freeze(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return freeze({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? freeze([...select.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithOrderByItems: (node, items) => QueryNode.cloneWithOrderByItems(node, items),\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithFetch(selectNode, fetch) {\n        return freeze({\n            ...selectNode,\n            fetch,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return freeze({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? freeze([...selectNode.setOperations, ...setOperations])\n                : freeze([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return freeze({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return freeze({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return freeze({\n            ...select,\n            offset: undefined,\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithoutOrderBy: (node) => QueryNode.cloneWithoutOrderBy(node),\n    cloneWithoutGroupBy(select) {\n        return freeze({\n            ...select,\n            groupBy: undefined,\n        });\n    },\n});\n","/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\nimport { ExplainNode } from './explain-node.js';\nimport { MergeQueryNode } from './merge-query-node.js';\nimport { OutputNode } from './output-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (SelectQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            DeleteQueryNode.is(node) ||\n            MergeQueryNode.is(node));\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithWhere(node, operation) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutReturning(node) {\n        return freeze({\n            ...node,\n            returning: undefined,\n        });\n    },\n    cloneWithoutWhere(node) {\n        return freeze({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return freeze({\n            ...node,\n            explain: ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n    cloneWithTop(node, top) {\n        return freeze({\n            ...node,\n            top,\n        });\n    },\n    cloneWithOutput(node, selections) {\n        return freeze({\n            ...node,\n            output: node.output\n                ? OutputNode.cloneWithSelections(node.output, selections)\n                : OutputNode.create(selections),\n        });\n    },\n    cloneWithOrderByItems(node, items) {\n        return freeze({\n            ...node,\n            orderBy: node.orderBy\n                ? OrderByNode.cloneWithItems(node.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithoutOrderBy(node) {\n        return freeze({\n            ...node,\n            orderBy: undefined,\n        });\n    },\n});\n","/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n","/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            parameters: freeze(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n","/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n","/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n","/// <reference types=\"./compiled-query.d.ts\" />\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { createQueryId } from '../util/query-id.js';\nexport const CompiledQuery = freeze({\n    raw(sql, parameters = []) {\n        return freeze({\n            sql,\n            query: RawNode.createWithSql(sql),\n            parameters: freeze(parameters),\n            queryId: createQueryId(),\n        });\n    },\n});\n","/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? freeze([...createTable.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? freeze([...createTable.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./operation-node-visitor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = freeze({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        RenameConstraintNode: this.visitRenameConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        RefreshMaterializedViewNode: this.visitRefreshMaterializedView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n        SelectModifierNode: this.visitSelectModifier.bind(this),\n        CreateTypeNode: this.visitCreateType.bind(this),\n        DropTypeNode: this.visitDropType.bind(this),\n        ExplainNode: this.visitExplain.bind(this),\n        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.visitAggregateFunction.bind(this),\n        OverNode: this.visitOver.bind(this),\n        PartitionByNode: this.visitPartitionBy.bind(this),\n        PartitionByItemNode: this.visitPartitionByItem.bind(this),\n        SetOperationNode: this.visitSetOperation.bind(this),\n        BinaryOperationNode: this.visitBinaryOperation.bind(this),\n        UnaryOperationNode: this.visitUnaryOperation.bind(this),\n        UsingNode: this.visitUsing.bind(this),\n        FunctionNode: this.visitFunction.bind(this),\n        CaseNode: this.visitCase.bind(this),\n        WhenNode: this.visitWhen.bind(this),\n        JSONReferenceNode: this.visitJSONReference.bind(this),\n        JSONPathNode: this.visitJSONPath.bind(this),\n        JSONPathLegNode: this.visitJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),\n        TupleNode: this.visitTuple.bind(this),\n        MergeQueryNode: this.visitMergeQuery.bind(this),\n        MatchedNode: this.visitMatched.bind(this),\n        AddIndexNode: this.visitAddIndex.bind(this),\n        CastNode: this.visitCast.bind(this),\n        FetchNode: this.visitFetch.bind(this),\n        TopNode: this.visitTop.bind(this),\n        OutputNode: this.visitOutput.bind(this),\n        OrActionNode: this.visitOrAction.bind(this),\n        CollateNode: this.visitCollate.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\n","/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze, isString } from '../util/object-utils.js';\nexport const COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '^@',\n    '&&',\n    '?',\n    '?&',\n    '?|',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n    'is distinct from',\n    'is not distinct from',\n];\nexport const ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexport const JSON_OPERATORS = ['->', '->>'];\nexport const BINARY_OPERATORS = [\n    ...COMPARISON_OPERATORS,\n    ...ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexport const UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexport const UNARY_OPERATORS = ['not', '-', ...UNARY_FILTER_OPERATORS];\nexport const OPERATORS = [\n    ...BINARY_OPERATORS,\n    ...JSON_OPERATORS,\n    ...UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nexport function isOperator(op) {\n    return isString(op) && OPERATORS.includes(op);\n}\nexport function isBinaryOperator(op) {\n    return isString(op) && BINARY_OPERATORS.includes(op);\n}\nexport function isComparisonOperator(op) {\n    return isString(op) && COMPARISON_OPERATORS.includes(op);\n}\nexport function isArithmeticOperator(op) {\n    return isString(op) && ARITHMETIC_OPERATORS.includes(op);\n}\nexport function isJSONOperator(op) {\n    return isString(op) && JSON_OPERATORS.includes(op);\n}\n","/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n","/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n","/// <reference types=\"./schemable-identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const SchemableIdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            schema: IdentifierNode.create(schema),\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n});\n","/// <reference types=\"./set-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SetOperationNode = freeze({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return freeze({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n","/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { SetOperationNode } from '../operation-node/set-operation-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { logOnce } from '../util/log-once.js';\nconst LIT_WRAP_REGEX = /'/g;\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node, queryId) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.nodeStack.splice(0, this.nodeStack.length);\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            queryId,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode) &&\n            !CreateTableNode.is(this.parentNode) &&\n            !CreateViewNode.is(this.parentNode) &&\n            !SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.fetch) {\n            this.append(' ');\n            this.visitNode(node.fetch);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !RawNode.is(this.parentNode) &&\n            !WhenNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        // TODO: remove in 0.29.\n        if (node.ignore) {\n            logOnce('`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead.');\n            this.append(' ignore');\n        }\n        if (node.orAction) {\n            this.append(' ');\n            this.visitNode(node.orAction);\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.into) {\n            this.append(' into ');\n            this.visitNode(node.into);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.defaultValues) {\n            this.append(' ');\n            this.append('default values');\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !RawNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!isString(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        if (node.selectQuery) {\n            this.append(' as ');\n            this.visitNode(node.selectQuery);\n        }\n        else {\n            this.append(' (');\n            this.compileList([...node.columns, ...(node.constraints ?? [])]);\n            this.append(')');\n            if (node.onCommit) {\n                this.append(' on commit ');\n                this.append(node.onCommit);\n            }\n            if (node.endModifiers && node.endModifiers.length > 0) {\n                this.append(' ');\n                this.compileList(node.endModifiers, ' ');\n            }\n        }\n    }\n    visitColumnDefinition(node) {\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.identity) {\n            this.append(' identity');\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.collation) {\n            this.append(' ');\n            this.visitNode(node.collation);\n        }\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n        if (node.nulls) {\n            this.append(' nulls ');\n            this.append(node.nulls);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !RawNode.is(this.parentNode) &&\n            !WhenNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append(' ');\n        }\n        this.append('set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            if (!node.from) {\n                throw new Error(\"Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins\");\n            }\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    buildDeferrable(node) {\n        if (node.deferrable !== undefined) {\n            if (node.deferrable) {\n                this.append(' deferrable');\n            }\n            else {\n                this.append(' not deferrable');\n            }\n        }\n        if (node.initiallyDeferred !== undefined) {\n            if (node.initiallyDeferred) {\n                this.append(' initially deferred');\n            }\n            else {\n                this.append(' initially immediate');\n            }\n        }\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique');\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n        this.buildDeferrable(node);\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if (isBoolean(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.renameConstraint) {\n            this.visitNode(node.renameConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileColumnAlterations(node.columnAlterations);\n        }\n        if (node.addIndex) {\n            this.visitNode(node.addIndex);\n        }\n        if (node.dropIndex) {\n            this.visitNode(node.dropIndex);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            if (this.announcesNewColumnDataType()) {\n                this.append('type ');\n            }\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitRenameConstraint(node) {\n        this.append('rename constraint ');\n        this.visitNode(node.oldName);\n        this.append(' to ');\n        this.visitNode(node.newName);\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitRefreshMaterializedView(node) {\n        this.append('refresh materialized view ');\n        if (node.concurrently) {\n            this.append('concurrently ');\n        }\n        this.visitNode(node.name);\n        if (node.withNoData) {\n            this.append(' with no data');\n        }\n        else {\n            this.append(' with data');\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n        if (node.of) {\n            this.append(' of ');\n            this.compileList(node.of, ', ');\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n        if (node.withinGroup) {\n            this.append(' within group (');\n            this.visitNode(node.withinGroup);\n            this.append(')');\n        }\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    visitMergeQuery(node) {\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('merge ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.append('into ');\n        this.visitNode(node.into);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.whens) {\n            this.append(' ');\n            this.compileList(node.whens, ' ');\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitMatched(node) {\n        if (node.not) {\n            this.append('not ');\n        }\n        this.append('matched');\n        if (node.bySource) {\n            this.append(' by source');\n        }\n    }\n    visitAddIndex(node) {\n        this.append('add ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n    }\n    visitCast(node) {\n        this.append('cast(');\n        this.visitNode(node.expression);\n        this.append(' as ');\n        this.visitNode(node.dataType);\n        this.append(')');\n    }\n    visitFetch(node) {\n        this.append('fetch next ');\n        this.visitNode(node.rowCount);\n        this.append(` rows ${node.modifier}`);\n    }\n    visitOutput(node) {\n        this.append('output ');\n        this.compileList(node.selections);\n    }\n    visitTop(node) {\n        this.append(`top(${node.expression})`);\n        if (node.modifiers) {\n            this.append(` ${node.modifiers}`);\n        }\n    }\n    visitOrAction(node) {\n        this.append(node.action);\n    }\n    visitCollate(node) {\n        this.append('collate ');\n        this.visitNode(node.collation);\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeStringLiteral(value) {\n        return value.replace(LIT_WRAP_REGEX, \"''\");\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.appendStringLiteral(value);\n        }\n        else if (isNumber(value) || isBoolean(value) || isBigInt(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    appendStringLiteral(value) {\n        this.append(\"'\");\n        this.append(this.sanitizeStringLiteral(value));\n        this.append(\"'\");\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return freeze(arr);\n    }\n    compileColumnAlterations(columnAlterations) {\n        this.compileList(columnAlterations);\n    }\n    /**\n     * controls whether the dialect adds a \"type\" keyword before a column's new data\n     * type in an ALTER TABLE statement.\n     */\n    announcesNewColumnDataType() {\n        return true;\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = freeze({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    CrossJoin: 'cross join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n    LateralCrossJoin: 'cross join lateral',\n    OuterApply: 'outer apply',\n    CrossApply: 'cross apply',\n    Using: 'using',\n});\n","/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n","/// <reference types=\"./noop-plugin.d.ts\" />\nexport class NoopPlugin {\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n","/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n","/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : OnNode.create(operation),\n        });\n    },\n});\n","/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return freeze({\n            ...onNode,\n            on: operator === 'And'\n                ? AndNode.create(onNode.on, operation)\n                : OrNode.create(onNode.on, operation),\n        });\n    },\n});\n","/// <reference types=\"./migrator.d.ts\" />\nimport { NoopPlugin } from '../plugin/noop-plugin.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { freeze, getLast, isObject } from '../util/object-utils.js';\nexport const DEFAULT_MIGRATION_TABLE = 'kysely_migration';\nexport const DEFAULT_MIGRATION_LOCK_TABLE = 'kysely_migration_lock';\nexport const DEFAULT_ALLOW_UNORDERED_MIGRATIONS = false;\nexport const MIGRATION_LOCK_ID = 'migration_lock';\nexport const NO_MIGRATIONS = freeze({ __noMigrations__: true });\n/**\n * A class for running migrations.\n *\n * ### Example\n *\n * This example uses the {@link FileMigrationProvider} that reads migrations\n * files from a single folder. You can easily implement your own\n * {@link MigrationProvider} if you want to provide migrations some\n * other way.\n *\n * ```ts\n * import { promises as fs } from 'node:fs'\n * import path from 'node:path'\n * import * as Sqlite from 'better-sqlite3'\n * import {\n *   FileMigrationProvider,\n *   Kysely,\n *   Migrator,\n *   SqliteDialect\n * } from 'kysely'\n *\n * const db = new Kysely<any>({\n *   dialect: new SqliteDialect({\n *     database: Sqlite(':memory:')\n *   })\n * })\n *\n * const migrator = new Migrator({\n *   db,\n *   provider: new FileMigrationProvider({\n *     fs,\n *     // Path to the folder that contains all your migrations.\n *     migrationFolder: 'some/path/to/migrations',\n *     path,\n *   })\n * })\n * ```\n */\nexport class Migrator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns a {@link MigrationInfo} object for each migration.\n     *\n     * The returned array is sorted by migration name.\n     */\n    async getMigrations() {\n        const executedMigrations = (await this.#doesTableExists(this.#migrationTable))\n            ? await this.#props.db\n                .withPlugin(this.#schemaPlugin)\n                .selectFrom(this.#migrationTable)\n                .select(['name', 'timestamp'])\n                .$narrowType()\n                .execute()\n            : [];\n        const migrations = await this.#resolveMigrations();\n        return migrations.map(({ name, ...migration }) => {\n            const executed = executedMigrations.find((it) => it.name === name);\n            return {\n                name,\n                migration,\n                executedAt: executed ? new Date(executed.timestamp) : undefined,\n            };\n        });\n    }\n    /**\n     * Runs all migrations that have not yet been run.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed. See the examples below.\n     *\n     * This method goes through all possible migrations provided by the provider and runs the\n     * ones whose names come alphabetically after the last migration that has been run. If the\n     * list of executed migrations doesn't match the beginning of the list of possible migrations\n     * an error is returned.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import * as Sqlite from 'better-sqlite3'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * const { error, results } = await migrator.migrateToLatest()\n     *\n     * results?.forEach((it) => {\n     *   if (it.status === 'Success') {\n     *     console.log(`migration \"${it.migrationName}\" was executed successfully`)\n     *   } else if (it.status === 'Error') {\n     *     console.error(`failed to execute migration \"${it.migrationName}\"`)\n     *   }\n     * })\n     *\n     * if (error) {\n     *   console.error('failed to run `migrateToLatest`')\n     *   console.error(error)\n     * }\n     * ```\n     */\n    async migrateToLatest() {\n        return this.#migrate(() => ({ direction: 'Up', step: Infinity }));\n    }\n    /**\n     * Migrate up/down to a specific migration.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo('some_migration')\n     * ```\n     *\n     * If you specify the name of the first migration, this method migrates\n     * down to the first migration, but doesn't run the `down` method of\n     * the first migration. In case you want to migrate all the way down,\n     * you can use a special constant `NO_MIGRATIONS`:\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator, NO_MIGRATIONS } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo(NO_MIGRATIONS)\n     * ```\n     */\n    async migrateTo(targetMigrationName) {\n        return this.#migrate(({ migrations, executedMigrations, pendingMigrations, }) => {\n            if (isObject(targetMigrationName) &&\n                targetMigrationName.__noMigrations__ === true) {\n                return { direction: 'Down', step: Infinity };\n            }\n            if (!migrations.find((m) => m.name === targetMigrationName)) {\n                throw new Error(`migration \"${targetMigrationName}\" doesn't exist`);\n            }\n            const executedIndex = executedMigrations.indexOf(targetMigrationName);\n            const pendingIndex = pendingMigrations.findIndex((m) => m.name === targetMigrationName);\n            if (executedIndex !== -1) {\n                return {\n                    direction: 'Down',\n                    step: executedMigrations.length - executedIndex - 1,\n                };\n            }\n            else if (pendingIndex !== -1) {\n                return { direction: 'Up', step: pendingIndex + 1 };\n            }\n            else {\n                throw new Error(`migration \"${targetMigrationName}\" isn't executed or pending`);\n            }\n        });\n    }\n    /**\n     * Migrate one step up.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateUp()\n     * ```\n     */\n    async migrateUp() {\n        return this.#migrate(() => ({ direction: 'Up', step: 1 }));\n    }\n    /**\n     * Migrate one step down.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateDown()\n     * ```\n     */\n    async migrateDown() {\n        return this.#migrate(() => ({ direction: 'Down', step: 1 }));\n    }\n    async #migrate(getMigrationDirectionAndStep) {\n        try {\n            await this.#ensureMigrationTablesExists();\n            return await this.#runMigrations(getMigrationDirectionAndStep);\n        }\n        catch (error) {\n            if (error instanceof MigrationResultSetError) {\n                return error.resultSet;\n            }\n            return { error };\n        }\n    }\n    get #migrationTableSchema() {\n        return this.#props.migrationTableSchema;\n    }\n    get #migrationTable() {\n        return this.#props.migrationTableName ?? DEFAULT_MIGRATION_TABLE;\n    }\n    get #migrationLockTable() {\n        return this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE;\n    }\n    get #allowUnorderedMigrations() {\n        return (this.#props.allowUnorderedMigrations ?? DEFAULT_ALLOW_UNORDERED_MIGRATIONS);\n    }\n    get #schemaPlugin() {\n        if (this.#migrationTableSchema) {\n            return new WithSchemaPlugin(this.#migrationTableSchema);\n        }\n        return new NoopPlugin();\n    }\n    async #ensureMigrationTablesExists() {\n        await this.#ensureMigrationTableSchemaExists();\n        await this.#ensureMigrationTableExists();\n        await this.#ensureMigrationLockTableExists();\n        await this.#ensureLockRowExists();\n    }\n    async #ensureMigrationTableSchemaExists() {\n        if (!this.#migrationTableSchema) {\n            // Use default schema. Nothing to do.\n            return;\n        }\n        if (!(await this.#doesSchemaExists())) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create schema`\n                // query doesn't throw if the schema already exits. That's why we check if\n                // the schema exist here and ignore the error if it does.\n                if (!(await this.#doesSchemaExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationTable))) {\n            try {\n                if (this.#migrationTableSchema) {\n                    await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n                }\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationTable)\n                    .addColumn('name', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    // The migration run time as ISO string. This is not a real date type as we\n                    // can't know which data type is supported by all future dialects.\n                    .addColumn('timestamp', 'varchar(255)', (col) => col.notNull()));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationLockTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationLockTable)\n                    .addColumn('id', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    .addColumn('is_locked', 'integer', (col) => col.notNull().defaultTo(0)));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureLockRowExists() {\n        if (!(await this.#doesLockRowExists())) {\n            try {\n                await this.#props.db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationLockTable)\n                    .values({ id: MIGRATION_LOCK_ID, is_locked: 0 })\n                    .execute();\n            }\n            catch (error) {\n                if (!(await this.#doesLockRowExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #doesSchemaExists() {\n        const schemas = await this.#props.db.introspection.getSchemas();\n        return schemas.some((it) => it.name === this.#migrationTableSchema);\n    }\n    async #doesTableExists(tableName) {\n        const schema = this.#migrationTableSchema;\n        const tables = await this.#props.db.introspection.getTables({\n            withInternalKyselyTables: true,\n        });\n        return tables.some((it) => it.name === tableName && (!schema || it.schema === schema));\n    }\n    async #doesLockRowExists() {\n        const lockRow = await this.#props.db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationLockTable)\n            .where('id', '=', MIGRATION_LOCK_ID)\n            .select('id')\n            .executeTakeFirst();\n        return !!lockRow;\n    }\n    async #runMigrations(getMigrationDirectionAndStep) {\n        const adapter = this.#props.db.getExecutor().adapter;\n        const lockOptions = freeze({\n            lockTable: this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE,\n            lockRowId: MIGRATION_LOCK_ID,\n            lockTableSchema: this.#props.migrationTableSchema,\n        });\n        const run = async (db) => {\n            try {\n                await adapter.acquireMigrationLock(db, lockOptions);\n                const state = await this.#getState(db);\n                if (state.migrations.length === 0) {\n                    return { results: [] };\n                }\n                const { direction, step } = getMigrationDirectionAndStep(state);\n                if (step <= 0) {\n                    return { results: [] };\n                }\n                if (direction === 'Down') {\n                    return await this.#migrateDown(db, state, step);\n                }\n                else if (direction === 'Up') {\n                    return await this.#migrateUp(db, state, step);\n                }\n                return { results: [] };\n            }\n            finally {\n                await adapter.releaseMigrationLock(db, lockOptions);\n            }\n        };\n        if (adapter.supportsTransactionalDdl && !this.#props.disableTransactions) {\n            return this.#props.db.transaction().execute(run);\n        }\n        else {\n            return this.#props.db.connection().execute(run);\n        }\n    }\n    async #getState(db) {\n        const migrations = await this.#resolveMigrations();\n        const executedMigrations = await this.#getExecutedMigrations(db);\n        this.#ensureNoMissingMigrations(migrations, executedMigrations);\n        if (!this.#allowUnorderedMigrations) {\n            this.#ensureMigrationsInOrder(migrations, executedMigrations);\n        }\n        const pendingMigrations = this.#getPendingMigrations(migrations, executedMigrations);\n        return freeze({\n            migrations,\n            executedMigrations,\n            lastMigration: getLast(executedMigrations),\n            pendingMigrations,\n        });\n    }\n    #getPendingMigrations(migrations, executedMigrations) {\n        return migrations.filter((migration) => {\n            return !executedMigrations.includes(migration.name);\n        });\n    }\n    async #resolveMigrations() {\n        const allMigrations = await this.#props.provider.getMigrations();\n        return Object.keys(allMigrations)\n            .sort()\n            .map((name) => ({\n            ...allMigrations[name],\n            name,\n        }));\n    }\n    async #getExecutedMigrations(db) {\n        const executedMigrations = await db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationTable)\n            .select(['name', 'timestamp'])\n            .$narrowType()\n            .execute();\n        const nameComparator = this.#props.nameComparator || ((a, b) => a.localeCompare(b));\n        return (executedMigrations\n            // https://github.com/kysely-org/kysely/issues/843\n            .sort((a, b) => {\n            if (a.timestamp === b.timestamp) {\n                return nameComparator(a.name, b.name);\n            }\n            return (new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n        })\n            .map((it) => it.name));\n    }\n    #ensureNoMissingMigrations(migrations, executedMigrations) {\n        // Ensure all executed migrations exist in the `migrations` list.\n        for (const executed of executedMigrations) {\n            if (!migrations.some((it) => it.name === executed)) {\n                throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);\n            }\n        }\n    }\n    #ensureMigrationsInOrder(migrations, executedMigrations) {\n        // Ensure the executed migrations are the first ones in the migration list.\n        for (let i = 0; i < executedMigrations.length; ++i) {\n            if (migrations[i].name !== executedMigrations[i]) {\n                throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);\n            }\n        }\n    }\n    async #migrateDown(db, state, step) {\n        const migrationsToRollback = state.executedMigrations\n            .slice()\n            .reverse()\n            .slice(0, step)\n            .map((name) => {\n            return state.migrations.find((it) => it.name === name);\n        });\n        const results = migrationsToRollback.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Down',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; ++i) {\n            const migration = migrationsToRollback[i];\n            try {\n                if (migration.down) {\n                    await migration.down(db);\n                    await db\n                        .withPlugin(this.#schemaPlugin)\n                        .deleteFrom(this.#migrationTable)\n                        .where('name', '=', migration.name)\n                        .execute();\n                    results[i] = {\n                        migrationName: migration.name,\n                        direction: 'Down',\n                        status: 'Success',\n                    };\n                }\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Down',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #migrateUp(db, state, step) {\n        const migrationsToRun = state.pendingMigrations.slice(0, step);\n        const results = migrationsToRun.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Up',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; i++) {\n            const migration = state.pendingMigrations[i];\n            try {\n                await migration.up(db);\n                await db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationTable)\n                    .values({\n                    name: migration.name,\n                    timestamp: new Date().toISOString(),\n                })\n                    .execute();\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Success',\n                };\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #createIfNotExists(qb) {\n        if (this.#props.db.getExecutor().adapter.supportsCreateIfNotExists) {\n            qb = qb.ifNotExists();\n        }\n        await qb.execute();\n    }\n}\nclass MigrationResultSetError extends Error {\n    #resultSet;\n    constructor(result) {\n        super();\n        this.#resultSet = result;\n    }\n    get resultSet() {\n        return this.#resultSet;\n    }\n}\n","/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { JoinNode } from '../../operation-node/join-node.js';\nimport { ListNode } from '../../operation-node/list-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    RefreshMaterializedViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n    MergeQueryNode: true,\n});\nconst SCHEMALESS_FUNCTIONS = {\n    json_agg: true,\n    to_json: true,\n};\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node, queryId) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node, queryId);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node, queryId);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node, queryId) {\n        const transformed = super.transformSchemableIdentifier(node, queryId);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node, queryId) {\n        const transformed = super.transformReferences(node, queryId);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    transformAggregateFunction(node, queryId) {\n        return {\n            ...super.transformAggregateFunction({ ...node, aggregated: [] }, queryId),\n            aggregated: this.#transformTableArgsWithoutSchemas(node, queryId, 'aggregated'),\n        };\n    }\n    transformFunction(node, queryId) {\n        return {\n            ...super.transformFunction({ ...node, arguments: [] }, queryId),\n            arguments: this.#transformTableArgsWithoutSchemas(node, queryId, 'arguments'),\n        };\n    }\n    #transformTableArgsWithoutSchemas(node, queryId, argsKey) {\n        return SCHEMALESS_FUNCTIONS[node.func]\n            ? node[argsKey].map((arg) => !TableNode.is(arg) || arg.table.schema\n                ? this.transformNode(arg, queryId)\n                : {\n                    ...arg,\n                    table: this.transformIdentifier(arg.table.identifier, queryId),\n                })\n            : this.transformNodeList(node[argsKey], queryId);\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        if ('using' in node && node.using) {\n            if (JoinNode.is(node.using)) {\n                this.#collectSchemableIdsFromTableExpr(node.using.table, schemableIds);\n            }\n            else {\n                this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);\n            }\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        if (TableNode.is(node)) {\n            this.#collectSchemableId(node.table, schemableIds);\n        }\n        else if (AliasNode.is(node) && TableNode.is(node.node)) {\n            this.#collectSchemableId(node.node.table, schemableIds);\n        }\n        else if (ListNode.is(node)) {\n            for (const table of node.items) {\n                this.#collectSchemableIdsFromTableExpr(table, schemableIds);\n            }\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n","/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { requireAllProps } from '../util/require-all-props.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * import { type IdentifierNode, OperationNodeTransformer } from 'kysely'\n * import snakeCase from 'lodash/snakeCase'\n *\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   override transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node)\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n *\n * const query = db.selectFrom('person').select(['first_name', 'last_name'])\n *\n * const tree = transformer.transformNode(query.toOperationNode())\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        RenameConstraintNode: this.transformRenameConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        RefreshMaterializedViewNode: this.transformRefreshMaterializedView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n        MergeQueryNode: this.transformMergeQuery.bind(this),\n        MatchedNode: this.transformMatched.bind(this),\n        AddIndexNode: this.transformAddIndex.bind(this),\n        CastNode: this.transformCast.bind(this),\n        FetchNode: this.transformFetch.bind(this),\n        TopNode: this.transformTop.bind(this),\n        OutputNode: this.transformOutput.bind(this),\n        OrActionNode: this.transformOrAction.bind(this),\n        CollateNode: this.transformCollate.bind(this),\n    });\n    transformNode(node, queryId) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node, queryId);\n        this.nodeStack.pop();\n        return freeze(out);\n    }\n    transformNodeImpl(node, queryId) {\n        return this.#transformers[node.kind](node, queryId);\n    }\n    transformNodeList(list, queryId) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map((node) => this.transformNode(node, queryId)));\n    }\n    transformSelectQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from, queryId),\n            selections: this.transformNodeList(node.selections, queryId),\n            distinctOn: this.transformNodeList(node.distinctOn, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            groupBy: this.transformNode(node.groupBy, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n            where: this.transformNode(node.where, queryId),\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            offset: this.transformNode(node.offset, queryId),\n            with: this.transformNode(node.with, queryId),\n            having: this.transformNode(node.having, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            setOperations: this.transformNodeList(node.setOperations, queryId),\n            fetch: this.transformNode(node.fetch, queryId),\n            top: this.transformNode(node.top, queryId),\n        });\n    }\n    transformSelection(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection, queryId),\n        });\n    }\n    transformColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformAlias(node, queryId) {\n        return requireAllProps({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node, queryId),\n            alias: this.transformNode(node.alias, queryId),\n        });\n    }\n    transformTable(node, queryId) {\n        return requireAllProps({\n            kind: 'TableNode',\n            table: this.transformNode(node.table, queryId),\n        });\n    }\n    transformFrom(node, queryId) {\n        return requireAllProps({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms, queryId),\n        });\n    }\n    transformReference(node, queryId) {\n        return requireAllProps({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column, queryId),\n            table: this.transformNode(node.table, queryId),\n        });\n    }\n    transformAnd(node, queryId) {\n        return requireAllProps({\n            kind: 'AndNode',\n            left: this.transformNode(node.left, queryId),\n            right: this.transformNode(node.right, queryId),\n        });\n    }\n    transformOr(node, queryId) {\n        return requireAllProps({\n            kind: 'OrNode',\n            left: this.transformNode(node.left, queryId),\n            right: this.transformNode(node.right, queryId),\n        });\n    }\n    transformValueList(node, queryId) {\n        return requireAllProps({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformParens(node, queryId) {\n        return requireAllProps({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node, queryId),\n        });\n    }\n    transformJoin(node, queryId) {\n        return requireAllProps({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table, queryId),\n            on: this.transformNode(node.on, queryId),\n        });\n    }\n    transformRaw(node, queryId) {\n        return requireAllProps({\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters, queryId),\n        });\n    }\n    transformWhere(node, queryId) {\n        return requireAllProps({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where, queryId),\n        });\n    }\n    transformInsertQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            values: this.transformNode(node.values, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            onConflict: this.transformNode(node.onConflict, queryId),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            ignore: node.ignore,\n            orAction: this.transformNode(node.orAction, queryId),\n            replace: node.replace,\n            explain: this.transformNode(node.explain, queryId),\n            defaultValues: node.defaultValues,\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n        });\n    }\n    transformValues(node, queryId) {\n        return requireAllProps({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformDeleteQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from, queryId),\n            using: this.transformNode(node.using, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            where: this.transformNode(node.where, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n        });\n    }\n    transformReturning(node, queryId) {\n        return requireAllProps({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections, queryId),\n        });\n    }\n    transformCreateTable(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            constraints: this.transformNodeList(node.constraints, queryId),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            selectQuery: this.transformNode(node.selectQuery, queryId),\n        });\n    }\n    transformColumnDefinition(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n            references: this.transformNode(node.references, queryId),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo, queryId),\n            check: this.transformNode(node.check, queryId),\n            generated: this.transformNode(node.generated, queryId),\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n            identity: node.identity,\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformAddColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformDropTable(node, queryId) {\n        return requireAllProps({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node, queryId) {\n        return requireAllProps({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformOrderByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy, queryId),\n            direction: this.transformNode(node.direction, queryId),\n            collation: this.transformNode(node.collation, queryId),\n            nulls: node.nulls,\n        });\n    }\n    transformGroupBy(node, queryId) {\n        return requireAllProps({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformGroupByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy, queryId),\n        });\n    }\n    transformUpdateQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table, queryId),\n            from: this.transformNode(node.from, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            where: this.transformNode(node.where, queryId),\n            updates: this.transformNodeList(node.updates, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n        });\n    }\n    transformColumnUpdate(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column, queryId),\n            value: this.transformNode(node.value, queryId),\n        });\n    }\n    transformLimit(node, queryId) {\n        return requireAllProps({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit, queryId),\n        });\n    }\n    transformOffset(node, queryId) {\n        return requireAllProps({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset, queryId),\n        });\n    }\n    transformOnConflict(node, queryId) {\n        return requireAllProps({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            constraint: this.transformNode(node.constraint, queryId),\n            indexExpression: this.transformNode(node.indexExpression, queryId),\n            indexWhere: this.transformNode(node.indexWhere, queryId),\n            updates: this.transformNodeList(node.updates, queryId),\n            updateWhere: this.transformNode(node.updateWhere, queryId),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node, queryId) {\n        return requireAllProps({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates, queryId),\n        });\n    }\n    transformCreateIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name, queryId),\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            unique: node.unique,\n            using: this.transformNode(node.using, queryId),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformList(node, queryId) {\n        return requireAllProps({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformDropIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name, queryId),\n            table: this.transformNode(node.table, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            name: this.transformNode(node.name, queryId),\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformUniqueConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            name: this.transformNode(node.name, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformForeignKeyConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            references: this.transformNode(node.references, queryId),\n            name: this.transformNode(node.name, queryId),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformSetOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression, queryId),\n            all: node.all,\n        });\n    }\n    transformReferences(node, queryId) {\n        return requireAllProps({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression, queryId),\n            name: this.transformNode(node.name, queryId),\n        });\n    }\n    transformWith(node, queryId) {\n        return requireAllProps({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions, queryId),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node, queryId) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name, queryId),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression, queryId),\n        });\n    }\n    transformCommonTableExpressionName(node, queryId) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n        });\n    }\n    transformHaving(node, queryId) {\n        return requireAllProps({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having, queryId),\n        });\n    }\n    transformCreateSchema(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema, queryId),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node, queryId) {\n        return requireAllProps({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node, queryId) {\n        return requireAllProps({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table, queryId),\n            renameTo: this.transformNode(node.renameTo, queryId),\n            setSchema: this.transformNode(node.setSchema, queryId),\n            columnAlterations: this.transformNodeList(node.columnAlterations, queryId),\n            addConstraint: this.transformNode(node.addConstraint, queryId),\n            dropConstraint: this.transformNode(node.dropConstraint, queryId),\n            renameConstraint: this.transformNode(node.renameConstraint, queryId),\n            addIndex: this.transformNode(node.addIndex, queryId),\n            dropIndex: this.transformNode(node.dropIndex, queryId),\n        });\n    }\n    transformDropColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformRenameColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column, queryId),\n            renameTo: this.transformNode(node.renameTo, queryId),\n        });\n    }\n    transformAlterColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression, queryId),\n            setDefault: this.transformNode(node.setDefault, queryId),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformAddConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint, queryId),\n        });\n    }\n    transformDropConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName, queryId),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformRenameConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'RenameConstraintNode',\n            oldName: this.transformNode(node.oldName, queryId),\n            newName: this.transformNode(node.newName, queryId),\n        });\n    }\n    transformCreateView(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name, queryId),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns, queryId),\n            as: this.transformNode(node.as, queryId),\n        });\n    }\n    transformRefreshMaterializedView(node, queryId) {\n        return requireAllProps({\n            kind: 'RefreshMaterializedViewNode',\n            name: this.transformNode(node.name, queryId),\n            concurrently: node.concurrently,\n            withNoData: node.withNoData,\n        });\n    }\n    transformDropView(node, queryId) {\n        return requireAllProps({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name, queryId),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node, queryId) {\n        return requireAllProps({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression, queryId),\n        });\n    }\n    transformDefaultValue(node, queryId) {\n        return requireAllProps({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue, queryId),\n        });\n    }\n    transformOn(node, queryId) {\n        return requireAllProps({\n            kind: 'OnNode',\n            on: this.transformNode(node.on, queryId),\n        });\n    }\n    transformSelectModifier(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier, queryId),\n            of: this.transformNodeList(node.of, queryId),\n        });\n    }\n    transformCreateType(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name, queryId),\n            enum: this.transformNode(node.enum, queryId),\n        });\n    }\n    transformDropType(node, queryId) {\n        return requireAllProps({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name, queryId),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node, queryId) {\n        return requireAllProps({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options, queryId),\n        });\n    }\n    transformSchemableIdentifier(node, queryId) {\n        return requireAllProps({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema, queryId),\n            identifier: this.transformNode(node.identifier, queryId),\n        });\n    }\n    transformAggregateFunction(node, queryId) {\n        return requireAllProps({\n            kind: 'AggregateFunctionNode',\n            func: node.func,\n            aggregated: this.transformNodeList(node.aggregated, queryId),\n            distinct: node.distinct,\n            orderBy: this.transformNode(node.orderBy, queryId),\n            withinGroup: this.transformNode(node.withinGroup, queryId),\n            filter: this.transformNode(node.filter, queryId),\n            over: this.transformNode(node.over, queryId),\n        });\n    }\n    transformOver(node, queryId) {\n        return requireAllProps({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy, queryId),\n            partitionBy: this.transformNode(node.partitionBy, queryId),\n        });\n    }\n    transformPartitionBy(node, queryId) {\n        return requireAllProps({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformPartitionByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy, queryId),\n        });\n    }\n    transformBinaryOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand, queryId),\n            operator: this.transformNode(node.operator, queryId),\n            rightOperand: this.transformNode(node.rightOperand, queryId),\n        });\n    }\n    transformUnaryOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator, queryId),\n            operand: this.transformNode(node.operand, queryId),\n        });\n    }\n    transformUsing(node, queryId) {\n        return requireAllProps({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables, queryId),\n        });\n    }\n    transformFunction(node, queryId) {\n        return requireAllProps({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments, queryId),\n        });\n    }\n    transformCase(node, queryId) {\n        return requireAllProps({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value, queryId),\n            when: this.transformNodeList(node.when, queryId),\n            else: this.transformNode(node.else, queryId),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node, queryId) {\n        return requireAllProps({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition, queryId),\n            result: this.transformNode(node.result, queryId),\n        });\n    }\n    transformJSONReference(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference, queryId),\n            traversal: this.transformNode(node.traversal, queryId),\n        });\n    }\n    transformJSONPath(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator, queryId),\n            pathLegs: this.transformNodeList(node.pathLegs, queryId),\n        });\n    }\n    transformJSONPathLeg(node, _queryId) {\n        return requireAllProps({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator, queryId),\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformTuple(node, queryId) {\n        return requireAllProps({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformMergeQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'MergeQueryNode',\n            into: this.transformNode(node.into, queryId),\n            using: this.transformNode(node.using, queryId),\n            whens: this.transformNodeList(node.whens, queryId),\n            with: this.transformNode(node.with, queryId),\n            top: this.transformNode(node.top, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            output: this.transformNode(node.output, queryId),\n            returning: this.transformNode(node.returning, queryId),\n        });\n    }\n    transformMatched(node, _queryId) {\n        return requireAllProps({\n            kind: 'MatchedNode',\n            not: node.not,\n            bySource: node.bySource,\n        });\n    }\n    transformAddIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'AddIndexNode',\n            name: this.transformNode(node.name, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            unique: node.unique,\n            using: this.transformNode(node.using, queryId),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformCast(node, queryId) {\n        return requireAllProps({\n            kind: 'CastNode',\n            expression: this.transformNode(node.expression, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n        });\n    }\n    transformFetch(node, queryId) {\n        return requireAllProps({\n            kind: 'FetchNode',\n            rowCount: this.transformNode(node.rowCount, queryId),\n            modifier: node.modifier,\n        });\n    }\n    transformTop(node, _queryId) {\n        return requireAllProps({\n            kind: 'TopNode',\n            expression: node.expression,\n            modifiers: node.modifiers,\n        });\n    }\n    transformOutput(node, queryId) {\n        return requireAllProps({\n            kind: 'OutputNode',\n            selections: this.transformNodeList(node.selections, queryId),\n        });\n    }\n    transformDataType(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOrAction(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformCollate(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n","/// <reference types=\"./require-all-props.d.ts\" />\n/**\n * Helper function to check listed properties according to given type. Check if all properties has been used when object is initialised.\n *\n * Example use:\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n *\n * // propB has to be mentioned even it is optional. It still should be initialized with undefined.\n * const a: SomeType = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n *\n * // checked type is implicit for variable.\n * const b = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n * ```\n *\n * Wrong use of this helper:\n *\n * 1. Omit checked type - all checked properties will be expect as of type never\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * // const z: SomeType = requireAllProps({ propC: \"no type will work\" }); // Property 'propA' is missing in type '{ propC: string; }' but required in type 'SomeType'.\n * ```\n *\n * 2. Apply to spreaded object - there is no way how to check in compile time if spreaded object contains all properties\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * const y: SomeType = { propA: \"\" }; // valid object according to SomeType declaration\n * // const x = requireAllProps<SomeType>({ ...y }); // Argument of type '{ propA: string; propB?: number; }' is not assignable to parameter of type 'AllProps<SomeType>'.\n * ```\n *\n * @param obj object to check if all properties has been used\n * @returns untouched obj parameter is returned\n */\nexport function requireAllProps(obj) {\n    return obj;\n}\n","/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n","/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n","/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n","/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n","/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n","/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n","/// <reference types=\"./reference-node.d.ts\" />\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column: SelectAllNode.create(),\n        });\n    },\n});\n","/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n","/// <reference types=\"./select-modifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectModifierNode = freeze({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier, of) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            modifier,\n            of,\n        });\n    },\n    createWithExpression(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const BinaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return freeze({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n","/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator, withParens = true) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create('='), ValueNode.createImmediate(combinator === 'and' ? 1 : 0));\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1 && withParens) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n","/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n","/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n","/// <reference types=\"./over-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { PartitionByNode } from './partition-by-node.js';\n/**\n * @internal\n */\nexport const OverNode = freeze({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : PartitionByNode.create(items),\n        });\n    },\n});\n","/// <reference types=\"./partition-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'PartitionByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return freeze({\n            ...partitionBy,\n            items: freeze([...partitionBy.items, ...items]),\n        });\n    },\n});\n","/// <reference types=\"./sql.d.ts\" />\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseValueExpression } from '../parser/value-parser.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createRawBuilder } from './raw-builder.js';\nexport const sql = Object.assign((sqlFragments, ...parameters) => {\n    return createRawBuilder({\n        queryId: createQueryId(),\n        rawNode: RawNode.create(sqlFragments, parameters?.map(parseParameter) ?? []),\n    });\n}, {\n    ref(columnReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseStringReference(columnReference)),\n        });\n    },\n    val(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseValueExpression(value)),\n        });\n    },\n    value(value) {\n        return this.val(value);\n    },\n    table(tableReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseTable(tableReference)),\n        });\n    },\n    id(...ids) {\n        const fragments = new Array(ids.length + 1).fill('.');\n        fragments[0] = '';\n        fragments[fragments.length - 1] = '';\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.create(fragments, ids.map(IdentifierNode.create)),\n        });\n    },\n    lit(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(ValueNode.createImmediate(value)),\n        });\n    },\n    literal(value) {\n        return this.lit(value);\n    },\n    raw(sql) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithSql(sql),\n        });\n    },\n    join(array, separator = sql `, `) {\n        const nodes = new Array(Math.max(2 * array.length - 1, 0));\n        const sep = separator.toOperationNode();\n        for (let i = 0; i < array.length; ++i) {\n            nodes[2 * i] = parseParameter(array[i]);\n            if (i !== array.length - 1) {\n                nodes[2 * i + 1] = sep;\n            }\n        }\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChildren(nodes),\n        });\n    },\n});\nfunction parseParameter(param) {\n    if (isOperationNodeSource(param)) {\n        return param.toOperationNode();\n    }\n    return parseValueExpression(param);\n}\n","/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n","/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { SelectModifierNode } from '../operation-node/select-modifier-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { asArray, freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { parseSetOperations, } from '../parser/set-operation-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseFetch } from '../parser/fetch-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forKeyShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForKeyShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forNoKeyUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForNoKeyUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    crossJoin(...args) {\n        return this.#join('CrossJoin', args);\n    }\n    innerJoinLateral(...args) {\n        return this.#join('LateralInnerJoin', args);\n    }\n    leftJoinLateral(...args) {\n        return this.#join('LateralLeftJoin', args);\n    }\n    crossJoinLateral(...args) {\n        return this.#join('LateralCrossJoin', args);\n    }\n    crossApply(...args) {\n        return this.#join('CrossApply', args);\n    }\n    outerApply(...args) {\n        return this.#join('OuterApply', args);\n    }\n    #join(joinType, args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(parseValueExpression(offset))),\n        });\n    }\n    fetch(rowCount, modifier = 'only') {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFetch(this.#props.queryNode, parseFetch(rowCount, modifier)),\n        });\n    }\n    top(expression, modifiers) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    clearGroupBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutGroupBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    $asScalar() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\nexport function createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nimport { parseTableExpression, } from './table-parser.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else if (args.length === 1) {\n        return parseOnlessJoin(joinType, args[0]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\nfunction parseOnlessJoin(joinType, from) {\n    return JoinNode.create(joinType, parseTableExpression(from));\n}\n","/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n","/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\n","/// <reference types=\"./over-builder.d.ts\" />\nimport { OverNode } from '../operation-node/over-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parsePartitionBy, } from '../parser/partition-by-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    orderBy(...args) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new OverBuilder({\n            overNode: QueryNode.cloneWithoutOrderBy(this.#props.overNode),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\n","/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n","/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./collate-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CollateNode = {\n    is(node) {\n        return node.kind === 'CollateNode';\n    },\n    create(collation) {\n        return freeze({\n            kind: 'CollateNode',\n            collation: IdentifierNode.create(collation),\n        });\n    },\n};\n","/// <reference types=\"./order-by-item-builder.d.ts\" />\nimport { CollateNode } from '../operation-node/collate-node.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OrderByItemBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds `desc` to the `order by` item.\n     *\n     * See {@link asc} for the opposite.\n     */\n    desc() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                direction: RawNode.createWithSql('desc'),\n            }),\n        });\n    }\n    /**\n     * Adds `asc` to the `order by` item.\n     *\n     * See {@link desc} for the opposite.\n     */\n    asc() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                direction: RawNode.createWithSql('asc'),\n            }),\n        });\n    }\n    /**\n     * Adds `nulls last` to the `order by` item.\n     *\n     * This is only supported by some dialects like PostgreSQL and SQLite.\n     *\n     * See {@link nullsFirst} for the opposite.\n     */\n    nullsLast() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, { nulls: 'last' }),\n        });\n    }\n    /**\n     * Adds `nulls first` to the `order by` item.\n     *\n     * This is only supported by some dialects like PostgreSQL and SQLite.\n     *\n     * See {@link nullsLast} for the opposite.\n     */\n    nullsFirst() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, { nulls: 'first' }),\n        });\n    }\n    /**\n     * Adds `collate <collationName>` to the `order by` item.\n     */\n    collate(collation) {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                collation: CollateNode.create(collation),\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\n","/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { isExpression } from '../expression/expression.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { OrderByItemBuilder } from '../query-builder/order-by-item-builder.js';\nimport { logOnce } from '../util/log-once.js';\nimport { isExpressionOrFactory, parseExpression, } from './expression-parser.js';\nimport { parseStringReference, } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            logOnce('orderBy(array) is deprecated, use multiple orderBy calls instead.');\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(expr, modifiers) {\n    const parsedRef = parseOrderByExpression(expr);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (modifiers) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return parseOrderByWithModifiers(parsedRef, modifiers);\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        logOnce(\"`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead.\");\n        return parseOrderByWithModifiers(parseStringReference(ref), direction);\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByWithModifiers(expr, modifiers) {\n    if (typeof modifiers === 'string') {\n        if (!isOrderByDirection(modifiers)) {\n            throw new Error(`Invalid order by direction: ${modifiers}`);\n        }\n        return OrderByItemNode.create(expr, RawNode.createWithSql(modifiers));\n    }\n    if (isExpression(modifiers)) {\n        logOnce(\"`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead.\");\n        return OrderByItemNode.create(expr, modifiers.toOperationNode());\n    }\n    const node = OrderByItemNode.create(expr);\n    if (!modifiers) {\n        return node;\n    }\n    return modifiers(new OrderByItemBuilder({ node })).toOperationNode();\n}\n","/// <reference types=\"./partition-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByItemNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return freeze({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n","/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n","/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n","/// <reference types=\"./dynamic-table-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicTableBuilder {\n    #table;\n    get table() {\n        return this.#table;\n    }\n    constructor(table) {\n        this.#table = table;\n    }\n    as(alias) {\n        return new AliasedDynamicTableBuilder(this.#table, alias);\n    }\n}\nexport class AliasedDynamicTableBuilder {\n    #table;\n    #alias;\n    get table() {\n        return this.#table;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    constructor(table, alias) {\n        this.#table = table;\n        this.#alias = alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(parseTable(this.#table), IdentifierNode.create(this.#alias));\n    }\n}\nexport function isAliasedDynamicTableBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.table) &&\n        isString(obj.alias));\n}\n","/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isAliasedDynamicTableBuilder, } from '../dynamic/dynamic-table-builder.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else if (isAliasedDynamicTableBuilder(table)) {\n        return table.toOperationNode();\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n","/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n","/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    let indexedRowColumns = rowColumns.length;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            indexedRowColumns--;\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = indexedRowColumns < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n","/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./default-insert-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultInsertValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return freeze({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n","/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseExpression, } from '../parser/expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { OrActionNode } from '../operation-node/or-action-node.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Sets the values to insert for an {@link Kysely.insertInto | insert} query.\n     *\n     * This method takes an object whose keys are column names and values are\n     * values to insert. In addition to the column's type, the values can be\n     * raw {@link sql} snippets or select queries.\n     *\n     * You must provide all fields you haven't explicitly marked as nullable\n     * or optional using {@link Generated} or {@link ColumnType}.\n     *\n     * The return value of an `insert` query is an instance of {@link InsertResult}. The\n     * {@link InsertResult.insertId | insertId} field holds the auto incremented primary\n     * key if the database returned one.\n     *\n     * On PostgreSQL and some other dialects, you need to call `returning` to get\n     * something out of the query.\n     *\n     * Also see the {@link expression} method for inserting the result of a select\n     * query or any other expression.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Single row\", 10) -->\n     *\n     * Insert a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40\n     *   })\n     *   .executeTakeFirst()\n     *\n     * // `insertId` is only available on dialects that\n     * // automatically return the id of the inserted row\n     * // such as MySQL and SQLite. On PostgreSQL, for example,\n     * // you need to add a `returning` clause to the query to\n     * // get anything out. See the \"returning data\" example.\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`first_name`, `last_name`, `age`) values (?, ?, ?)\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Multiple rows\", 20) -->\n     *\n     * On dialects that support it (for example PostgreSQL) you can insert multiple\n     * rows by providing an array. Note that the return value is once again very\n     * dialect-specific. Some databases may only return the id of the *last* inserted\n     * row and some return nothing at all unless you call `returning`.\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values([{\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   }, {\n     *     first_name: 'Arnold',\n     *     last_name: 'Schwarzenegger',\n     *     age: 70,\n     *   }])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values (($1, $2, $3), ($4, $5, $6))\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Returning data\", 30) -->\n     *\n     * On supported dialects like PostgreSQL you need to chain `returning` to the query to get\n     * the inserted row's columns (or any other expression) as the return value. `returning`\n     * works just like `select`. Refer to `select` method's examples and documentation for\n     * more info.\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   })\n     *   .returning(['id', 'first_name as name'])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values ($1, $2, $3) returning \"id\", \"first_name\" as \"name\"\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Complex values\", 40) -->\n     *\n     * In addition to primitives, the values can also be arbitrary expressions.\n     * You can build the expressions by using a callback and calling the methods\n     * on the expression builder passed to it:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const ani = \"Ani\"\n     * const ston = \"ston\"\n     *\n     * const result = await db\n     *   .insertInto('person')\n     *   .values(({ ref, selectFrom, fn }) => ({\n     *     first_name: 'Jennifer',\n     *     last_name: sql<string>`concat(${ani}, ${ston})`,\n     *     middle_name: ref('first_name'),\n     *     age: selectFrom('person')\n     *       .select(fn.avg<number>('age').as('avg_age')),\n     *   }))\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\n     *   \"first_name\",\n     *   \"last_name\",\n     *   \"middle_name\",\n     *   \"age\"\n     * )\n     * values (\n     *   $1,\n     *   concat($2, $3),\n     *   \"first_name\",\n     *   (select avg(\"age\") as \"avg_age\" from \"person\")\n     * )\n     * ```\n     *\n     * You can also use the callback version of subqueries or raw expressions:\n     *\n     * ```ts\n     * await db.with('jennifer', (db) => db\n     *   .selectFrom('person')\n     *   .where('first_name', '=', 'Jennifer')\n     *   .select(['id', 'first_name', 'gender'])\n     *   .limit(1)\n     * ).insertInto('pet').values((eb) => ({\n     *   owner_id: eb.selectFrom('jennifer').select('id'),\n     *   name: eb.selectFrom('jennifer').select('first_name'),\n     *   species: 'cat',\n     * }))\n     * .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * with \"jennifer\" as (\n     *   select \"id\", \"first_name\", \"gender\"\n     *   from \"person\"\n     *   where \"first_name\" = $1\n     *   limit $2\n     * )\n     * insert into \"pet\" (\"owner_id\", \"name\", \"species\")\n     * values (\n     *  (select \"id\" from \"jennifer\"),\n     *  (select \"first_name\" from \"jennifer\"),\n     *  $3\n     * )\n     * ```\n     */\n    values(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method.\n     * This API doesn't follow our WYSIWYG principles and might be a bit difficult to\n     * remember. The reasons for this design stem from implementation difficulties.\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.lit(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"last_name\", 7 as \"age from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Creates an `insert into \"person\" default values` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .defaultValues()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" default values\n     * ```\n     */\n    defaultValues() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                defaultValues: true,\n            }),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .modifyEnd(sql`-- This is a comment`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (\"first_name\", \"last_name\", \"gender\")\n     * values (?, ?, ?) -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * This is only supported by some dialects like MySQL.\n     *\n     * To avoid a footgun, when invoked with the SQLite dialect, this method will\n     * be handled like {@link orIgnore}. See also, {@link orAbort}, {@link orFail},\n     * {@link orReplace}, and {@link orRollback}.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or ignore into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('ignore'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or ignore into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * To avoid a footgun, when invoked with the MySQL dialect, this method will\n     * be handled like {@link ignore}.\n     *\n     * See also, {@link orAbort}, {@link orFail}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orIgnore()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or ignore into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)\n     * ```\n     */\n    orIgnore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('ignore'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or abort into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orFail}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orAbort()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or abort into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orAbort() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('abort'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or fail into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orFail()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or fail into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orFail() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('fail'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or replace into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * You can also use {@link Kysely.replaceInto} to achieve the same result.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orReplace()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or replace into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orReplace() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('replace'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or rollback into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orReplace}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orRollback()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or rollback into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orRollback() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('rollback'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Insert the first 5 rows:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .top(5)\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(5) into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     *\n     * Insert the first 50 percent of rows:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .top(50, 'percent')\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(50) percent into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     */\n    top(expression, modifiers) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\")\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql<string>`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (lower(name))\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\")\n     * do update set \"species\" = $4\n     * where \"excluded\".\"name\" != $5\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .values({\n     *     id: 1,\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"id\", \"first_name\", \"last_name\", \"gender\")\n     * values ($1, $2, $3, $4)\n     * on conflict (\"id\")\n     * do update set\n     *  \"first_name\" = \"excluded\".\"first_name\",\n     *  \"last_name\" = \"excluded\".\"last_name\"\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\n     *     id: 1,\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .onDuplicateKeyUpdate({ updated_at: new Date().toISOString() })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`id`, `first_name`, `last_name`, `gender`)\n     * values (?, ?, ?, ?)\n     * on duplicate key update `updated_at` = ?\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObjectExpression(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    output(args) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .values({ first_name: 'James', last_name: 'Smith', gender: 'male' })\n     *   .returning(['first_name'])\n     *   .clearReturning()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"gender\") values ($1, $2, $3)\n     * ```\n     */\n    clearReturning() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.insertInto('person')\n     *   .values({ first_name: 'John', last_name: 'Doe', gender: 'male' })\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { NewPerson } from 'type-editor' // imaginary module\n     *\n     * async function insertPerson(values: NewPerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `InsertQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const person = await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *     nullable_column: 'hell yeah!'\n     *   })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const person = await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *     nullable_column: 'hell yeah!'\n     *   })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { NewPerson, NewPet, Species } from 'type-editor' // imaginary module\n     *\n     * async function insertPersonAndPet(person: NewPerson, pet: Omit<NewPet, 'owner_id'>) {\n     *   return await db\n     *     .with('new_person', (qb) => qb\n     *       .insertInto('person')\n     *       .values(person)\n     *       .returning('id')\n     *       .$assertType<{ id: number }>()\n     *     )\n     *     .with('new_pet', (qb) => qb\n     *       .insertInto('pet')\n     *       .values((eb) => ({\n     *         owner_id: eb.selectFrom('new_person').select('id'),\n     *         ...pet\n     *       }))\n     *       .returning(['name as pet_name', 'species'])\n     *       .$assertType<{ pet_name: string, species: Species }>()\n     *     )\n     *     .selectFrom(['new_person', 'new_pet'])\n     *     .selectAll()\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new InsertResult(result.insertId, result.numAffectedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n","/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseUpdate(...args) {\n    if (args.length === 2) {\n        return [\n            ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1])),\n        ];\n    }\n    return parseUpdateObjectExpression(args[0]);\n}\nexport function parseUpdateObjectExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n","/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n","/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * import type { NewPerson } from 'type-editor' // imaginary module\n *\n * async function insertPerson(person: NewPerson) {\n *   const result = await db\n *     .insertInto('person')\n *     .values(person)\n *     .executeTakeFirstOrThrow()\n *\n *   console.log(result.insertId) // relevant on MySQL\n *   console.log(result.numInsertedOrUpdatedRows) // always relevant\n * }\n * ```\n */\nexport class InsertResult {\n    /**\n     * The auto incrementing primary key of the inserted row.\n     *\n     * This property can be undefined when the query contains an `on conflict`\n     * clause that makes the query succeed even when nothing gets inserted.\n     *\n     * This property is always undefined on dialects like PostgreSQL that\n     * don't return the inserted id by default. On those dialects you need\n     * to use the {@link ReturningInterface.returning | returning} method.\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\n","/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexport function isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\n","/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return freeze({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return freeze({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n","/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const id = 1\n     * const first_name = 'John'\n     *\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, id })\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"id\")\n     * values ($1, $2)\n     * on conflict (\"id\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const id = 1\n     * const first_name = 'John'\n     *\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, id })\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet({ first_name })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"id\")\n     * values ($1, $2)\n     * on conflict (\"id\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * import type { NewPerson } from 'type-editor' // imaginary module\n     *\n     * async function upsertPerson(person: NewPerson): Promise<void> {\n     *   await db.insertInto('person')\n     *     .values(person)\n     *     .onConflict((oc) => oc\n     *       .column('id')\n     *       .doUpdateSet((eb) => ({\n     *         first_name: eb.ref('excluded.first_name'),\n     *         last_name: eb.ref('excluded.last_name')\n     *       })\n     *     )\n     *   )\n     *   .execute()\n     * }\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\")\n     * values ($1, $2)\n     * on conflict (\"id\")\n     * do update set\n     *  \"first_name\" = excluded.\"first_name\",\n     *  \"last_name\" = excluded.\"last_name\"\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateObjectExpression(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\n","/// <reference types=\"./top-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TopNode = freeze({\n    is(node) {\n        return node.kind === 'TopNode';\n    },\n    create(expression, modifiers) {\n        return freeze({\n            kind: 'TopNode',\n            expression,\n            modifiers,\n        });\n    },\n});\n","/// <reference types=\"./top-parser.d.ts\" />\nimport { TopNode } from '../operation-node/top-node.js';\nimport { isBigInt, isNumber, isUndefined } from '../util/object-utils.js';\nexport function parseTop(expression, modifiers) {\n    if (!isNumber(expression) && !isBigInt(expression)) {\n        throw new Error(`Invalid top expression: ${expression}`);\n    }\n    if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {\n        throw new Error(`Invalid top modifiers: ${modifiers}`);\n    }\n    return TopNode.create(expression, modifiers);\n}\nfunction isTopModifiers(modifiers) {\n    return (modifiers === 'percent' ||\n        modifiers === 'with ties' ||\n        modifiers === 'percent with ties');\n}\n","/// <reference types=\"./or-action-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrActionNode = freeze({\n    is(node) {\n        return node.kind === 'OrActionNode';\n    },\n    create(action) {\n        return freeze({\n            kind: 'OrActionNode',\n            action,\n        });\n    },\n});\n","/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\n","/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nimport { DeleteQueryNode } from '../operation-node/delete-query-node.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes a `delete from` query into a `delete top from` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Delete the first 5 rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(5)\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(5) from \"person\" where \"age\" > @1\n     * ```\n     *\n     * Delete the first 50% of rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(50, 'percent')\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(50) percent from \"person\" where \"age\" > @1\n     * ```\n     */\n    top(expression, modifiers) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    #join(joinType, args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .clearReturning()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\"\n     * ```\n     */\n    clearReturning() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `limit` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .limit(5)\n     *   .clearLimit()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearLimit() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    orderBy(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet` order by `created_at` limit ?\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.deleteFrom('person')\n     *   .where('first_name', '=', 'John')\n     *   .modifyEnd(sql`-- This is a comment`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `person`\n     * where `first_name` = \"John\" -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `DeleteQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', 3)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', 3)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Species } from 'type-editor' // imaginary module\n     *\n     * async function deletePersonAndPets(personId: number) {\n     *   return await db\n     *     .with('deleted_person', (qb) => qb\n     *        .deleteFrom('person')\n     *        .where('id', '=', personId)\n     *        .returning('first_name')\n     *        .$assertType<{ first_name: string }>()\n     *     )\n     *     .with('deleted_pets', (qb) => qb\n     *       .deleteFrom('pet')\n     *       .where('owner_id', '=', personId)\n     *       .returning(['name as pet_name', 'species'])\n     *       .$assertType<{ pet_name: string, species: Species }>()\n     *     )\n     *     .selectFrom(['deleted_person', 'deleted_pets'])\n     *     .selectAll()\n     *     .execute()\n     * }\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [new DeleteResult(result.numAffectedRows ?? BigInt(0))];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n","/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit,\n        });\n    },\n});\n","/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdate, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes an `update` query into a `update top` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Update the first row:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(1)\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(1) \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     *\n     * Update the 50% first rows:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(50, 'percent')\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(50) percent \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     */\n    top(expression, modifiers) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    #join(joinType, args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    orderBy(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds a limit clause to the update query for supported databases, such as MySQL.\n     *\n     * ### Examples\n     *\n     * Update the first 2 rows in the 'person' table:\n     *\n     * ```ts\n     * await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Foo' })\n     *   .limit(2)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * update `person` set `first_name` = ? limit ?\n     * ```\n     */\n    limit(limit) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    set(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdate(...args)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.updateTable('person')\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .modifyEnd(sql.raw('-- This is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * update `person`\n     * set `age` = 39\n     * where `first_name` = \"John\" -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.updateTable('person')\n     *   .returningAll()\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"age\" = 39 where \"first_name\" = \"John\"\n     * ```\n     */\n    clearReturning() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * const values = {\n     *   first_name: 'John',\n     * } satisfies PersonUpdate\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `UpdateQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const id = 1\n     * const now = new Date().toISOString()\n     *\n     * const person = await db.updateTable('person')\n     *   .set({ deleted_at: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const id = 1\n     * const now = new Date().toISOString()\n     *\n     * const person = await db.updateTable('person')\n     *   .set({ deleted_at: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deleted_at: Date; nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate, PetUpdate, Species } from 'type-editor' // imaginary module\n     *\n     * const person = {\n     *   id: 1,\n     *   gender: 'other',\n     * } satisfies PersonUpdate\n     *\n     * const pet = {\n     *   name: 'Fluffy',\n     * } satisfies PetUpdate\n     *\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new UpdateResult(result.numAffectedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n","/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    /**\n     * The number of rows the update query updated (even if not changed).\n     */\n    numUpdatedRows;\n    /**\n     * The number of rows the update query changed.\n     *\n     * This is **optional** and only supported in dialects such as MySQL.\n     * You would probably use {@link numUpdatedRows} in most cases.\n     */\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n","/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./cte-builder.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\n","/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n","/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n","/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpressionOrList, parseAliasedTable, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nimport { MergeQueryBuilder } from './query-builder/merge-query-builder.js';\nimport { MergeQueryNode } from './operation-node/merge-query-node.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Creates a `select` query builder for the given table or tables.\n     *\n     * The tables passed to this method are built as the query's `from` clause.\n     *\n     * ### Examples\n     *\n     * Create a select query for one table:\n     *\n     * ```ts\n     * db.selectFrom('person').selectAll()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"person\"\n     * ```\n     *\n     * Create a select query for one table with an alias:\n     *\n     * ```ts\n     * const persons = await db.selectFrom('person as p')\n     *   .select(['p.id', 'first_name'])\n     *   .execute()\n     *\n     * console.log(persons[0].id)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"id\", \"first_name\" from \"person\" as \"p\"\n     * ```\n     *\n     * Create a select query from a subquery:\n     *\n     * ```ts\n     * const persons = await db.selectFrom(\n     *     (eb) => eb.selectFrom('person').select('person.id as identifier').as('p')\n     *   )\n     *   .select('p.identifier')\n     *   .execute()\n     *\n     * console.log(persons[0].identifier)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"identifier\",\n     * from (\n     *   select \"person\".\"id\" as \"identifier\" from \"person\"\n     * ) as p\n     * ```\n     *\n     * Create a select query from raw sql:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db\n     *   .selectFrom(sql<{ one: number }>`(select 1 as one)`.as('q'))\n     *   .select('q.one')\n     *   .execute()\n     *\n     * console.log(items[0].one)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"q\".\"one\",\n     * from (\n     *   select 1 as one\n     * ) as q\n     * ```\n     *\n     * When you use the `sql` tag you need to also provide the result type of the\n     * raw snippet / query so that Kysely can figure out what columns are\n     * available for the rest of the query.\n     *\n     * The `selectFrom` method also accepts an array for multiple tables. All\n     * the above examples can also be used in an array.\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db.selectFrom([\n     *     'person as p',\n     *     db.selectFrom('pet').select('pet.species').as('a'),\n     *     sql<{ one: number }>`(select 1 as one)`.as('q')\n     *   ])\n     *   .select(['p.id', 'a.species', 'q.one'])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".id, \"a\".\"species\", \"q\".\"one\"\n     * from\n     *   \"person\" as \"p\",\n     *   (select \"pet\".\"species\" from \"pet\") as a,\n     *   (select 1 as one) as \"q\"\n     * ```\n     */\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a \"replace into\" query.\n     *\n     * This is only supported by some dialects like MySQL or SQLite.\n     *\n     * Similar to MySQL's {@link InsertQueryBuilder.onDuplicateKeyUpdate} that deletes\n     * and inserts values on collision instead of updating existing rows.\n     *\n     * An alias of SQLite's {@link InsertQueryBuilder.orReplace}.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * replace into `person` (`first_name`, `last_name`) values (?, ?)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    /**\n     * Creates a delete query.\n     *\n     * See the {@link DeleteQueryBuilder.where} method for examples on how to specify\n     * a where clause for the delete operation.\n     *\n     * The return value of the query is an instance of {@link DeleteResult}.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"delete\", \"Single row\", 10) -->\n     *\n     * Delete a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom('person')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numDeletedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * delete from \"person\" where \"person\".\"id\" = $1\n     * ```\n     *\n     * Some databases such as MySQL support deleting from multiple tables:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom(['person', 'pet'])\n     *   .using('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `person`, `pet`\n     * using `person`\n     * inner join `pet` on `pet`.`owner_id` = `person`.`id`\n     * where `person`.`id` = ?\n     * ```\n     */\n    deleteFrom(from) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates an update query.\n     *\n     * See the {@link UpdateQueryBuilder.where} method for examples on how to specify\n     * a where clause for the update operation.\n     *\n     * See the {@link UpdateQueryBuilder.set} method for examples on how to\n     * specify the updates.\n     *\n     * The return value of the query is an {@link UpdateResult}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Jennifer' })\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     */\n    updateTable(tables) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a merge query.\n     *\n     * The return value of the query is a {@link MergeResult}.\n     *\n     * See the {@link MergeQueryBuilder.using} method for examples on how to specify\n     * the other table.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"merge\", \"Source row existence\", 10) -->\n     *\n     * Update a target column based on the existence of a source row:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('person as target')\n     *   .using('pet as source', 'source.owner_id', 'target.id')\n     *   .whenMatchedAnd('target.has_pets', '!=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'Y' })\n     *   .whenNotMatchedBySourceAnd('target.has_pets', '=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'N' })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.numChangedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\"\n     * on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * when matched and \"has_pets\" != $1\n     * then update set \"has_pets\" = $2\n     * when not matched by source and \"has_pets\" = $3\n     * then update set \"has_pets\" = $4\n     * ```\n     *\n     * <!-- siteExample(\"merge\", \"Temporary changes table\", 20) -->\n     *\n     * Merge new entries from a temporary changes table:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('wine as target')\n     *   .using(\n     *     'wine_stock_change as source',\n     *     'source.wine_name',\n     *     'target.name',\n     *   )\n     *   .whenNotMatchedAnd('source.stock_delta', '>', 0)\n     *   .thenInsertValues(({ ref }) => ({\n     *     name: ref('source.wine_name'),\n     *     stock: ref('source.stock_delta'),\n     *   }))\n     *   .whenMatchedAnd(\n     *     (eb) => eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *     '>',\n     *     0,\n     *   )\n     *   .thenUpdateSet('stock', (eb) =>\n     *     eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *   )\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"wine\" as \"target\"\n     * using \"wine_stock_change\" as \"source\"\n     * on \"source\".\"wine_name\" = \"target\".\"name\"\n     * when not matched and \"source\".\"stock_delta\" > $1\n     * then insert (\"name\", \"stock\") values (\"source\".\"wine_name\", \"source\".\"stock_delta\")\n     * when matched and \"target\".\"stock\" + \"source\".\"stock_delta\" > $2\n     * then update set \"stock\" = \"target\".\"stock\" + \"source\".\"stock_delta\"\n     * when matched\n     * then delete\n     * ```\n     */\n    mergeInto(targetTable) {\n        return new MergeQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"cte\", \"Simple selects\", 10) -->\n     *\n     * Common table expressions (CTE) are a great way to modularize complex queries.\n     * Essentially they allow you to run multiple separate queries within a\n     * single roundtrip to the DB.\n     *\n     * Since CTEs are a part of the main query, query optimizers inside DB\n     * engines are able to optimize the overall query. For example, postgres\n     * is able to inline the CTEs inside the using queries if it decides it's\n     * faster.\n     *\n     * ```ts\n     * const result = await db\n     *   // Create a CTE called `jennifers` that selects all\n     *   // persons named 'Jennifer'.\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   // Select all rows from the `jennifers` CTE and\n     *   // further filter it.\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   // Finally select all adult jennifers that are\n     *   // also younger than 60.\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * <!-- siteExample(\"cte\", \"Inserts, updates and deletions\", 20) -->\n     *\n     * Some databases like postgres also allow you to run other queries than selects\n     * in CTEs. On these databases CTEs are extremely powerful:\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (db) => db\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       age: 35,\n     *     })\n     *     .returning('id')\n     *   )\n     *   .with('new_pet', (db) => db\n     *     .insertInto('pet')\n     *     .values({\n     *       name: 'Doggo',\n     *       species: 'dog',\n     *       is_favorite: true,\n     *       // Use the id of the person we just inserted.\n     *       owner_id: db\n     *         .selectFrom('new_person')\n     *         .select('id')\n     *     })\n     *     .returning('id')\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .select([\n     *     'new_person.id as person_id',\n     *     'new_pet.id as pet_id'\n     *   ])\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0007-schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n","/// <reference types=\"./merge-query-builder.d.ts\" />\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseMergeThen, parseMergeWhen } from '../parser/merge-parser.js';\nimport { parseSelectAll, parseSelectArg, } from '../parser/select-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { freeze } from '../util/object-utils.js';\nimport { MergeResult } from './merge-result.js';\nimport { NoResultError, isNoResultErrorConstructor, } from './no-result-error.js';\nimport { UpdateQueryBuilder } from './update-query-builder.js';\nexport class MergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .mergeInto('person')\n     *   .using('pet', 'pet.owner_id', 'person.id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .modifyEnd(sql.raw('-- this is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\" using \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\" when matched then delete -- this is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Changes a `merge into` query to an `merge top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Affect 5 matched rows at most:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(5)\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(5) into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     *\n     * Affect 50% of matched rows:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(50, 'percent')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(50) percent into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    top(expression, modifiers) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(...args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithUsing(this.#props.queryNode, parseJoin('Using', args)),\n        });\n    }\n    returning(args) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    returningAll(table) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n}\nexport class WheneableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .mergeInto('person')\n     *   .using('pet', 'pet.owner_id', 'person.id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .modifyEnd(sql.raw('-- this is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\" using \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\" when matched then delete -- this is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * See {@link MergeQueryBuilder.top}.\n     */\n    top(expression, modifiers) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds a simple `when matched` clause to the query.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * For a simple `when not matched` clause, see {@link whenNotMatched}.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    whenMatched() {\n        return this.#whenMatched([]);\n    }\n    whenMatchedAnd(...args) {\n        return this.#whenMatched(args);\n    }\n    /**\n     * Adds the `when matched` clause to the query with an `and` condition. But unlike\n     * {@link whenMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenMatchedAndRef(lhs, op, rhs) {\n        return this.#whenMatched([lhs, op, rhs], true);\n    }\n    #whenMatched(args, refRight) {\n        return new MatchedThenableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: true }, args, refRight)),\n        });\n    }\n    /**\n     * Adds a simple `when not matched` clause to the query.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * For a simple `when matched` clause, see {@link whenMatched}.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenInsertValues({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   insert (\"first_name\", \"last_name\") values ($1, $2)\n     * ```\n     */\n    whenNotMatched() {\n        return this.#whenNotMatched([]);\n    }\n    whenNotMatchedAnd(...args) {\n        return this.#whenNotMatched(args);\n    }\n    /**\n     * Adds the `when not matched` clause to the query with an `and` condition. But unlike\n     * {@link whenNotMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * Unlike {@link whenMatchedAndRef}, you cannot reference columns from the target table.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenNotMatchedAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true);\n    }\n    /**\n     * Adds a simple `when not matched by source` clause to the query.\n     *\n     * Supported in MS SQL Server.\n     *\n     * Similar to {@link whenNotMatched}, but returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySource() {\n        return this.#whenNotMatched([], false, true);\n    }\n    whenNotMatchedBySourceAnd(...args) {\n        return this.#whenNotMatched(args, false, true);\n    }\n    /**\n     * Adds the `when not matched by source` clause to the query with an `and` condition.\n     *\n     * Similar to {@link whenNotMatchedAndRef}, but you can reference columns from\n     * the target table, and not from source table and returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySourceAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true, true);\n    }\n    returning(args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    returningAll(table) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    #whenNotMatched(args, refRight = false, bySource = false) {\n        const props = {\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: false, bySource }, args, refRight)),\n        };\n        const Builder = bySource\n            ? MatchedThenableMergeQueryBuilder\n            : NotMatchedThenableMergeQueryBuilder;\n        return new Builder(props);\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.updateTable('person')\n     *   .set({ first_name: 'John' })\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [new MergeResult(result.numAffectedRows)];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n}\nexport class MatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `delete` action.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    thenDelete() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('delete')),\n        });\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    /**\n     * Perform an `update` operation with a full-fledged {@link UpdateQueryBuilder}.\n     * This is handy when multiple `set` invocations are needed.\n     *\n     * For a shorthand version of this method, see {@link thenUpdateSet}.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenUpdate((ub) => ub\n     *     .set(sql`metadata['has_pets']`, 'Y')\n     *     .set({\n     *       updated_at: new Date().toISOString(),\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   update set metadata['has_pets'] = $1, \"updated_at\" = $2\n     * ```\n     */\n    thenUpdate(set) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(set(new UpdateQueryBuilder({\n                queryId: this.#props.queryId,\n                executor: NOOP_QUERY_EXECUTOR,\n                queryNode: UpdateQueryNode.createWithoutTable(),\n            })))),\n        });\n    }\n    thenUpdateSet(...args) {\n        // @ts-ignore not sure how to type this so it won't complain about set(...args).\n        return this.thenUpdate((ub) => ub.set(...args));\n    }\n}\nexport class NotMatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `insert` action, see {@link thenInsertValues}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    thenInsertValues(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(InsertQueryNode.cloneWith(InsertQueryNode.createWithoutInto(), {\n                columns,\n                values,\n            }))),\n        });\n    }\n}\n","/// <reference types=\"./matched-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const MatchedNode = freeze({\n    is(node) {\n        return node.kind === 'MatchedNode';\n    },\n    create(not, bySource = false) {\n        return freeze({\n            kind: 'MatchedNode',\n            not,\n            bySource,\n        });\n    },\n});\n","/// <reference types=\"./merge-parser.d.ts\" />\nimport { MatchedNode } from '../operation-node/matched-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseFilterList, parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from './binary-operation-parser.js';\nexport function parseMergeWhen(type, args, refRight) {\n    return WhenNode.create(parseFilterList([\n        MatchedNode.create(!type.isMatched, type.bySource),\n        ...(args && args.length > 0\n            ? [\n                args.length === 3 && refRight\n                    ? parseReferentialBinaryOperation(args[0], args[1], args[2])\n                    : parseValueBinaryOperationOrExpression(args),\n            ]\n            : []),\n    ], 'and', false));\n}\nexport function parseMergeThen(result) {\n    if (isString(result)) {\n        return RawNode.create([result], []);\n    }\n    if (isOperationNodeSource(result)) {\n        return result.toOperationNode();\n    }\n    return result;\n}\n","/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n","/// <reference types=\"./provide-controlled-connection.d.ts\" />\nimport { Deferred } from './deferred.js';\nimport { freeze } from './object-utils.js';\nexport async function provideControlledConnection(connectionProvider) {\n    const connectionDefer = new Deferred();\n    const connectionReleaseDefer = new Deferred();\n    connectionProvider\n        .provideConnection(async (connection) => {\n        connectionDefer.resolve(connection);\n        return await connectionReleaseDefer.promise;\n    })\n        .catch((ex) => connectionDefer.reject(ex));\n    // Create composite of the connection and the release method instead of\n    // modifying the connection or creating a new nesting `DatabaseConnection`.\n    // This way we don't accidentally override any methods of 3rd party\n    // connections and don't return wrapped connections to drivers that\n    // expect a certain specific connection class.\n    return freeze({\n        connection: await connectionDefer.promise,\n        release: connectionReleaseDefer.resolve,\n    });\n}\n","/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { provideControlledConnection } from '../util/provide-controlled-connection.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            if ('numUpdatedOrDeletedRows' in result) {\n                logOnce('kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`.');\n            }\n            return await this.#transformResult(result, compiledQuery.queryId);\n        });\n    }\n    async *stream(compiledQuery, chunkSize) {\n        const { connection, release } = await provideControlledConnection(this);\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, compiledQuery.queryId);\n            }\n        }\n        finally {\n            release();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n","/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n","/// <reference types=\"./merge-result.d.ts\" />\nexport class MergeResult {\n    numChangedRows;\n    constructor(numChangedRows) {\n        this.numChangedRows = numChangedRows;\n    }\n}\n","/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset,\n        });\n    },\n});\n","/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n","/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n","/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n","/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n","/// <reference types=\"./fetch-node.d.ts\" />\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const FetchNode = {\n    is(node) {\n        return node.kind === 'FetchNode';\n    },\n    create(rowCount, modifier) {\n        return {\n            kind: 'FetchNode',\n            rowCount: ValueNode.create(rowCount),\n            modifier,\n        };\n    },\n};\n","/// <reference types=\"./fetch-parser.d.ts\" />\nimport { FetchNode } from '../operation-node/fetch-node.js';\nimport { isBigInt, isNumber } from '../util/object-utils.js';\nexport function parseFetch(rowCount, modifier) {\n    if (!isNumber(rowCount) && !isBigInt(rowCount)) {\n        throw new Error(`Invalid fetch row count: ${rowCount}`);\n    }\n    if (!isFetchModifier(modifier)) {\n        throw new Error(`Invalid fetch modifier: ${modifier}`);\n    }\n    return FetchNode.create(rowCount, modifier);\n}\nfunction isFetchModifier(value) {\n    return value === 'only' || value === 'with ties';\n}\n","/// <reference types=\"./aggregate-function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const AggregateFunctionNode = freeze({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return freeze({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return freeze({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithOrderBy(aggregateFunctionNode, orderItems, withinGroup = false) {\n        const prop = withinGroup ? 'withinGroup' : 'orderBy';\n        return freeze({\n            ...aggregateFunctionNode,\n            [prop]: aggregateFunctionNode[prop]\n                ? OrderByNode.cloneWithItems(aggregateFunctionNode[prop], orderItems)\n                : OrderByNode.create(orderItems),\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return freeze({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n","/// <reference types=\"./function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FunctionNode = freeze({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return freeze({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n","/// <reference types=\"./aggregate-function-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { createOverBuilder } from '../parser/parse-utils.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nexport class AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    orderBy(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: QueryNode.cloneWithOrderByItems(this.#props.aggregateFunctionNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: QueryNode.cloneWithoutOrderBy(this.#props.aggregateFunctionNode),\n        });\n    }\n    withinGroupOrderBy(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOrderBy(this.#props.aggregateFunctionNode, parseOrderBy(args), true),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = createOverBuilder();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Casts the expression to the given type.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AggregateFunctionBuilder` with a new output type.\n     */\n    $castTo() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nexport class AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./function-module.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { FunctionNode } from '../operation-node/function-node.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { parseSelectAll } from '../parser/select-parser.js';\nimport { AggregateFunctionBuilder } from './aggregate-function-builder.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseTable } from '../parser/table-parser.js';\nexport function createFunctionModule() {\n    const fn = (name, args) => {\n        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args ?? [])));\n    };\n    const agg = (name, args) => {\n        return new AggregateFunctionBuilder({\n            aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(...values) {\n            return fn('coalesce', values);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n        jsonAgg(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('json_agg', [\n                    isString(table) ? parseTable(table) : table.toOperationNode(),\n                ]),\n            });\n        },\n        toJson(table) {\n            return new ExpressionWrapper(FunctionNode.create('to_json', [\n                isString(table) ? parseTable(table) : table.toOperationNode(),\n            ]));\n        },\n    });\n}\n","/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, parseTable, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { CastNode } from '../operation-node/cast-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        jsonPath() {\n            return new JSONPathBuilder(JSONPathNode.create());\n        },\n        table(table) {\n            return new ExpressionWrapper(parseTable(table));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpression(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        cast(expr, dataType) {\n            return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n","/// <reference types=\"./unary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return freeze({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n","/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n","/// <reference types=\"./case-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const CaseNode = freeze({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return freeze({\n            ...caseNode,\n            when: freeze(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return freeze({\n            ...caseNode,\n            when: caseNode.when\n                ? freeze([\n                    ...caseNode.when.slice(0, -1),\n                    WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return freeze({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n","/// <reference types=\"./case-builder.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { isSafeImmediateValue, parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nexport class CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n}\nexport class CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression)\n                ? parseSafeImmediateValue(valueExpression)\n                : parseValueExpression(valueExpression)),\n        });\n    }\n}\nexport class CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWith(this.#props.node, {\n                else: isSafeImmediateValue(valueExpression)\n                    ? parseSafeImmediateValue(valueExpression)\n                    : parseValueExpression(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexport class CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\n","/// <reference types=\"./json-operator-chain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONOperatorChainNode = freeze({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: freeze([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return freeze({\n            ...node,\n            values: freeze([...node.values, value]),\n        });\n    },\n});\n","/// <reference types=\"./json-path-leg-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathLegNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return freeze({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n","/// <reference types=\"./json-path-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return freeze({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: freeze([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return freeze({\n            ...jsonPathNode,\n            pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n","/// <reference types=\"./json-reference-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return freeze({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return freeze({\n            ...node,\n            traversal,\n        });\n    },\n});\n","/// <reference types=\"./json-path-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathLegNode, } from '../operation-node/json-path-leg-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport class JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .select(eb =>\n     *     eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        if (JSONReferenceNode.is(this.#node)) {\n            return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal)\n                ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value))\n                : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));\n        }\n        return new TraversedJSONPathBuilder(JSONPathNode.cloneWithLeg(this.#node, JSONPathLegNode.create(legType, value)));\n    }\n}\nexport class TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new TraversedJSONPathBuilder(this.#node);\n    }\n    $notNull() {\n        return new TraversedJSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n","/// <reference types=\"./tuple-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TupleNode = freeze({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'TupleNode',\n            values: freeze(values),\n        });\n    },\n});\n","/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nconst SIMPLE_COLUMN_DATA_TYPES = [\n    'varchar',\n    'char',\n    'text',\n    'integer',\n    'int2',\n    'int4',\n    'int8',\n    'smallint',\n    'bigint',\n    'boolean',\n    'real',\n    'double precision',\n    'float4',\n    'float8',\n    'decimal',\n    'numeric',\n    'binary',\n    'bytea',\n    'date',\n    'datetime',\n    'time',\n    'timetz',\n    'timestamp',\n    'timestamptz',\n    'serial',\n    'bigserial',\n    'uuid',\n    'json',\n    'jsonb',\n    'blob',\n    'varbinary',\n    'int4range',\n    'int4multirange',\n    'int8range',\n    'int8multirange',\n    'numrange',\n    'nummultirange',\n    'tsrange',\n    'tsmultirange',\n    'tstzrange',\n    'tstzmultirange',\n    'daterange',\n    'datemultirange',\n];\nconst COLUMN_DATA_TYPE_REGEX = [\n    /^varchar\\(\\d+\\)$/,\n    /^char\\(\\d+\\)$/,\n    /^decimal\\(\\d+, \\d+\\)$/,\n    /^numeric\\(\\d+, \\d+\\)$/,\n    /^binary\\(\\d+\\)$/,\n    /^datetime\\(\\d+\\)$/,\n    /^time\\(\\d+\\)$/,\n    /^timetz\\(\\d+\\)$/,\n    /^timestamp\\(\\d+\\)$/,\n    /^timestamptz\\(\\d+\\)$/,\n    /^varbinary\\(\\d+\\)$/,\n];\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\nexport function isColumnDataType(dataType) {\n    if (SIMPLE_COLUMN_DATA_TYPES.includes(dataType)) {\n        return true;\n    }\n    if (COLUMN_DATA_TYPE_REGEX.some((r) => r.test(dataType))) {\n        return true;\n    }\n    return false;\n}\n","/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, isColumnDataType, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    if (isOperationNodeSource(dataType)) {\n        return dataType.toOperationNode();\n    }\n    if (isColumnDataType(dataType)) {\n        return DataTypeNode.create(dataType);\n    }\n    throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);\n}\n","/// <reference types=\"./cast-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CastNode = freeze({\n    is(node) {\n        return node.kind === 'CastNode';\n    },\n    create(expression, dataType) {\n        return freeze({\n            kind: 'CastNode',\n            expression,\n            dataType,\n        });\n    },\n});\n","/// <reference types=\"./raw-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nclass RawBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isRawBuilder() {\n        return true;\n    }\n    as(alias) {\n        return new AliasedRawBuilderImpl(this, alias);\n    }\n    $castTo() {\n        return new RawBuilderImpl({ ...this.#props });\n    }\n    $notNull() {\n        return new RawBuilderImpl(this.#props);\n    }\n    withPlugin(plugin) {\n        return new RawBuilderImpl({\n            ...this.#props,\n            plugins: this.#props.plugins !== undefined\n                ? freeze([...this.#props.plugins, plugin])\n                : freeze([plugin]),\n        });\n    }\n    toOperationNode() {\n        return this.#toOperationNode(this.#getExecutor());\n    }\n    compile(executorProvider) {\n        return this.#compile(this.#getExecutor(executorProvider));\n    }\n    async execute(executorProvider) {\n        const executor = this.#getExecutor(executorProvider);\n        return executor.executeQuery(this.#compile(executor));\n    }\n    #getExecutor(executorProvider) {\n        const executor = executorProvider !== undefined\n            ? executorProvider.getExecutor()\n            : NOOP_QUERY_EXECUTOR;\n        return this.#props.plugins !== undefined\n            ? executor.withPlugins(this.#props.plugins)\n            : executor;\n    }\n    #toOperationNode(executor) {\n        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);\n    }\n    #compile(executor) {\n        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);\n    }\n}\nexport function createRawBuilder(props) {\n    return new RawBuilderImpl(props);\n}\nclass AliasedRawBuilderImpl {\n    #rawBuilder;\n    #alias;\n    constructor(rawBuilder, alias) {\n        this.#rawBuilder = rawBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#rawBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get rawBuilder() {\n        return this.#rawBuilder;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#rawBuilder.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135]}