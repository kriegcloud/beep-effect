module.exports=[841383,a=>{"use strict";var b=a.i(204781),c=a.i(776452),d=a.i(154132),e=a.i(919560);class f{get supportsCreateIfNotExists(){return!0}get supportsTransactionalDdl(){return!1}get supportsReturning(){return!0}async acquireMigrationLock(){}async releaseMigrationLock(){}get supportsOutput(){return!0}}class g{#a;#b=new i;#c;#d;constructor(a){this.#a={...a}}async init(){this.#c=this.#a.database,this.#d=new h(this.#c),this.#a.onCreateConnection&&await this.#a.onCreateConnection(this.#d)}async acquireConnection(){return await this.#b.lock(),this.#d}async beginTransaction(a){await a.executeQuery(b.CompiledQuery.raw("begin"))}async commitTransaction(a){await a.executeQuery(b.CompiledQuery.raw("commit"))}async rollbackTransaction(a){await a.executeQuery(b.CompiledQuery.raw("rollback"))}async releaseConnection(){this.#b.unlock()}async destroy(){this.#c?.close()}}class h{#c;constructor(a){this.#c=a}executeQuery(a){let{sql:b,parameters:c}=a;return Promise.resolve({rows:this.#c.prepare(b).all(...c)})}async *streamQuery(){throw Error("Streaming query is not supported by SQLite driver.")}}class i{#e;#f;async lock(){for(;this.#e;)await this.#e;this.#e=new Promise(a=>{this.#f=a})}unlock(){let a=this.#f;this.#e=void 0,this.#f=void 0,a?.()}}class j{#c;constructor(a){this.#c=a}async getSchemas(){return[]}async getTables(a={withInternalKyselyTables:!1}){let b=this.#c.selectFrom("sqlite_schema").where("type","=","table").where("name","not like","sqlite_%").select("name").$castTo();return a.withInternalKyselyTables||(b=b.where("name","!=",d.DEFAULT_MIGRATION_TABLE).where("name","!=",d.DEFAULT_MIGRATION_LOCK_TABLE)),Promise.all((await b.execute()).map(({name:a})=>this.#g(a)))}async getMetadata(a){return{tables:await this.getTables(a)}}async #g(a){let b=this.#c,c=await b.selectFrom("sqlite_master").where("name","=",a).select("sql").$castTo().execute(),d=c[0]?.sql?.split(/[\(\),]/)?.find(a=>a.toLowerCase().includes("autoincrement"))?.split(/\s+/)?.[0]?.replace(/["`]/g,""),f=await b.selectFrom(e.sql`pragma_table_info(${a})`.as("table_info")).select(["name","type","notnull","dflt_value"]).execute();return{name:a,columns:f.map(a=>({name:a.name,dataType:a.type,isNullable:!a.notnull,isAutoIncrementing:a.name===d,hasDefaultValue:null!=a.dflt_value})),isView:!0}}}class k extends c.DefaultQueryCompiler{getCurrentParameterPlaceholder(){return"?"}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getAutoIncrement(){return"autoincrement"}}class l{#a;constructor(a){this.#a={...a}}createDriver(){return new g(this.#a)}createQueryCompiler(){return new k}createAdapter(){return new f}createIntrospector(a){return new j(a)}}a.s(["NodeSqliteAdapter",()=>f,"NodeSqliteDialect",()=>l,"NodeSqliteDriver",()=>g,"NodeSqliteIntrospector",()=>j,"NodeSqliteQueryCompiler",()=>k])}];

//# sourceMappingURL=node_modules_better-auth_dist_chunks_node-sqlite-dialect_mjs_a74a90fb._.js.map