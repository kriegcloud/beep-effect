{"version":3,"sources":["turbopack:///[project]/node_modules/classnames/index.js","turbopack:///[project]/packages/ui/src/inputs/PhoneField/PhoneField.tsx","turbopack:///[project]/node_modules/react-phone-number-input/locale/en.json.js","turbopack:///[project]/packages/ui/src/inputs/PhoneField/list-popover.tsx","turbopack:///[project]/node_modules/input-format/source/dom.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/isObject.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/inputValuePrefix.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/stripIddPrefix.js","turbopack:///[project]/node_modules/libphonenumber-js/source/getCountries.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/checkNumberLength.js","turbopack:///[project]/node_modules/input-format/source/closeBraces.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/getNumberType.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/getCountryByNationalNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractNationalNumber.js","turbopack:///[project]/node_modules/react-phone-number-input/source/PropTypes.js","turbopack:///[project]/node_modules/libphonenumber-js/metadata.min.json.js","turbopack:///[project]/packages/ui/src/messages/search-not-found/search-not-found.tsx","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeFormatter.util.js","turbopack:///[project]/node_modules/react-phone-number-input/source/PhoneInputBrowser.js","turbopack:///[project]/node_modules/react-phone-number-input/source/Flag.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/getInternationalPhoneNumberPrefix.js","turbopack:///[project]/node_modules/react-phone-number-input/source/InputSmart.js","turbopack:///[project]/node_modules/react-phone-number-input/source/CountryIcon.js","turbopack:///[project]/node_modules/react-phone-number-input/source/PhoneInputWithCountryDefault.js","turbopack:///[project]/node_modules/react-phone-number-input/source/PhoneInput.js","turbopack:///[project]/node_modules/react-phone-number-input/source/InputBasic.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeFormatter.complete.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extension/extractExtension.js","turbopack:///[project]/node_modules/libphonenumber-js/source/constants.js","turbopack:///[project]/node_modules/libphonenumber-js/source/parsePhoneNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/matchesEntirely.js","turbopack:///[project]/node_modules/libphonenumber-js/source/parse.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/formatNationalNumberUsingFormat.js","turbopack:///[project]/node_modules/libphonenumber-js/source/parsePhoneNumberWithError_.js","turbopack:///[project]/node_modules/react-phone-number-input/source/InternationalIcon.js","turbopack:///[project]/node_modules/input-format/source/inputControl.js","turbopack:///[project]/node_modules/react-phone-number-input/source/usePhoneDigits.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternParser.js","turbopack:///[project]/node_modules/libphonenumber-js/source/metadata.js","turbopack:///[project]/node_modules/input-format/source/helpers.js","turbopack:///[project]/node_modules/react-phone-number-input/source/useInputKeyDownHandler.js","turbopack:///[project]/node_modules/country-flag-icons/source/unicode.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/isE164Number.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","turbopack:///[project]/node_modules/libphonenumber-js/source/tools/semver-compare.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/mergeArrays.js","turbopack:///[project]/node_modules/libphonenumber-js/source/parsePhoneNumber_.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/getPossibleCountriesForNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extension/createExtensionPattern.js","turbopack:///[project]/node_modules/libphonenumber-js/source/formatIncompletePhoneNumber.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/getIddPrefix.js","turbopack:///[project]/node_modules/libphonenumber-js/source/format.js","turbopack:///[project]/node_modules/react-phone-number-input/source/libphonenumber/formatPhoneNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractPhoneContext.js","turbopack:///[project]/node_modules/react-phone-number-input/source/CountrySelect.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/phoneInputHelpers.js","turbopack:///[project]/node_modules/libphonenumber-js/source/isValidPhoneNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternMatcher.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/parsePhoneNumberCharacter.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","turbopack:///[project]/node_modules/input-format/source/react/useInput.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeParser.js","turbopack:///[project]/node_modules/react-phone-number-input/min/index.js","turbopack:///[project]/node_modules/react-phone-number-input/input/index.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/parseDigits.js","turbopack:///[project]/node_modules/react-phone-number-input/source/helpers/countries.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeFormatter.js","turbopack:///[project]/node_modules/input-format/source/edit.js","turbopack:///[project]/node_modules/libphonenumber-js/source/isPossible.js","turbopack:///[project]/node_modules/libphonenumber-js/source/isPossiblePhoneNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouType.js","turbopack:///[project]/node_modules/libphonenumber-js/source/normalizeArguments.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/RFC3966.js","turbopack:///[project]/node_modules/input-format/source/templateFormatter.js","turbopack:///[project]/node_modules/input-format/source/parse.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/extractCountryCallingCode.js","turbopack:///[project]/node_modules/libphonenumber-js/source/ParseError.js","turbopack:///[project]/node_modules/libphonenumber-js/source/PhoneNumber.js","turbopack:///[project]/node_modules/react-phone-number-input/source/PhoneInputWithCountry.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/isViablePhoneNumber.js","turbopack:///[project]/node_modules/libphonenumber-js/source/parseIncompletePhoneNumber.js","turbopack:///[project]/node_modules/input-format/source/react/Input.js","turbopack:///[project]/node_modules/libphonenumber-js/source/helpers/applyInternationalSeparatorStyle.js","turbopack:///[project]/node_modules/input-format/source/format.js","turbopack:///[project]/node_modules/react-phone-number-input/source/useExternalRef.js","turbopack:///[project]/node_modules/libphonenumber-js/source/AsYouTypeState.js","turbopack:///[project]/node_modules/libphonenumber-js/source/isValid.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","\"use client\";\n\nimport Box from \"@mui/material/Box\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { inputBaseClasses } from \"@mui/material/InputBase\";\nimport type { TextFieldProps } from \"@mui/material/TextField\";\nimport TextField from \"@mui/material/TextField\";\nimport { startTransition, useCallback, useEffect, useState } from \"react\";\nimport { parsePhoneNumber } from \"react-phone-number-input\";\nimport type { Country, Value } from \"react-phone-number-input/input\";\nimport PhoneNumberInput from \"react-phone-number-input/input\";\n\nimport { countries } from \"../../assets/data/countries\";\n\nimport { Iconify } from \"../../atoms\";\nimport { useFieldContext } from \"../../form\";\nimport { CountryListPopover } from \"./list-popover\";\nimport type { PhoneInputProps } from \"./types\";\n\nexport function PhoneInput({\n  sx,\n  size,\n  value,\n  label,\n  onChange,\n  placeholder,\n  disableSelect,\n  variant = \"outlined\",\n  country: inputCountryCode,\n  ...other\n}: PhoneInputProps) {\n  const defaultCountryCode = getCountryCode(value, inputCountryCode);\n\n  const [searchCountry, setSearchCountry] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(defaultCountryCode);\n\n  const hasLabel = !!label;\n\n  const cleanValue = value?.replace(/[\\s-]+/g, \"\");\n\n  const handleClear = useCallback(() => {\n    onChange(\"\" as Value);\n  }, [onChange]);\n\n  useEffect(() => {\n    if (!selectedCountry) {\n      setSelectedCountry(defaultCountryCode);\n    }\n  }, [defaultCountryCode, selectedCountry]);\n\n  const handleClickCountry = (inputValue: Country) => {\n    startTransition(() => {\n      setSelectedCountry(inputValue);\n    });\n  };\n\n  const handleSearchCountry = (inputValue: string) => {\n    setSearchCountry(inputValue);\n  };\n\n  return (\n    <Box\n      sx={[\n        () => ({\n          \"--popover-button-mr\": \"12px\",\n          \"--popover-button-height\": \"22px\",\n          \"--popover-button-width\": variant === \"standard\" ? \"48px\" : \"60px\",\n          position: \"relative\",\n          ...(!disableSelect && {\n            [`& .${inputBaseClasses.input}`]: {\n              pl: \"calc(var(--popover-button-width) + var(--popover-button-mr))\",\n            },\n          }),\n        }),\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n    >\n      {!disableSelect && (\n        <CountryListPopover\n          countries={countries}\n          searchCountry={searchCountry}\n          countryCode={selectedCountry}\n          onClickCountry={handleClickCountry}\n          onSearchCountry={handleSearchCountry}\n          sx={{\n            pl: variant === \"standard\" ? 0 : 1.5,\n            ...(variant === \"standard\" && hasLabel && { mt: size === \"small\" ? \"16px\" : \"20px\" }),\n            ...((variant === \"filled\" || variant === \"outlined\") && {\n              mt: size === \"small\" ? \"8px\" : \"16px\",\n            }),\n            ...(variant === \"filled\" && hasLabel && { mt: size === \"small\" ? \"21px\" : \"25px\" }),\n          }}\n        />\n      )}\n\n      <PhoneNumberInput\n        size={size}\n        label={label}\n        value={cleanValue}\n        variant={variant}\n        onChange={onChange}\n        hiddenLabel={!label}\n        country={selectedCountry}\n        inputComponent={CustomInput}\n        placeholder={placeholder ?? \"Enter phone number\"}\n        slotProps={{\n          inputLabel: { shrink: true },\n          input: {\n            endAdornment: cleanValue && (\n              <InputAdornment position=\"end\">\n                <IconButton size=\"small\" edge=\"end\" onClick={handleClear}>\n                  <Iconify width={16} icon=\"mingcute:close-line\" />\n                </IconButton>\n              </InputAdornment>\n            ),\n          },\n        }}\n        {...other}\n      />\n    </Box>\n  );\n}\n\nfunction CustomInput({ ref, ...other }: TextFieldProps) {\n  return <TextField inputRef={ref} {...other} />;\n}\n\nfunction getCountryCode(inputValue: string, countryCode?: Country): Country {\n  if (inputValue) {\n    const phoneNumber = parsePhoneNumber(inputValue);\n    return phoneNumber?.country as Country;\n  }\n\n  return countryCode as Country;\n}\n\nfunction PhoneField({\n  helperText,\n  ...other\n}: Omit<PhoneInputProps, \"value\" | \"onChange\" | \"name\" | \"onBlur\" | \"error\">) {\n  const field = useFieldContext<Value>();\n\n  return (\n    <PhoneInput\n      name={field.name}\n      value={field.state.value}\n      onChange={(e) => field.handleChange(e)}\n      onBlur={field.handleBlur}\n      fullWidth\n      error={!!field.form.state.errorMap.onSubmit?.[field.name]}\n      helperText={field.form.state.errorMap.onSubmit?.[field.name] ?? helperText}\n      {...other}\n    />\n  );\n}\n\nexport default PhoneField;\n","export default {\n  \"ext\": \"ext.\",\n  \"country\": \"Phone number country\",\n  \"phone\": \"Phone\",\n  \"AB\": \"Abkhazia\",\n  \"AC\": \"Ascension Island\",\n  \"AD\": \"Andorra\",\n  \"AE\": \"United Arab Emirates\",\n  \"AF\": \"Afghanistan\",\n  \"AG\": \"Antigua and Barbuda\",\n  \"AI\": \"Anguilla\",\n  \"AL\": \"Albania\",\n  \"AM\": \"Armenia\",\n  \"AO\": \"Angola\",\n  \"AQ\": \"Antarctica\",\n  \"AR\": \"Argentina\",\n  \"AS\": \"American Samoa\",\n  \"AT\": \"Austria\",\n  \"AU\": \"Australia\",\n  \"AW\": \"Aruba\",\n  \"AX\": \"Åland Islands\",\n  \"AZ\": \"Azerbaijan\",\n  \"BA\": \"Bosnia and Herzegovina\",\n  \"BB\": \"Barbados\",\n  \"BD\": \"Bangladesh\",\n  \"BE\": \"Belgium\",\n  \"BF\": \"Burkina Faso\",\n  \"BG\": \"Bulgaria\",\n  \"BH\": \"Bahrain\",\n  \"BI\": \"Burundi\",\n  \"BJ\": \"Benin\",\n  \"BL\": \"Saint Barthélemy\",\n  \"BM\": \"Bermuda\",\n  \"BN\": \"Brunei Darussalam\",\n  \"BO\": \"Bolivia\",\n  \"BQ\": \"Bonaire, Sint Eustatius and Saba\",\n  \"BR\": \"Brazil\",\n  \"BS\": \"Bahamas\",\n  \"BT\": \"Bhutan\",\n  \"BV\": \"Bouvet Island\",\n  \"BW\": \"Botswana\",\n  \"BY\": \"Belarus\",\n  \"BZ\": \"Belize\",\n  \"CA\": \"Canada\",\n  \"CC\": \"Cocos (Keeling) Islands\",\n  \"CD\": \"Congo, Democratic Republic of the\",\n  \"CF\": \"Central African Republic\",\n  \"CG\": \"Congo\",\n  \"CH\": \"Switzerland\",\n  \"CI\": \"Cote d'Ivoire\",\n  \"CK\": \"Cook Islands\",\n  \"CL\": \"Chile\",\n  \"CM\": \"Cameroon\",\n  \"CN\": \"China\",\n  \"CO\": \"Colombia\",\n  \"CR\": \"Costa Rica\",\n  \"CU\": \"Cuba\",\n  \"CV\": \"Cape Verde\",\n  \"CW\": \"Curaçao\",\n  \"CX\": \"Christmas Island\",\n  \"CY\": \"Cyprus\",\n  \"CZ\": \"Czech Republic\",\n  \"DE\": \"Germany\",\n  \"DJ\": \"Djibouti\",\n  \"DK\": \"Denmark\",\n  \"DM\": \"Dominica\",\n  \"DO\": \"Dominican Republic\",\n  \"DZ\": \"Algeria\",\n  \"EC\": \"Ecuador\",\n  \"EE\": \"Estonia\",\n  \"EG\": \"Egypt\",\n  \"EH\": \"Western Sahara\",\n  \"ER\": \"Eritrea\",\n  \"ES\": \"Spain\",\n  \"ET\": \"Ethiopia\",\n  \"FI\": \"Finland\",\n  \"FJ\": \"Fiji\",\n  \"FK\": \"Falkland Islands\",\n  \"FM\": \"Federated States of Micronesia\",\n  \"FO\": \"Faroe Islands\",\n  \"FR\": \"France\",\n  \"GA\": \"Gabon\",\n  \"GB\": \"United Kingdom\",\n  \"GD\": \"Grenada\",\n  \"GE\": \"Georgia\",\n  \"GF\": \"French Guiana\",\n  \"GG\": \"Guernsey\",\n  \"GH\": \"Ghana\",\n  \"GI\": \"Gibraltar\",\n  \"GL\": \"Greenland\",\n  \"GM\": \"Gambia\",\n  \"GN\": \"Guinea\",\n  \"GP\": \"Guadeloupe\",\n  \"GQ\": \"Equatorial Guinea\",\n  \"GR\": \"Greece\",\n  \"GS\": \"South Georgia and the South Sandwich Islands\",\n  \"GT\": \"Guatemala\",\n  \"GU\": \"Guam\",\n  \"GW\": \"Guinea-Bissau\",\n  \"GY\": \"Guyana\",\n  \"HK\": \"Hong Kong\",\n  \"HM\": \"Heard Island and McDonald Islands\",\n  \"HN\": \"Honduras\",\n  \"HR\": \"Croatia\",\n  \"HT\": \"Haiti\",\n  \"HU\": \"Hungary\",\n  \"ID\": \"Indonesia\",\n  \"IE\": \"Ireland\",\n  \"IL\": \"Israel\",\n  \"IM\": \"Isle of Man\",\n  \"IN\": \"India\",\n  \"IO\": \"British Indian Ocean Territory\",\n  \"IQ\": \"Iraq\",\n  \"IR\": \"Iran\",\n  \"IS\": \"Iceland\",\n  \"IT\": \"Italy\",\n  \"JE\": \"Jersey\",\n  \"JM\": \"Jamaica\",\n  \"JO\": \"Jordan\",\n  \"JP\": \"Japan\",\n  \"KE\": \"Kenya\",\n  \"KG\": \"Kyrgyzstan\",\n  \"KH\": \"Cambodia\",\n  \"KI\": \"Kiribati\",\n  \"KM\": \"Comoros\",\n  \"KN\": \"Saint Kitts and Nevis\",\n  \"KP\": \"North Korea\",\n  \"KR\": \"South Korea\",\n  \"KW\": \"Kuwait\",\n  \"KY\": \"Cayman Islands\",\n  \"KZ\": \"Kazakhstan\",\n  \"LA\": \"Laos\",\n  \"LB\": \"Lebanon\",\n  \"LC\": \"Saint Lucia\",\n  \"LI\": \"Liechtenstein\",\n  \"LK\": \"Sri Lanka\",\n  \"LR\": \"Liberia\",\n  \"LS\": \"Lesotho\",\n  \"LT\": \"Lithuania\",\n  \"LU\": \"Luxembourg\",\n  \"LV\": \"Latvia\",\n  \"LY\": \"Libya\",\n  \"MA\": \"Morocco\",\n  \"MC\": \"Monaco\",\n  \"MD\": \"Moldova\",\n  \"ME\": \"Montenegro\",\n  \"MF\": \"Saint Martin (French Part)\",\n  \"MG\": \"Madagascar\",\n  \"MH\": \"Marshall Islands\",\n  \"MK\": \"North Macedonia\",\n  \"ML\": \"Mali\",\n  \"MM\": \"Myanmar\",\n  \"MN\": \"Mongolia\",\n  \"MO\": \"Macao\",\n  \"MP\": \"Northern Mariana Islands\",\n  \"MQ\": \"Martinique\",\n  \"MR\": \"Mauritania\",\n  \"MS\": \"Montserrat\",\n  \"MT\": \"Malta\",\n  \"MU\": \"Mauritius\",\n  \"MV\": \"Maldives\",\n  \"MW\": \"Malawi\",\n  \"MX\": \"Mexico\",\n  \"MY\": \"Malaysia\",\n  \"MZ\": \"Mozambique\",\n  \"NA\": \"Namibia\",\n  \"NC\": \"New Caledonia\",\n  \"NE\": \"Niger\",\n  \"NF\": \"Norfolk Island\",\n  \"NG\": \"Nigeria\",\n  \"NI\": \"Nicaragua\",\n  \"NL\": \"Netherlands\",\n  \"NO\": \"Norway\",\n  \"NP\": \"Nepal\",\n  \"NR\": \"Nauru\",\n  \"NU\": \"Niue\",\n  \"NZ\": \"New Zealand\",\n  \"OM\": \"Oman\",\n  \"OS\": \"South Ossetia\",\n  \"PA\": \"Panama\",\n  \"PE\": \"Peru\",\n  \"PF\": \"French Polynesia\",\n  \"PG\": \"Papua New Guinea\",\n  \"PH\": \"Philippines\",\n  \"PK\": \"Pakistan\",\n  \"PL\": \"Poland\",\n  \"PM\": \"Saint Pierre and Miquelon\",\n  \"PN\": \"Pitcairn\",\n  \"PR\": \"Puerto Rico\",\n  \"PS\": \"Palestine\",\n  \"PT\": \"Portugal\",\n  \"PW\": \"Palau\",\n  \"PY\": \"Paraguay\",\n  \"QA\": \"Qatar\",\n  \"RE\": \"Reunion\",\n  \"RO\": \"Romania\",\n  \"RS\": \"Serbia\",\n  \"RU\": \"Russia\",\n  \"RW\": \"Rwanda\",\n  \"SA\": \"Saudi Arabia\",\n  \"SB\": \"Solomon Islands\",\n  \"SC\": \"Seychelles\",\n  \"SD\": \"Sudan\",\n  \"SE\": \"Sweden\",\n  \"SG\": \"Singapore\",\n  \"SH\": \"Saint Helena\",\n  \"SI\": \"Slovenia\",\n  \"SJ\": \"Svalbard and Jan Mayen\",\n  \"SK\": \"Slovakia\",\n  \"SL\": \"Sierra Leone\",\n  \"SM\": \"San Marino\",\n  \"SN\": \"Senegal\",\n  \"SO\": \"Somalia\",\n  \"SR\": \"Suriname\",\n  \"SS\": \"South Sudan\",\n  \"ST\": \"Sao Tome and Principe\",\n  \"SV\": \"El Salvador\",\n  \"SX\": \"Sint Maarten\",\n  \"SY\": \"Syria\",\n  \"SZ\": \"Swaziland\",\n  \"TA\": \"Tristan da Cunha\",\n  \"TC\": \"Turks and Caicos Islands\",\n  \"TD\": \"Chad\",\n  \"TF\": \"French Southern Territories\",\n  \"TG\": \"Togo\",\n  \"TH\": \"Thailand\",\n  \"TJ\": \"Tajikistan\",\n  \"TK\": \"Tokelau\",\n  \"TL\": \"Timor-Leste\",\n  \"TM\": \"Turkmenistan\",\n  \"TN\": \"Tunisia\",\n  \"TO\": \"Tonga\",\n  \"TR\": \"Turkey\",\n  \"TT\": \"Trinidad and Tobago\",\n  \"TV\": \"Tuvalu\",\n  \"TW\": \"Taiwan\",\n  \"TZ\": \"Tanzania\",\n  \"UA\": \"Ukraine\",\n  \"UG\": \"Uganda\",\n  \"UM\": \"United States Minor Outlying Islands\",\n  \"US\": \"United States\",\n  \"UY\": \"Uruguay\",\n  \"UZ\": \"Uzbekistan\",\n  \"VA\": \"Holy See (Vatican City State)\",\n  \"VC\": \"Saint Vincent and the Grenadines\",\n  \"VE\": \"Venezuela\",\n  \"VG\": \"Virgin Islands, British\",\n  \"VI\": \"Virgin Islands, U.S.\",\n  \"VN\": \"Vietnam\",\n  \"VU\": \"Vanuatu\",\n  \"WF\": \"Wallis and Futuna\",\n  \"WS\": \"Samoa\",\n  \"XK\": \"Kosovo\",\n  \"YE\": \"Yemen\",\n  \"YT\": \"Mayotte\",\n  \"ZA\": \"South Africa\",\n  \"ZM\": \"Zambia\",\n  \"ZW\": \"Zimbabwe\",\n  \"ZZ\": \"International\"\n}","import { Iconify } from \"@beep/ui/atoms\";\nimport { usePopover } from \"@beep/ui/hooks\";\nimport { FlagIcon } from \"@beep/ui/icons\";\nimport { SearchNotFound } from \"@beep/ui/messages\";\nimport Box from \"@mui/material/Box\";\nimport ButtonBase from \"@mui/material/ButtonBase\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport MenuList from \"@mui/material/MenuList\";\nimport Popover from \"@mui/material/Popover\";\nimport TextField from \"@mui/material/TextField\";\nimport { useMemo } from \"react\";\nimport type { Country } from \"react-phone-number-input/input\";\n\nimport type { CountryListProps } from \"./types\";\n\nexport function CountryListPopover({\n  sx,\n  countries,\n  countryCode,\n  searchCountry,\n  onClickCountry,\n  onSearchCountry,\n}: CountryListProps) {\n  const { open, onClose, onOpen, anchorEl } = usePopover();\n\n  const selectedCountry = useMemo(\n    () => countries.find((country) => country.code === countryCode),\n    [countries, countryCode]\n  );\n\n  const dataFiltered = useMemo(\n    () =>\n      applyFilter({\n        inputData: countries,\n        query: searchCountry,\n      }),\n    [countries, searchCountry]\n  );\n\n  const notFound = dataFiltered.length === 0 && !!searchCountry;\n\n  const btnId = \"country-list-button\";\n  const menuId = \"country-list-menu\";\n\n  const renderButton = () => (\n    <ButtonBase\n      disableRipple\n      id={btnId}\n      aria-haspopup=\"true\"\n      aria-controls={open ? menuId : undefined}\n      aria-expanded={open ? \"true\" : undefined}\n      onClick={onOpen}\n      sx={[\n        {\n          zIndex: 9,\n          display: \"flex\",\n          position: \"absolute\",\n          justifyContent: \"flex-start\",\n          width: \"var(--popover-button-width)\",\n          height: \"var(--popover-button-height)\",\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n    >\n      <FlagIcon\n        code={selectedCountry?.code}\n        sx={{\n          borderRadius: \"50%\",\n          width: \"var(--popover-button-height)\",\n          height: \"var(--popover-button-height)\",\n        }}\n      />\n\n      <Iconify icon=\"eva:chevron-down-fill\" sx={{ ml: 0.25, flexShrink: 0, color: \"text.disabled\" }} />\n\n      <Box\n        component=\"span\"\n        sx={(theme) => ({\n          height: 20,\n          ml: \"auto\",\n          width: \"1px\",\n          bgcolor: theme.vars.palette.divider,\n        })}\n      />\n    </ButtonBase>\n  );\n\n  const renderList = () => (\n    <MenuList>\n      {dataFiltered.map((country) => (\n        <MenuItem\n          key={country.code}\n          selected={open && countryCode === country.code}\n          autoFocus={open && countryCode === country.code}\n          onClick={() => {\n            onClose();\n            onSearchCountry(\"\");\n            onClickCountry(country.code as Country);\n          }}\n        >\n          <FlagIcon code={country.code} sx={{ mr: 1, width: 22, height: 22, borderRadius: \"50%\" }} />\n\n          <ListItemText\n            primary={country.label}\n            secondary={`${country.code} (+${country.phone})`}\n            slotProps={{\n              primary: { noWrap: true, sx: { typography: \"body2\" } },\n              secondary: { sx: { typography: \"caption\" } },\n            }}\n          />\n        </MenuItem>\n      ))}\n    </MenuList>\n  );\n\n  return (\n    <>\n      {renderButton()}\n\n      <Popover\n        id={menuId}\n        aria-labelledby={btnId}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={() => {\n          onClose();\n          onSearchCountry(\"\");\n        }}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n        transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n        slotProps={{\n          paper: {\n            sx: {\n              width: 1,\n              height: 320,\n              maxWidth: 320,\n              display: \"flex\",\n              flexDirection: \"column\",\n            },\n          },\n        }}\n      >\n        <Box sx={{ px: 1, py: 1.5 }}>\n          <TextField\n            autoFocus\n            fullWidth\n            value={searchCountry}\n            onChange={(event) => onSearchCountry(event.target.value)}\n            placeholder=\"Search...\"\n            slotProps={{\n              input: {\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Iconify icon=\"eva:search-fill\" sx={{ color: \"text.disabled\" }} />\n                  </InputAdornment>\n                ),\n                endAdornment: searchCountry && (\n                  <InputAdornment position=\"end\">\n                    <IconButton size=\"small\" edge=\"end\" onClick={() => onSearchCountry(\"\")}>\n                      <Iconify width={16} icon=\"mingcute:close-line\" />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              },\n            }}\n          />\n        </Box>\n\n        <Box sx={{ flex: \"1 1 auto\", overflowX: \"hidden\" }}>\n          {notFound ? <SearchNotFound query={searchCountry} sx={{ px: 2, pt: 5 }} /> : renderList()}\n        </Box>\n      </Popover>\n    </>\n  );\n}\n\ntype ApplyFilterProps = {\n  query: string;\n  inputData: CountryListProps[\"countries\"];\n};\n\nfunction applyFilter({ inputData, query }: ApplyFilterProps) {\n  if (!query) return inputData;\n\n  return inputData.filter(({ label, code, phone }) =>\n    [label, code, phone].some((field) => field?.toLowerCase().includes(query.toLowerCase()))\n  );\n}\n","export function isReadOnly(element)\r\n{\r\n\treturn element.hasAttribute('readonly')\r\n}\r\n\r\n// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i","const objectConstructor = {}.constructor;\r\n\r\nexport default function isObject(object) {\r\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\r\n}\r\n","import { getCountryCallingCode } from 'libphonenumber-js/core'\r\n\r\nexport function getPrefixForFormattingValueAsPhoneNumber({\r\n\tinputFormat,\r\n\tcountry,\r\n\tmetadata\r\n}) {\r\n\treturn inputFormat === 'NATIONAL_PART_OF_INTERNATIONAL' ?\r\n\t\t`+${getCountryCallingCode(country, metadata)}` :\r\n\t\t''\r\n}\r\n\r\nexport function removePrefixFromFormattedPhoneNumber(value, prefix) {\r\n\tif (prefix) {\r\n\t\tvalue = value.slice(prefix.length)\r\n\t\tif (value[0] === ' ') {\r\n\t\t\tvalue = value.slice(1)\r\n\t\t}\r\n\t}\r\n\treturn value\r\n}","import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}","import Metadata from './metadata.js'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}","import Metadata from '../metadata.js'\r\nimport mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, country, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, country, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for a certain `country` based on the number length.\r\n//\r\n// This function is not supported by metadata generated with ancient versions of\r\n// `libphonenumber-js` (before version `1.0.18`) which didn't include \"possible lengths\".\r\n//\r\n// There was also a known issue with `checkNumberLength()` function:\r\n// if a number is possible only in a certain `country` among several `countries`\r\n// that share the same \"country calling code\", that function would check\r\n// the possibility of the phone number only in the \"main\" `country` for the \"country calling code\"\r\n// and would not check if it's actually be possible in the speciifc `country`.\r\n//\r\n// For example, \"+1310xxxx\" numbers are valid in Canada.\r\n// However, they are not possible in the US due to being too short.\r\n// Since Canada and the US share the same country calling code — \"+1\" —\r\n// `checkNumberLength()` function used to return not \"IS_POSSIBLE\" for \"+1310xxxx\" numbers.\r\n//\r\n// In such cases, when using \"/max\" metadata, `isValid()` could output `true`\r\n// but at the same time `isPossible()` could output `false`, which was contradictory.\r\n//\r\n// See https://issuetracker.google.com/issues/335892662 for the discusson in Google's issues.\r\n//\r\n// The solution suggested by Google was implemented: an optional `country` argument\r\n// was added to `checkNumberLength()` function. If present, that `country` will be used\r\n// to check phone number length for that specific `country` rather than the \"main\" country\r\n// for the shared \"country calling code\".\r\n//\r\nexport function checkNumberLengthForType(nationalNumber, country, type, metadata) {\r\n\t// If the exact `country` is specified, it's no necessarily already selected in `metadata`.\r\n\t// Most likely, in cases when there're multiple countries corresponding to the same\r\n\t// \"country calling code\", the \"main\" country for that \"country calling code\" will be selected.\r\n\tif (country) {\r\n\t\tmetadata = new Metadata(metadata.metadata)\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t}\r\n\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, country, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import { count_occurences } from './helpers.js'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returns an empty object — `{}` —\r\n\t// that means that the phone number is malformed,\r\n\t// so it can't possibly be valid.\r\n\tif (!input.country && !input.countryCallingCode) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string} [country] — Exact country of the phone number.\r\n * @param  {string} [defaultCountry]\r\n * @param  {string} [defaultCallingCode]\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country || defaultCountry\r\n\t\t? getCountryCallingCode(country || defaultCountry, metadata)\r\n\t\t: defaultCallingCode\r\n\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country || defaultCountry, countryCallingCode)\r\n\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) &&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, country, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { number }\r\n}","import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\n// Returns the exact country that the `nationalPhoneNumber` belongs to\r\n// in cases of ambiguity, i.e. when multiple countries share the same \"country calling code\".\r\nexport default function getCountryByNationalNumber(nationalPhoneNumber, {\r\n\tcountries,\r\n\tmetadata\r\n}) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// const matchingCountries = []\r\n\r\n\tfor (const country of countries) {\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\t// \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t\t// By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t\t// condition for a phone number to belong to a country.\r\n\t\t// The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\r\n\t\t// because of the intended use of that feature.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\t// When multiple countries share the same \"country calling code\",\r\n\t\t\t// type patterns aren't guaranteed to be unique among them.\r\n\t\t\t// For example, both `US` and `CA` have the same pattern for `toll_free` numbers.\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103#note_1417147572\r\n\t\t\t//\r\n\t\t\t// That means that this `if` condition could be `true` for multiple countries from the list.\r\n\t\t\t// Currently, it just returns the first one, which is also the \"main\" country for the \"country calling code\".\r\n\t\t\t// In an example with `toll_free` numbers above, `\"US\"` would be returned even though\r\n\t\t\t// it could as well be `\"CA\"`.\r\n\t\t\t//\r\n\t\t\t// There was also a time when this attempted to be overly smart\r\n\t\t\t// and kept track of all such multiple matching countries\r\n\t\t\t// and then picked the one that matched the `defaultCountry`, if provided.\r\n\t\t\t// For example, with `toll_free` numbers above, and with `defaultCountry: \"CA\"`,\r\n\t\t\t// it would've returned `\"CA\"` instead of `\"US\"`.\r\n\t\t\t// Later it turned out that such \"overly smart\" behavior turned out to be just confusing,\r\n\t\t\t// so this \"overly smart\" country detection was reverted to returning the \"main\" country\r\n\t\t\t// for the \"country calling code\".\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\r\n\t\t\t//\r\n\t\t\treturn country\r\n\t\t\t//\r\n\t\t\t// The \"overly smart\" behavior code:\r\n\t\t\t//\r\n\t\t\t// if (defaultCountry) {\r\n\t\t\t// \tif (country === defaultCountry) {\r\n\t\t\t// \t\treturn country\r\n\t\t\t// \t} else {\r\n\t\t\t// \t\tmatchingCountries.push(country)\r\n\t\t\t// \t}\r\n\t\t\t// } else {\r\n\t\t\t// \treturn country\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\r\n\t// // Return the first (\"main\") one of the `matchingCountries`.\r\n\t// if (matchingCountries.length > 0) {\r\n\t// \treturn matchingCountries[0]\r\n\t// }\r\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryByCallingCode from './getCountryByCallingCode.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {string?} country — Country, if known.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, country, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.numberingPlan.possibleLengths()) {\r\n\t\t\t// If an exact `country` is not specified, attempt to detect it from the assumed national number.\r\n\t\t\tif (!country) {\r\n\t\t\t\tcountry = getCountryByCallingCode(metadata.numberingPlan.callingCode(), {\r\n\t\t\t\t\tnationalNumber,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, country, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, country, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, country, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}","import PropTypes from 'prop-types'\r\n\r\nexport const metadata = PropTypes.shape({\r\n\tcountry_calling_codes : PropTypes.object.isRequired,\r\n\tcountries : PropTypes.object.isRequired\r\n})\r\n\r\nexport const labels = PropTypes.objectOf(PropTypes.string)","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:48|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\",\"(?:31|4)6|51|6(?:485|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:(?:[0-26-9]\\\\d|3[0-8]|5[0135-9])\\\\d|4(?:[02-9]\\\\d|10))|3(?:(?:[0-3589]\\\\d|6[1-9]|7[0-35-9])\\\\d|4(?:[0-578]\\\\d|90))|7(?:[013-57-9]\\\\d|2[0-8])\\\\d)\\\\d\\\\d|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4])|[34]\\\\d\\\\d)|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|2[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"(?:[025-7]\\\\d|44)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[024-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[02-4679]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:01\\\\d|[24-689])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"0\"]]]],\"BL\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|3[3-7]|5[12]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"8001\\\\d{5}|(?:[2-467]\\\\d|50)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[235]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"[1-467]\\\\d{9,10}|55[0-46-9]\\\\d{8}|[34]\\\\d{7}|55\\\\d{7,8}|(?:5[0-46-9]|[89]\\\\d)\\\\d{7,9}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37|86)\",\"300|4(?:0(?:0|20)|370|864)\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[178]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-6]|7[246]|8[2-4]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|[78]\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|5[07]|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|9(?:0[25]|42))[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:2[125-9]|33|44|66|77|88)|6(?:22|33))[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"(?:(?:[189]|5\\\\d)\\\\d|2)\\\\d{7}|[1-68]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"5\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"60|809\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9(?:10|[2-9])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-8]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"(?:(?:1[03-689]|2\\\\d)\\\\d\\\\d|6)\\\\d{8}|1\\\\d{10}|[126]\\\\d{6}(?:\\\\d(?:\\\\d{2})?)?|86\\\\d{5,6}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{5,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]\",\"(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:46|60\\\\d\\\\d)\\\\d{6}|(?:1\\\\d|[39])\\\\d{9}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"46\"]],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6|90\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|9[14]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"(?:[2-7]|8\\\\d\\\\d)\\\\d{7}|[2-47]\\\\d{6}|[34]\\\\d{5}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[56]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[03568]\",\"15(?:[0568]|3[13])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{8})\",\"$1 $2\",[\"1\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{5})\",\"$1\",[\"20[2-59]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[68])0|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"(?:19|[2568])[1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,\"0|180020\",0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0-35])|4(?:(?:[0-5]\\\\d|70)\\\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[0-3]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94\\\\d|7093)\\\\d{5}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0|180020\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"80\\\\d{6}|(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-8]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:[2-8]\\\\d{3}|9008)\\\\d{3}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"[2-69]\\\\d{8}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{6}\",[7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6|7[245]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-589]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"00[1-9]\\\\d{9,14}|(?:[1-36]|8\\\\d{5})\\\\d{6}|00\\\\d{9}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0|180020\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,11}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:43|55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]|43\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[03]\"]]],0,0,0,0,0,0,[[\"0(?:669[0-79]\\\\d{1,6}|831\\\\d{2,8})|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[2356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[2-9]\\\\d{7,8}|(?:31|43)\\\\d{8}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0|180020\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97\\\\d))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|427|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[47]\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[25-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"3|4(?:2[09]|7[01])|6[1-9]\",\"3|4(?:2(?:0|9[02-69])|7(?:0[019]|1))|6[1-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[25-9]\"],\"0$1\"]],\"0\",0,\"(000[2569]\\\\d{4,6})$|(?:(?:003768)0?)|0\",\"$1\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|[235-9]\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33622|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-6]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[2457]\\\\d|33|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4[67]|[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(0-$1)\",1]],\"0\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|78|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2679]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[0-25-79]\\\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-8]|5[0-5]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|452|678|86\",\"[12]|452|6788|86\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:596\\\\d|7091)\\\\d{5}|(?:69|[89]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]|8(?:0[6-9]|[36])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[0467]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:20|9\\\\d)\\\\d{8}|[78]\\\\d{9,13}\",[10,11,12,13,14],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[129]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:222|444|(?:55|8\\\\d)\\\\d|666|777|999)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-9]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[4-7]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[1289]\\\\d{9}|50\\\\d{5}(?:\\\\d{2,3})?|[27-9]\\\\d{7,8}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|8\\\\d{4,6}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|8|90\",\"50(?:[0367]|88)|8|90\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[589]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|8\\\\d\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[136]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"709\\\\d{6}|(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-6]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:[06][0-6]|1[0-3]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))|7092[0-3])\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,[\"9(?:399[0-3]|479[0-6]|76(?:2[278]|3[0-37]))\\\\d{4}\"],[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[236-8]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,0,[[\"336(?:[013-9]\\\\d|2[013-9])\\\\d{5}|(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15-7]|6[0-35-79]|7[1-37-9]))\\\\d{7}\",[10]],[\"9\\\\d{9}\",[10]],[\"8(?:0[04]|108\\\\d{3})\\\\d{7}\"],[\"80[39]\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"(?:[15]\\\\d|800|92)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"[6-9]\\\\d{6}|[1-6]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"(?:[2489]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[0-35-9]|7[67]|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|[6-8]\\\\d|90)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-9]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|(?:80\\\\d|900)\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-359]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-4]|5[1-3]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[59]\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|30|[689]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[236-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"44[02-479]|[34]7\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[1245]|3[12])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"(?:[1-6]\\\\d|71)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[67]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|61[06])\",\"5(?:[0-59]|61[06]1)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"3052(?:0[0-8]|[1-9]\\\\d)\\\\d{4}|(?:2742|305[3-9])\\\\d{6}|(?:472|983)[2-47-9]\\\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[013-79]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-269])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[0-247]|4[0378]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[0168]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-3589]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"305209\\\\d{4}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"0004\\\\d{2,9}|[1249]\\\\d{7}|2\\\\d{3,4}|(?:[49]\\\\d|80)\\\\d{5}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d{4,5})\",\"$1\",[\"21\"]],[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[49]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"00\",\"(?:20|33|[5-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-9]\"]]]],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11,12],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[357-9]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72|8\\\\d{4})\\\\d{4}|[89]\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[47-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"2\\\\d{7,8}|3\\\\d{7,11}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2|39\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7,10})\",\"$1 $2\",[\"3\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"7093\\\\d{5}|(?:80|9\\\\d)\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"269(?:0[0-467]|15|5[0-4]|6\\\\d|[78]0)\\\\d{4}\"],[\"(?:639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|40|5[05-9]|9[04-79])|7093[5-7])\\\\d{4}\"],[\"80\\\\d{7}\"],0,0,0,0,0,[\"9(?:(?:39|47)8[01]|769\\\\d)\\\\d{4}\"]]],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[579]\\\\d|63)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[579]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[235-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"],0,0,0,0,0,0,[\"2\\\\d{8}\",[9]]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"6\\\\d{9}|[0-36-9]\\\\d{8}\",[9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-37-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{5,6})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{9}|[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,[\"348[57]\\\\d{7}\",[11]],0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","import type { BoxProps } from \"@mui/material/Box\";\nimport Box from \"@mui/material/Box\";\nimport type { SxProps, Theme } from \"@mui/material/styles\";\nimport type { TypographyProps } from \"@mui/material/Typography\";\nimport Typography from \"@mui/material/Typography\";\n\ntype SearchNotFoundProps = BoxProps & {\n  query?: string | undefined;\n  sx?: SxProps<Theme> | undefined;\n  slotProps?:\n    | {\n        title?: TypographyProps | undefined;\n        description?: TypographyProps | undefined;\n      }\n    | undefined;\n};\n\nexport function SearchNotFound({ query, sx, slotProps, ...other }: SearchNotFoundProps) {\n  if (!query) {\n    return (\n      <Typography variant=\"body2\" {...slotProps?.description}>\n        Please enter keywords\n      </Typography>\n    );\n  }\n\n  return (\n    <Box\n      sx={[\n        {\n          gap: 1,\n          display: \"flex\",\n          borderRadius: 1.5,\n          textAlign: \"center\",\n          flexDirection: \"column\",\n        },\n        ...(Array.isArray(sx) ? sx : [sx]),\n      ]}\n      {...other}\n    >\n      <Typography\n        variant=\"h6\"\n        {...slotProps?.title}\n        sx={[\n          { color: \"text.primary\" },\n          ...(Array.isArray(slotProps?.title?.sx) ? (slotProps?.title?.sx ?? []) : [slotProps?.title?.sx]),\n        ]}\n      >\n        Not found\n      </Typography>\n\n      <Typography variant=\"body2\" {...slotProps?.description}>\n        No results found for &nbsp;\n        <strong>{`\"${query}\"`}</strong>\n        .\n        <br /> Try checking for typos or using complete words.\n      </Typography>\n    </Box>\n  );\n}\n","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput.js'\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\t// `<input type=\"tel\"/>`.\r\n\t\ttype = 'tel',\r\n\t\t// Remember (and autofill) the value as a phone number.\r\n\t\tautoComplete = 'tel',\r\n\t\tsmartCaret = true,\r\n\t\tmetadata = defaultMetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// Default country flag icon.\r\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\r\nexport default function FlagComponent({\r\n\tcountry,\r\n\tcountryName,\r\n\tflags,\r\n\tflagUrl,\r\n\t...rest\r\n}) {\r\n\tif (flags && flags[country]) {\r\n\t\treturn flags[country]({ title: countryName })\r\n\t}\r\n\treturn (\r\n\t\t<img\r\n\t\t\t{...rest}\r\n\t\t\talt={countryName}\r\n\t\t\trole={countryName ? undefined : \"presentation\"}\r\n\t\t\tsrc={flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())}/>\r\n\t)\r\n}\r\n\r\nFlagComponent.propTypes = {\r\n\t// The country to be selected by default.\r\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tcountry: PropTypes.string.isRequired,\r\n\r\n\t// Will be HTML `title` attribute of the `<img/>`.\r\n\tcountryName: PropTypes.string.isRequired,\r\n\r\n\t// Country flag icon components.\r\n\t// By default flag icons are inserted as `<img/>`s\r\n\t// with their `src` pointed to `country-flag-icons` gitlab pages website.\r\n\t// There might be cases (e.g. an offline application)\r\n\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t// bundle is more appropriate.\r\n\t// `import flags from 'react-phone-number-input/flags'`.\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t// A URL for a country flag icon.\r\n\t// By default it points to `country-flag-icons` gitlab pages website.\r\n\tflagUrl: PropTypes.string.isRequired\r\n}\r\n","import {\r\n\tgetCountryCallingCode,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nconst ONLY_DIGITS_REGEXP = /^\\d+$/\r\n\r\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\r\n\t// Standard international phone number prefix: \"+\" and \"country calling code\".\r\n\tlet prefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t// \"Leading digits\" can't be used to rule out any countries.\r\n\t// So the \"pre-fill with leading digits on country selection\" feature had to be reverted.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/10#note_1231042367\r\n\t// // Get \"leading digits\" for a phone number of the country.\r\n\t// // If there're \"leading digits\" then they can be part of the prefix too.\r\n\t// // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/10\r\n\t// metadata = new Metadata(metadata)\r\n\t// metadata.selectNumberingPlan(country)\r\n\t// // \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t// // By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t// // condition for a phone number to belong to a country.\r\n\t// // The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t// // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t// const leadingDigits = metadata.numberingPlan.leadingDigits()\r\n\t// if (leadingDigits && ONLY_DIGITS_REGEXP.test(leadingDigits)) {\r\n\t// \tprefix += leadingDigits\r\n\t// }\r\n\r\n\treturn prefix\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType } from 'libphonenumber-js/core'\r\n\r\nimport { getPrefixForFormattingValueAsPhoneNumber, removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\nimport parsePhoneNumberCharacter from './helpers/parsePhoneNumberCharacter.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's and maintains the caret's position in the process.\r\n\t * The caret positioning is maintained using `input-format` library.\r\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\r\n\t */\r\n\tfunction InputSmart({\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tmetadata = defaultMetadata,\r\n\t\t//\r\n\t\t// The rest of the properties listed here are just to get the `rest` props\r\n\t\t// that will be passed to the DOM `<input/>` element.\r\n\t\t//\r\n\t\t// `international` property is deprecated and is not used.\r\n\t\tinternational,\r\n\t\t// `withCountryCallingCode` property is deprecated and is not used.\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\r\n\t\t\tconst prefix = getPrefixForFormattingValueAsPhoneNumber({\r\n\t\t\t\tinputFormat,\r\n\t\t\t\tcountry,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removePrefixFromFormattedPhoneNumber(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removePrefixFromFormattedPhoneNumber(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinputFormat\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}\r\n\t\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * This property should've been called `defaultCountry`\r\n\t\t * because it only applies when the user inputs a phone number in a national format\r\n\t\t * and is completely ignored when the user inputs a phone number in an international format.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The format that the input field value is being input/output in.\r\n\t\t */\r\n\t\tinputFormat : PropTypes.oneOf([\r\n\t\t\t'INTERNATIONAL',\r\n\t\t\t'NATIONAL_PART_OF_INTERNATIONAL',\r\n\t\t\t'NATIONAL',\r\n\t\t\t'INTERNATIONAL_OR_NATIONAL'\r\n\t\t]).isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport DefaultInternationalIcon from './InternationalIcon.js'\r\nimport Flag from './Flag.js'\r\n\r\nexport function createCountryIconComponent({\r\n\tflags,\r\n\tflagUrl,\r\n\tflagComponent: FlagComponent,\r\n\tinternationalIcon: InternationalIcon\r\n}) {\r\n\tfunction CountryIcon({\r\n\t\tcountry,\r\n\t\tlabel,\r\n\t\taspectRatio,\r\n\t\t...rest\r\n\t}) {\r\n\t\t// `aspectRatio` is currently a hack for the default \"International\" icon\r\n\t\t// to render it as a square when Unicode flag icons are used.\r\n\t\t// So `aspectRatio` property is only used with the default \"International\" icon.\r\n\t\tconst _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...rest}\r\n\t\t\t\tclassName={classNames('PhoneInputCountryIcon', {\r\n\t\t\t\t\t'PhoneInputCountryIcon--square': _aspectRatio === 1,\r\n\t\t\t\t\t'PhoneInputCountryIcon--border': country\r\n\t\t\t\t})}>\r\n\t\t\t\t{\r\n\t\t\t\t\tcountry\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<FlagComponent\r\n\t\t\t\t\t\tcountry={country}\r\n\t\t\t\t\t\tcountryName={label}\r\n\t\t\t\t\t\tflags={flags}\r\n\t\t\t\t\t\tflagUrl={flagUrl}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<InternationalIcon\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\taspectRatio={_aspectRatio}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tCountryIcon.propTypes = {\r\n\t\tcountry: PropTypes.string,\r\n\t\tlabel: PropTypes.string.isRequired,\r\n\t\taspectRatio: PropTypes.number\r\n\t}\r\n\r\n\treturn CountryIcon\r\n}\r\n\r\nexport default createCountryIconComponent({\r\n\t// Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\tflagComponent: Flag,\r\n\tinternationalIcon: DefaultInternationalIcon\r\n})","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport defaultLabels from '../locale/en.json.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport PhoneInput from './PhoneInputWithCountry.js'\r\n\r\nexport function createPhoneInput(defaultMetadata) {\r\n\tconst PhoneInputDefault = React.forwardRef(({\r\n\t\tmetadata = defaultMetadata,\r\n\t\tlabels = defaultLabels,\r\n\t\t...rest\r\n\t}, ref) => (\r\n\t\t<PhoneInput\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tlabels={labels}\r\n\t\t/>\r\n\t))\r\n\r\n\tPhoneInputDefault.propTypes = {\r\n\t\tmetadata: metadataPropType,\r\n\t\tlabels: labelsPropType\r\n\t}\r\n\r\n\treturn PhoneInputDefault\r\n}\r\n\r\nexport default createPhoneInput()","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nimport { metadata as metadataType } from './PropTypes.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue = true,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst {\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits,\r\n\t\tinputFormat\r\n\t} = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// * Passing `international` property is deprecated.\r\n\t// * Passing `withCountryCallingCode` property is deprecated.\r\n\t// * Passing `country` property: it should've been called `defaultCountry` instead\r\n\t//   because it only applies when the user inputs a phone number in a national format\r\n\t//   and is completely ignored when the user inputs a phone number in an international format.\r\n\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinputFormat={inputFormat}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t * See `InputBasic.js` and `InputSmart.js` for an example.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: metadataType\r\n}\r\n\r\nexport default PhoneInput","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getPrefixForFormattingValueAsPhoneNumber, removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tmetadata = defaultMetadata,\r\n\t\tinputComponent: Input = 'input',\r\n\t\t//\r\n\t\t// The rest of the properties listed here are just to get the `rest` props\r\n\t\t// that will be passed to the DOM `<input/>` element.\r\n\t\t//\r\n\t\t// `international` property is deprecated and is not used.\r\n\t\tinternational,\r\n\t\t// `withCountryCallingCode` property is deprecated and is not used.\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getPrefixForFormattingValueAsPhoneNumber({\r\n\t\t\tinputFormat,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t//\r\n\t\t\t// This issue is worked around with this simple hack:\r\n\t\t\t// when \"old\" and \"new\" parsed values are the same,\r\n\t\t\t// it checks if the \"new\" formatted value could be obtained\r\n\t\t\t// from the \"old\" formatted value by erasing some (or no) characters at the right side.\r\n\t\t\t// If it could then it's likely that the user has hit a Backspace key\r\n\t\t\t// and what they really intended was to erase a rightmost digit rather than\r\n\t\t\t// a rightmost punctuation character.\r\n\t\t\t//\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinputFormat\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}\r\n\t\t\t\tonKeyDown={_onKeyDown}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * This property should've been called `defaultCountry`\r\n\t\t * because it only applies when the user inputs a phone number in a national format\r\n\t\t * and is completely ignored when the user inputs a phone number in an international format.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The format that the input field value is being input/output in.\r\n\t\t */\r\n\t\tinputFormat : PropTypes.oneOf([\r\n\t\t\t'INTERNATIONAL',\r\n\t\t\t'NATIONAL_PART_OF_INTERNATIONAL',\r\n\t\t\t'NATIONAL',\r\n\t\t\t'INTERNATIONAL_OR_NATIONAL'\r\n\t\t]).isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removePrefixFromFormattedPhoneNumber(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}","import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, country, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, country, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix) {\r\n\t\t\tformattedNationalNumber = state.prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}","import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber_ from './parsePhoneNumber_.js'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n","import getCountryByNationalNumber from './getCountryByNationalNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Returns the exact country for the `nationalNumber`\r\n// that belongs to the specified \"country calling code\".\r\nexport default function getCountryByCallingCode(callingCode, {\r\n\tnationalNumber: nationalPhoneNumber,\r\n\tmetadata\r\n}) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn getCountryByNationalNumber(nationalPhoneNumber, {\r\n\t\tcountries: possibleCountries,\r\n\t\tmetadata: metadata.metadata\r\n\t})\r\n}","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regularExpressionText) {\r\n\t// If the assigning of the `''` default value is moved to the arguments above,\r\n\t// the code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regularExpressionText + ')$').test(text)\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossible.js'\r\n// import { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\n\r\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\tphoneNumber.__countryCallingCodeSource = countryCallingCodeSource\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, country, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// // Parse RFC 3966 phone number URI.\r\n\t// if (text && text.indexOf('tel:') === 0) {\r\n\t// \treturn parseRFC3966(text)\r\n\t// }\r\n\t// let number = extractFormattedPhoneNumber(text, extract, v2)\r\n\tlet number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\r\n\t\textractFormattedPhoneNumber: (text) => extractFormattedPhoneNumber(text, extract, v2)\r\n\t})\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCodeSource, countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tundefined,\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// The exact country of the phone number\r\n\tlet country\r\n\r\n\t// If `formattedPhoneNumber` is passed in \"international\" format,\r\n\t// choose a country by `countryCallingCode`.\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// Else, if `formattedPhoneNumber` is passed in \"national\" format,\r\n\t// then `number` is defined and `countryCallingCode` is `undefined`.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn {\r\n\t\t\tcountryCallingCodeSource,\r\n\t\t\tcountryCallingCode\r\n\t\t}\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tcountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, {\r\n\t\tnationalNumber,\r\n\t\tmetadata\r\n\t})\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.selectNumberingPlan(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}","import parse from './parse.js'\r\n\r\nexport default function parsePhoneNumberWithError(text, options, metadata) {\r\n\treturn parse(text, { ...options, v2: true }, metadata)\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function InternationalIcon({ aspectRatio, ...rest }) {\r\n\tif (aspectRatio === 1) {\r\n\t\treturn <InternationalIcon1x1 {...rest}/>\r\n\t} else {\r\n\t\treturn <InternationalIcon3x2 {...rest}/>\r\n\t}\r\n}\r\n\r\nInternationalIcon.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\taspectRatio: PropTypes.number\r\n}\r\n\r\n// 3x2.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon3x2({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 75 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeMiterlimit=\"10\">\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"/>\r\n\t\t\t\t<path d=\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"/>\r\n\t\t\t\t<line x1=\"26\" y1=\"25\" x2=\"74\" y2=\"25\"/>\r\n\t\t\t\t<line x1=\"50\" y1=\"1\" x2=\"50\" y2=\"49\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"none\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon3x2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n\r\n// 1x1.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon1x1({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 50 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\">\r\n\t\t\t\t<path d=\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"/>\r\n\t\t\t\t<path d=\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"/>\r\n\t\t\t\t<path d=\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"/>\r\n\t\t\t\t<path d=\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"/>\r\n\t\t\t\t<line x1=\"27.8\" y1=\"0.85\" x2=\"27.8\" y2=\"34.61\"/>\r\n\t\t\t\t<line x1=\"15.2\" y1=\"22.23\" x2=\"49.15\" y2=\"22.23\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"transparent\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon1x1.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n","import edit   from './edit.js'\r\nimport parse  from './parse.js'\r\nimport format from './format.js'\r\n\r\nimport\r\n{\r\n\tisReadOnly,\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom.js'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\tif (on_change) {\r\n\t\ton_change(value)\r\n\t}\r\n}","import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\nimport { validateE164Number } from './helpers/isE164Number.js'\r\nimport { removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\t// Validate the use of `withCountryCallingCode` property.\r\n\tif (typeof withCountryCallingCode === 'boolean' && !(country && international)) {\r\n\t\tconsole.error('[react-phone-number-input] `withCountryCallingCode` property can only be used together with `country` and `international` properties')\r\n\t}\r\n\r\n\t// Validate the use of `country` and `defaultCountry` properties.\r\n\tif (country && defaultCountry) {\r\n\t\tconsole.error('[react-phone-number-input] When `country` property is passed, `defaultCountry` property has no effect and therefore shouldn\\'t be passed')\r\n\t}\r\n\r\n\t// Validate the use of `international` property.\r\n\tif (typeof international === 'boolean' && !country) {\r\n\t\tconsole.error('[react-phone-number-input] `international` property can only be used together with `country` property')\r\n\t}\r\n\r\n\tconst inputFormat = getInputFormat({\r\n\t\tinternational,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\twithCountryCallingCode\r\n\t})\r\n\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\t// Validate that the initially-supplied `value` is in `E.164` format.\r\n\t\t// Because sometimes people attempt to supply a `value` like \"+1 (879) 490-8676\".\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/231#note_2016334796\r\n\t\tif (value) {\r\n\t\t\tvalidateE164Number(value)\r\n\t\t}\r\n\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tdefaultCountry,\r\n\t\t\tinputFormat,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\r\n\t// `phoneDigits` is the a property that gets passed to the `<input/>` component as its \"value\":\r\n\t// * `phoneDigits` is the `<input value/>` property.\r\n\t// * `value` is the `<PhoneInput value/>` property.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (inputFormat === 'NATIONAL_PART_OF_INTERNATIONAL') {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (inputFormat === 'INTERNATIONAL') {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is in `withCountryCallingCode` mode,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"NATIONAL\" or in \"NATIONAL_PART_OF_INTERNATIONAL\" format.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits: onSetPhoneDigits,\r\n\t\tinputFormat\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {string} [inputFormat]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinputFormat,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && inputFormat === 'INTERNATIONAL') {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\t// Check for `country` property mismatch for the actual `value`.\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tswitch (inputFormat) {\r\n\t\t\t\tcase 'NATIONAL':\r\n\t\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t\tcase 'NATIONAL_PART_OF_INTERNATIONAL':\r\n\t\t\t\t\treturn parseDigits(\r\n\t\t\t\t\t\tremovePrefixFromFormattedPhoneNumber(\r\n\t\t\t\t\t\t\tphoneNumber.formatInternational(),\r\n\t\t\t\t\t\t\tgetInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\tcase 'INTERNATIONAL':\r\n\t\t\t\t\tthrow new Error('`inputFormat: \"INTERNATIONAL\"` case should\\'ve already been handled earlier in the code')\r\n\t\t\t\tcase 'INTERNATIONAL_OR_NATIONAL':\r\n\t\t\t\t\tthrow new Error('`inputFormat: \"INTERNATIONAL_OR_NATIONAL\"` is not possible when `country` is fixed')\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \\`inputFormat\\`: ${inputFormat}`)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}\r\n\r\nfunction getInputFormat({\r\n\tinternational,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\twithCountryCallingCode\r\n}) {\r\n\treturn country ? (\r\n\t\tinternational ? (\r\n\t\t\twithCountryCallingCode ? 'INTERNATIONAL' : 'NATIONAL_PART_OF_INTERNATIONAL'\r\n\t\t) : 'NATIONAL'\r\n\t) : (\r\n\t\tdefaultCountry ? 'INTERNATIONAL_OR_NATIONAL' : 'INTERNATIONAL'\r\n\t)\r\n}","export default class PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn {\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([\r\n\t\t\t\t\texpandSingleElementArray(instructions)\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tif (instructions.length === 1) {\r\n\t\t\treturn instructions[0]\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nfunction expandSingleElementArray(array) {\r\n\tif (array.length === 1) {\r\n\t\treturn array[0]\r\n\t}\r\n\treturn array\r\n}","import compare from './tools/semver-compare.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\r\n\t// For that reason, it's not used in this detection algorithm.\r\n\t// Instead, it detects by `countries: {}` property existence.\r\n\tif (!isObject(metadata) || !isObject(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst typeOf = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.selectNumberingPlan(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.selectNumberingPlan(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}","import { useCallback } from 'react'\r\n\r\n// Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\r\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\r\n// * When placing the caret before the leading plus character and pressing Backspace,\r\n//   it duplicates the country calling code in the `<input/>`.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\r\nexport default function useInputKeyDownHandler({\r\n\tonKeyDown,\r\n\tinputFormat\r\n}) {\r\n\treturn useCallback((event) => {\r\n\t\t// Usability:\r\n\t\t// Don't allow the user to erase a leading \"+\" character when \"international\" input mode is forced.\r\n\t\t// That indicates to the user that they can't possibly enter the phone number in a non-international format.\r\n\t\tif (event.keyCode === BACKSPACE_KEY_CODE && inputFormat === 'INTERNATIONAL') {\r\n\t\t\t// It checks `event.target` here for being an `<input/>` element\r\n\t\t\t// because \"keydown\" events may bubble from arbitrary child elements\r\n\t\t\t// so there's no guarantee that `event.target` represents an `<input/>` element.\r\n\t\t\t// Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\r\n\t\t\tif (event.target instanceof HTMLInputElement) {\r\n\t\t\t\tif (getCaretPosition(event.target) === LEADING_PLUS.length) {\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}, [\r\n\t\tonKeyDown,\r\n\t\tinputFormat\r\n\t])\r\n}\r\n\r\n// Gets the caret position in an `<input/>` field.\r\n// The caret position starts with `0` which means \"before the first character\".\r\nfunction getCaretPosition(element) {\r\n\treturn element.selectionStart\r\n}\r\n\r\nconst BACKSPACE_KEY_CODE = 8\r\n\r\nconst LEADING_PLUS = '+'","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\r\nexport default function getCountryFlag(country) {\r\n\treturn getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1])\r\n}\r\n\r\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\r\nfunction getRegionalIndicatorSymbol(letter) {\r\n\treturn String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0))\r\n}","// Tells if `value: string` is an `E.164` phone number.\r\n//\r\n// Returns a boolean.\r\n//\r\n// It doesn't validate that the minimum national (significant) number length\r\n// is at least 2 characters.\r\n//\r\nexport default function isE164Number(value) {\r\n\tif (value.length < 2) {\r\n\t\treturn false\r\n\t}\r\n\tif (value[0] !== '+') {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 1\r\n\twhile (i < value.length) {\r\n\t\tconst character = value.charCodeAt(i)\r\n\t\tif (character >= 48 && character <= 57) {\r\n\t\t\t// Is a digit.\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\nexport function validateE164Number(value) {\r\n\tif (!isE164Number(value)) {\r\n\t\tconsole.error('[react-phone-number-input] Expected the initial `value` to be a E.164 phone number. Got', value)\r\n\t}\r\n}","import extractPhoneContext, {\r\n\tisPhoneContextValid,\r\n\tPLUS_SIGN,\r\n\tRFC3966_PREFIX_,\r\n\tRFC3966_PHONE_CONTEXT_,\r\n\tRFC3966_ISDN_SUBADDRESS_\r\n} from './extractPhoneContext.js'\r\n\r\nimport ParseError from '../ParseError.js'\r\n\r\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\r\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, {\r\n\textractFormattedPhoneNumber\r\n}) {\r\n\tconst phoneContext = extractPhoneContext(numberToParse)\r\n\tif (!isPhoneContextValid(phoneContext)) {\r\n\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t}\r\n\r\n\tlet phoneNumberString\r\n\r\n\tif (phoneContext === null) {\r\n\t\t// Extract a possible number from the string passed in.\r\n\t\t// (this strips leading characters that could not be the start of a phone number)\r\n\t\tphoneNumberString = extractFormattedPhoneNumber(numberToParse) || ''\r\n\t} else {\r\n\t\tphoneNumberString = ''\r\n\r\n\t\t// If the phone context contains a phone number prefix, we need to capture\r\n\t\t// it, whereas domains will be ignored.\r\n\t\tif (phoneContext.charAt(0) === PLUS_SIGN) {\r\n\t\t\tphoneNumberString += phoneContext\r\n\t\t}\r\n\r\n\t\t// Now append everything between the \"tel:\" prefix and the phone-context.\r\n\t\t// This should include the national number, an optional extension or\r\n\t\t// isdn-subaddress component. Note we also handle the case when \"tel:\" is\r\n\t\t// missing, as we have seen in some of the phone number inputs.\r\n\t\t// In that case, we append everything from the beginning.\r\n\t\tconst indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_)\r\n\t\tlet indexOfNationalNumber\r\n\t\t// RFC 3966 \"tel:\" prefix is preset at this stage because\r\n\t\t// `isPhoneContextValid()` requires it to be present.\r\n\t\t/* istanbul ignore else */\r\n\t\tif (indexOfRfc3966Prefix >= 0) {\r\n\t\t\tindexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length\r\n\t\t} else {\r\n\t\t\tindexOfNationalNumber = 0\r\n\t\t}\r\n\t\tconst indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t\tphoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext)\r\n\t}\r\n\r\n\t// Delete the isdn-subaddress and everything after it if it is present.\r\n\t// Note extension won't appear at the same time with isdn-subaddress\r\n\t// according to paragraph 5.3 of the RFC3966 spec.\r\n\tconst indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_)\r\n\tif (indexOfIsdn > 0) {\r\n\t\tphoneNumberString = phoneNumberString.substring(0, indexOfIsdn)\r\n\t}\r\n\t// If both phone context and isdn-subaddress are absent but other\r\n\t// parameters are present, the parameters are left in nationalNumber.\r\n\t// This is because we are concerned about deleting content from a potential\r\n\t// number string when there is no strong evidence that the number is\r\n\t// actually written in RFC3966.\r\n\r\n\tif (phoneNumberString !== '') {\r\n\t\treturn phoneNumberString\r\n\t}\r\n}","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumberWithError(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\r\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\tlet possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn []\r\n\t}\r\n\treturn possibleCountries.filter((country) => {\r\n\t\treturn couldNationalNumberBelongToCountry(nationalNumber, country, metadata)\r\n\t})\r\n}\r\n\r\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.selectNumberingPlan(country)\r\n\tif (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}","import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}","import AsYouType from './AsYouType.js'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string|object} [optionsOrDefaultCountry] - A two-letter (\"ISO 3166-1 alpha-2\") country code, or an object of shape `{ defaultCountry?: string, defaultCallingCode?: string }`.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, optionsOrDefaultCountry, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = optionsOrDefaultCountry\r\n\t\toptionsOrDefaultCountry = undefined\r\n\t}\r\n\treturn new AsYouType(optionsOrDefaultCountry, metadata).input(value)\r\n}","import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber,\r\n\tcouldNumberBelongToCountry\r\n} from './phoneInputHelpers.js'\r\n\r\nimport { validateE164Number } from './isE164Number.js'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries.js'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry,\r\n\t\tlatestCountrySelectedByUser\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (!valuesAreEqual(newValue, prevValue) && !valuesAreEqual(newValue, value)) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\t// Validate that the newly-supplied `value` is in `E.164` format.\r\n\t\t\t// Because sometimes people attempt to supply a `value` like \"+1 (879) 490-8676\".\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/231#note_2016334796\r\n\t\t\tif (newValue) {\r\n\t\t\t\tvalidateE164Number(newValue)\r\n\t\t\t}\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// In cases when multiple countries correspond to the same country calling code,\r\n\t\t\t\t// the phone number digits of `newValue` have to be matched against country-specific\r\n\t\t\t\t// regular expressions in order to determine the exact country.\r\n\t\t\t\t// Sometimes, that algorithm can't decide for sure which country does the phone number belong to,\r\n\t\t\t\t// for example when the digits of `newValue` don't match any of those regular expressions.\r\n\t\t\t\t// and the country of the phone number couldn't be determined.\r\n\t\t\t\t// In those cases, people prefer the component to show the flag of the `defaultCountry`\r\n\t\t\t\t// if the phone number could potentially belong to that `defaultCountry`.\r\n\t\t\t\t// At least that's how the component behaves when a user pastes an international\r\n\t\t\t\t// phone number into the input field: for example, when `defaultCountry` is `\"US\"`\r\n\t\t\t\t// and the user pastes value \"+1 555 555 5555\" into the input field, it keep showing \"US\" flag.\r\n\t\t\t\t// So when setting new `value` property externally, the component should behave the same way:\r\n\t\t\t\t// it should select the `defaultCountry` when the new `value` could potentially belong\r\n\t\t\t\t// to that country in cases when the exact country can't be determined.\r\n\t\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/413#issuecomment-1536219404\r\n\t\t\t\tif (!parsedCountry) {\r\n\t\t\t\t\tif (newDefaultCountry) {\r\n\t\t\t\t\t\tif (newValue.indexOf(getInternationalPhoneNumberPrefix(newDefaultCountry, metadata)) === 0) {\r\n\t\t\t\t\t\t\tparsedCountry = newDefaultCountry\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet userCountrySelectionHistoryStateUpdate\r\n\t\tif (newValue) {\r\n\t\t\t// If the latest country that has been manually selected by the user\r\n\t\t\t// no longer corresponds to the new value then reset it.\r\n\t\t\tif (latestCountrySelectedByUser) {\r\n\t\t\t\tconst couldNewValueCorrespondToLatestCountrySelectedByUser =\r\n\t\t\t\t\tparsedCountry\r\n\t\t\t\t\t\t? latestCountrySelectedByUser === parsedCountry\r\n\t\t\t\t\t\t: couldNumberBelongToCountry(newValue, latestCountrySelectedByUser, metadata)\r\n\r\n\t\t\t\tif (couldNewValueCorrespondToLatestCountrySelectedByUser) {\r\n\t\t\t\t\tif (!parsedCountry) {\r\n\t\t\t\t\t\tparsedCountry = latestCountrySelectedByUser\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tuserCountrySelectionHistoryStateUpdate = {\r\n\t\t\t\t\t\tlatestCountrySelectedByUser: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// When the `value` property is being reset \"externally\",\r\n\t\t\t// reset any tracking of the country that the user has previously selected.\r\n\t\t\tuserCountrySelectionHistoryStateUpdate = {\r\n\t\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t...userCountrySelectionHistoryStateUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}\r\n\r\nexport function valuesAreEqual(value1, value2) {\r\n\t// If `value` has been set to `null` externally then convert it to `undefined`.\r\n\t//\r\n\t// For example, `react-hook-form` sets `value` to `null` when the user clears the input.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/164\r\n\t// In that case, without this conversion of `null` to `undefined`, it would reset\r\n\t// the selected country to `defaultCountry` because in that case `newValue !== value`\r\n\t// because `null !== undefined`.\r\n\t//\r\n\t// Historically, empty `value` is encoded as `undefined`.\r\n\t// Perhaps empty `value` would be better encoded as `null` instead.\r\n\t// But because that would be a potentially breaking change for some people,\r\n\t// it's left as is for the current \"major\" version of this library.\r\n\t//\r\n\tif (value1 === null) {\r\n\t\tvalue1 = undefined\r\n\t}\r\n\tif (value2 === null) {\r\n\t\tvalue2 = undefined\r\n\t}\r\n\treturn value1 === value2\r\n}","import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\t// Using ES6 \"rest spread\" syntax here didn't work with `babel`/`istanbul`\r\n\t\t// for some weird reason: this line of code would cause the code coverage\r\n\t\t// to show as not 100%. That's because `babel`/`istanbul`, for some weird reason,\r\n\t\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t\t//\r\n\t\t// options = { ...DEFAULT_OPTIONS, ...options }\r\n\t\t//\r\n\t\toptions = merge({}, DEFAULT_OPTIONS, options)\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport function chooseFormatForNumber(availableFormats, nationalNumber) {\r\n\t// Using a `for ... of` loop here didn't work with `babel`/`istanbul`:\r\n\t// for some weird reason, it showed code coverage less than 100%.\r\n\t// That's because `babel`/`istanbul`, for some weird reason,\r\n\t// apparently doesn't know how to properly exclude Babel polyfills from code coverage.\r\n\t//\r\n\t// for (const format of availableFormats) { ... }\r\n\t//\r\n\treturn pickFirstMatchingElement(availableFormats, (format) => {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\treturn matchesEntirely(nationalNumber, format.pattern())\r\n\t})\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}\r\n\r\nfunction merge(...objects) {\r\n\tlet i = 1\r\n\twhile (i < objects.length) {\r\n\t\tif (objects[i]) {\r\n\t\t\tfor (const key in objects[i]) {\r\n\t\t\t\tobjects[0][key] = objects[i][key]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn objects[0]\r\n}\r\n\r\nfunction pickFirstMatchingElement(elements, testFunction) {\r\n\tlet i = 0\r\n\twhile (i < elements.length) {\r\n\t\tif (testFunction(elements[i])) {\r\n\t\t\treturn elements[i]\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","import parsePhoneNumber from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatPhoneNumber(value, format, metadata) {\r\n\tif (!metadata) {\r\n\t\tif (typeof format === 'object') {\r\n\t\t\tmetadata = format\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t}\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\tif (!phoneNumber) {\r\n\t\treturn ''\r\n\t}\r\n\t// Deprecated.\r\n\t// Legacy `format`s.\r\n\tswitch (format) {\r\n\t\tcase 'National':\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t\tbreak\r\n\t\tcase 'International':\r\n\t\t\tformat = 'INTERNATIONAL'\r\n\t\t\tbreak\r\n\t}\r\n\treturn phoneNumber.format(format)\r\n}\r\n\r\nexport function formatPhoneNumberIntl(value, metadata) {\r\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata)\r\n}","// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\r\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\r\n// Example: `\"tel:12133734253;phone-context=+1\"`.\r\n// This function parses the full phone number from the local number and the `phone-context`\r\n// when the `phone-context` contains a `+` sign.\r\n\r\nimport {\r\n  VALID_DIGITS,\r\n  // PLUS_CHARS\r\n} from '../constants.js'\r\n\r\nexport const PLUS_SIGN = '+'\r\n\r\nconst RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?'\r\n\r\nconst RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')'\r\n\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_ =\r\n\t'^' +\r\n\t'\\\\' +\r\n\tPLUS_SIGN +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'[' + VALID_DIGITS +  ']' +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'$'\r\n\r\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g')\r\n\r\n// In this port of Google's library, we don't accept alpha characters in phone numbers.\r\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\r\nconst ALPHANUM_ = VALID_DIGITS\r\n\r\nconst RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst VALID_ALPHA_ = 'a-zA-Z'\r\nconst RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$'\r\n\r\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g')\r\n\r\nexport const RFC3966_PREFIX_ = 'tel:'\r\nexport const RFC3966_PHONE_CONTEXT_ = ';phone-context='\r\nexport const RFC3966_ISDN_SUBADDRESS_ = ';isub='\r\n\r\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\r\nexport default function extractPhoneContext(numberToExtractFrom) {\r\n\tconst indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t// If no phone-context parameter is present\r\n\tif (indexOfPhoneContext < 0) {\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length\r\n\t// If phone-context parameter is empty\r\n\tif (phoneContextStart >= numberToExtractFrom.length) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tconst phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart)\r\n\t// If phone-context is not the last parameter\r\n\tif (phoneContextEnd >= 0) {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart, phoneContextEnd)\r\n\t} else {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\r\nexport function isPhoneContextValid(phoneContext) {\r\n\tif (phoneContext === null) {\r\n\t\treturn true\r\n\t}\r\n\r\n\tif (phoneContext.length === 0) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Does phone-context value match pattern of global-number-digits or domainname.\r\n\treturn RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) ||\r\n\t\tRFC3966_DOMAINNAME_PATTERN_.test(phoneContext)\r\n}","import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\tdisabled,\r\n\treadOnly,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<select\r\n\t\t\t{...rest}\r\n\t\t\tdisabled={disabled || readOnly}\r\n\t\t\treadOnly={readOnly}\r\n\t\t\tvalue={value || 'ZZ'}\r\n\t\t\tonChange={onChange_}>\r\n\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t<option\r\n\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\tstyle={divider ? DIVIDER_STYLE : undefined}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t</select>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t/**\r\n\t * A two-letter country code.\r\n\t * Example: \"US\", \"RU\", etc.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider: PropTypes.bool\r\n\t})).isRequired,\r\n\r\n\t// `readonly` attribute doesn't work on a `<select/>`.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/419#issuecomment-1764384480\r\n\t// https://www.delftstack.com/howto/html/html-select-readonly/\r\n\t// To work around that, if `readOnly: true` property is passed\r\n\t// to this component, it behaves analogous to `disabled: true`.\r\n\tdisabled: PropTypes.bool,\r\n\treadOnly: PropTypes.bool\r\n}\r\n\r\nconst DIVIDER_STYLE = {\r\n\tfontSize: '1px',\r\n\tbackgroundColor: 'currentColor',\r\n\tcolor: 'inherit'\r\n}\r\n\r\nexport function CountrySelectWithIcon({\r\n\tvalue,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow = DefaultArrowComponent,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<CountrySelect\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tclassName={classNames('PhoneInputCountrySelect', className)}\r\n\t\t\t/>\r\n\r\n\t\t\t{/* Either a Unicode flag icon or an SVG flag icon. */}\r\n\t\t\t{selectedOption && (\r\n\t\t\t\tunicodeFlags && value ? (\r\n\t\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Icon\r\n\t\t\t\t\t\taria-hidden\r\n\t\t\t\t\t\tcountry={value}\r\n\t\t\t\t\t\tlabel={selectedOption.label}\r\n\t\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t)}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelectWithIcon.propTypes = {\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nfunction DefaultArrowComponent() {\r\n\treturn <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n\r\nfunction getSelectedOption(options, value) {\r\n\tfor (const option of options) {\r\n\t\tif (!option.divider) {\r\n\t\t\tif (isSameOptionValue(option.value, value)) {\r\n\t\t\t\treturn option\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction isSameOptionValue(value1, value2) {\r\n\t// `undefined` is identical to `null`: both mean \"no country selected\".\r\n\tif (value1 === undefined || value1 === null) {\r\n\t\treturn value2 === undefined || value2 === null\r\n\t}\r\n\treturn value1 === value2\r\n}","import parsePhoneNumber_, {\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumber_(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\tif (prevCountry === newCountry) {\r\n\t\treturn phoneDigits\r\n\t}\r\n\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\tif (newCountry) {\r\n\t\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t}\r\n\t\t\treturn ''\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\t//\r\n\t\t\t// Ignore the now-uncovered `|| ''` code branch:\r\n\t\t\t// previously `e164()` function could return an empty string\r\n\t\t\t// even when `phoneDigits` were not empty.\r\n\t\t\t// Now it always returns some `value` when there're any `phoneDigits`.\r\n\t\t\t// Still, didn't remove the `|| ''` code branch just in case\r\n\t\t\t// that logic changes somehow in some future, so there're no\r\n\t\t\t// possible bugs related to that.\r\n\t\t\t//\r\n\t\t\t// (ignore the `|| ''` code branch)\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Return a E.164 phone number.\r\n\t\t//\r\n\t\t// Could return `number` \"as is\" here, but there's a possibility\r\n\t\t// that some user might incorrectly input an international number\r\n\t\t// with a \"national prefix\". Such numbers aren't considered valid,\r\n\t\t// but `libphonenumber-js` is \"forgiving\" when it comes to parsing\r\n\t\t// user's input, and this input component follows that behavior.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country, metadata)\r\n\t\tasYouType.input(number)\r\n\t\t// This function would return `undefined` only when `number` is `\"+\"`,\r\n\t\t// but at this point it is known that `number` is not `\"+\"`.\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\t// The situation when `country` is `undefined`\r\n\t// and a non-international phone number is passed\r\n\t// to this function shouldn't happen.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\t//\r\n\t// Even if no \"national (significant) number\" digits have been input,\r\n\t// still return a non-`undefined` value.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t//\r\n\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t// a \"weird\" behavior.\r\n\t//\r\n\t// if (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number || ''}`\r\n\t// }\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {string?} defaultCountry — Default country.\r\n * @param {string?} latestCountrySelectedByUser — The latest country that has been manually selected by the user.\r\n * @param {boolean?} required — Whether \"International\" option could be selected, meaning \"no country is selected\".\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\tdefaultCountry,\r\n\tlatestCountrySelectedByUser,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\t// `partialE164Number` is supposed to be an E.164 phone number.\r\n\r\n\t// `partialE164Number` is supposed to be non-empty when calling this function\r\n\t// so it doesn't check for `if (!partialE164Number)`.\r\n\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country) {\r\n\t\tif (!countries || (countries.indexOf(derived_country) >= 0)) {\r\n\t\t\treturn derived_country\r\n\t\t} else {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t}\r\n\t// Otherwise, if the phone number doesn't correspond to any particular country.\r\n\t// If some country was previously selected.\r\n\telse if (country) {\r\n\t\t// If the international phone number entered could still correspond to the previously selected country\r\n\t\t// and also to some other country or countries corresponding to the same calling code\r\n\t\t// then it should reset the currently selected country to reflect the ambiguity.\r\n\t\tif (couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\t\t// Reset the country either to the latest one that was manually selected by the user\r\n\t\t\t// or to the default country or just reset the country selection.\r\n\t\t\tif (latestCountrySelectedByUser && couldNumberBelongToCountry(partialE164Number, latestCountrySelectedByUser, metadata)) {\r\n\t\t\t\treturn latestCountrySelectedByUser\r\n\t\t\t} else if (defaultCountry && couldNumberBelongToCountry(partialE164Number, defaultCountry, metadata)) {\r\n\t\t\t\treturn defaultCountry\r\n\t\t\t} else {\r\n\t\t\t\tif (!required) {\r\n\t\t\t\t\t// Just reset the currently selected country.\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// If \"International\" country option has not been disabled\r\n\t\t\t// and the international phone number entered doesn't necessarily correspond to\r\n\t\t\t// the currently selected country and it could not possibly correspond to it\r\n\t\t\t// then reset the currently selected country.\r\n\t\t\tif (!required) {\r\n\t\t\t\treturn undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string?} defaultCountry - Default country.\r\n * @param  {string?} latestCountrySelectedByUser - The latest country that has been manually selected by the user.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ phoneDigits, country, value }`. `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`. The returned `phoneDigits` shouldn't be used anywhere except for passing it as `prevPhoneDigits` parameter to this same function on next input change event.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tlatestCountrySelectedByUser,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\t// When the input is in `international` and `countryCallingCodeEditable={false}` mode,\r\n\t// the `country` should not change. If the user attempted to overwrite the country callling code part,\r\n\t// the component should reset it back to the correct country calling code for the `country`.\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tif (country) {\r\n\t\t\t// For international phone numbers written with non-editable country calling code,\r\n\t\t\t// the `<input/>` value must always start with that non-editable country calling code.\r\n\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t// If the input value doesn't start with the non-editable country calling code,\r\n\t\t\t// it should be fixed.\r\n\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\tlet value\r\n\t\t\t\t// If a phone number input is declared as\r\n\t\t\t\t// `international: true` and `countryCallingCodeEditable: false`,\r\n\t\t\t\t// then the value of the `<input/>` is gonna be non-empty at all times,\r\n\t\t\t\t// even before the user has started to input any digits in the input field,\r\n\t\t\t\t// because the country calling code is always there by design.\r\n\t\t\t\t//\r\n\t\t\t\t// The fact that the input value is always non-empty results in a side effect:\r\n\t\t\t\t// whenever a user tabs into such input field, its value gets automatically selected.\r\n\t\t\t\t// If at that moment in time the user starts typing in the national digits of the phone number,\r\n\t\t\t\t// the selected `<input/>` value gets automatically replaced by those typed-in digits\r\n\t\t\t\t// so the value changes from `+xxx` to `y`, because inputting anything while having\r\n\t\t\t\t// the `<input/>` value selected results in erasing that `<input/>` value.\r\n\t\t\t\t//\r\n\t\t\t\t// This component handles such cases by restoring the `<input/>` value to what\r\n\t\t\t\t// it should be in such cases: `+xxxy`.\r\n\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t//\r\n\t\t\t\tconst hasStartedTypingInNationalNumberDigitsHavingInputValueSelected = phoneDigits && phoneDigits[0] !== '+'\r\n\t\t\t\tif (hasStartedTypingInNationalNumberDigitsHavingInputValueSelected) {\r\n\t\t\t\t\t// Fix the input value to what it should be: `y` → `+xxxy`.\r\n\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// In other cases, simply reset the `<input/>` value, because there're only two\r\n\t\t\t\t\t// possible cases:\r\n\t\t\t\t\t// * The user has selected the `<input/>` value and then hit Delete/Backspace to erase it.\r\n\t\t\t\t\t// * The user has pasted an international phone number for another country calling code,\r\n\t\t\t\t\t//   which is considered a non-valid value.\r\n\t\t\t\t\tphoneDigits = prefix\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tphoneDigits,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tcountry\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\t// Selected a `country` and started inputting an\r\n\t\t\t\t// international phone number for this country\r\n\t\t\t\t// but hasn't input any \"national (significant) number\" digits yet.\r\n\t\t\t\t// In that case, assume `value` be `undefined`.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, if selected `country` `\"US\"`\r\n\t\t\t\t// and started inputting phone number `\"+1\"`\r\n\t\t\t\t// then `value` `undefined` will be returned from this function.\r\n\t\t\t\t//\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tdefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser,\r\n\t\t\t// `countryRequired` flag is not passed here.\r\n\t\t\t// Instead, it's explicitly checked a bit later in the code.\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t// `prevPhoneDigits` parameter to this same function on next input change event.\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}\r\n\r\n// function doesIncompletePhoneNumberCorrespondToASingleCountry(value, metadata) {\r\n// \t// Create \"as you type\" formatter.\r\n// \tconst formatter = new AsYouType(undefined, metadata)\r\n// \t// Input partial national phone number.\r\n// \tformatter.input(value)\r\n// \t// Return the parsed partial national phone number.\r\n// \tconst phoneNumber = formatter.getNumber()\r\n// \tif (phoneNumber) {\r\n// \t\treturn phoneNumber.getPossibleCountries().length === 1\r\n// \t} else {\r\n// \t\treturn false\r\n// \t}\r\n// }","import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}","import PatternParser from './AsYouTypeFormatter.PatternParser.js'\r\n\r\nexport default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\r\nfunction match(characters, tree, last) {\r\n\t// If `tree` is a string, then `tree` is a single character.\r\n\t// That's because when a pattern is parsed, multi-character-string parts\r\n\t// of a pattern are compiled into arrays of single characters.\r\n\t// I still wrote this piece of code for a \"general\" hypothetical case\r\n\t// when `tree` could be a string of several characters, even though\r\n\t// such case is not possible with the current implementation.\r\n\tif (typeof tree === 'string') {\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\tif (last) {\r\n\t\t\t\t// The `else` path is not possible because `tree` is always a single character.\r\n\t\t\t\t// The `else` case for `characters.length > tree.length` would be\r\n\t\t\t\t// `characters.length <= tree.length` which means `characters.length <= 1`.\r\n\t\t\t\t// `characters` array can't be empty, so that means `characters === [tree]`,\r\n\t\t\t\t// which would also mean `tree.indexOf(characterString) === 0` and that'd mean\r\n\t\t\t\t// that the `if (tree.indexOf(characterString) === 0)` condition before this\r\n\t\t\t\t// `if` condition would be entered, and returned from there, not reaching this code.\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}","import { parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object?} context - An optional object that could be used by this function to set arbitrary \"flags\". The object should be shared within the parsing of the whole string.\r\n * @return {string?} The parsed character.\r\n */\r\nexport default function parsePhoneNumberCharacter_(character, prevParsedCharacters, context) {\r\n\t// `context` argument was added as a third argument of `parse()` function\r\n\t// in `input-format` package on Dec 26th, 2023. So it could potentially be\r\n\t// `undefined` here if a 3rd-party app somehow ends up with this newer version\r\n\t// of `react-phone-number-input` and an older version of `input-format`.\r\n\t// Dunno how, but just in case, it could be `undefined` here and it wouldn't break.\r\n\t// Maybe it's not required to handle `undefined` case here.\r\n\t//\r\n\t// The addition of the `context` argument was to fix the slightly-weird behavior\r\n\t// of parsing an input string when the user inputs something like `\"2+7\"\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/437\r\n\t//\r\n\t// If the parser encounters an unexpected `+` in a string being parsed\r\n\t// then it simply discards that out-of-place `+` and any following characters.\r\n\t//\r\n\tif (context && context.ignoreRest) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst emitEvent = (eventName) => {\r\n\t\tif (context) {\r\n\t\t\tswitch (eventName) {\r\n\t\t\t\tcase 'end':\r\n\t\t\t\t\tcontext.ignoreRest = true\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent)\r\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}","import { useCallback, useRef } from 'react'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../inputControl.js'\r\n\r\nexport default function useInput({\r\n\tref,\r\n\tparse,\r\n\tformat,\r\n\tvalue,\r\n\tdefaultValue,\r\n\tcontrolled = true,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}) {\r\n\t// It doesn't seem to be required to alert a developer about controlled/uncontrolled misuse:\r\n\t// if `controlled` is `true` then `defaultValue` is simply ignored.\r\n\t//\r\n\t// if (defaultValue && controlled) {\r\n\t// \tconsole.error('[input-format] You\\'ve passed both `defaultValue` and `controlled: true` properties which is an invalid use case')\r\n\t// }\r\n\r\n\tconst internalRef = useRef()\r\n\tconst setRef = useCallback((instance) => {\r\n\t\tinternalRef.current = instance\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}, [ref])\r\n\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [\r\n\t\tinternalRef,\r\n\t\tparse,\r\n\t\tformat,\r\n\t\tonChange\r\n\t])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\t// If `onKeyDown()` handler above has called `event.preventDefault()`\r\n\t\t// then ignore this `keydown` event.\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [\r\n\t\tinternalRef,\r\n\t\tparse,\r\n\t\tformat,\r\n\t\tonChange,\r\n\t\tonKeyDown\r\n\t])\r\n\r\n\tconst commonProps = {\r\n\t\t...rest,\r\n\t\tref: setRef,\r\n\t\tonChange: _onChange,\r\n\t\tonKeyDown: _onKeyDown\r\n\t}\r\n\r\n\tif (controlled) {\r\n\t\treturn {\r\n\t\t\t...commonProps,\r\n\t\t\tvalue: format(isEmptyValue(value) ? '' : value).text\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\t...commonProps,\r\n\t\tdefaultValue: format(isEmptyValue(defaultValue) ? '' : defaultValue).text\r\n\t}\r\n}\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}","import extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants.js'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber(undefined, undefined)\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tstate.country,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\t// Tells if the parsed national (significant) number is present as-is in the input string.\r\n\t\t// For example, when inputting \"0343515551212999\" Argentinian mobile number,\r\n\t\t// the parsed national (significant) number is \"93435551212999\".\r\n\t\t// There, one can see how it stripped \"0\" national prefix and prepended a \"9\",\r\n\t\t// because that's how it is instructed to do in Argentina's metadata.\r\n\t\t// So in the described example, the parsed national (significant) number is not present\r\n\t\t// as-is in the input string. Instead, it's \"modified\" in the input string.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tlet nationalSignificantNumberIsModified = false\r\n\r\n\t\t// In some countries, a phone number could have a prefix that is not a \"national prefix\"\r\n\t\t// but rather some other type of \"utility\" prefix.\r\n\t\t// For example, when calling within Australia, one could prepend `1831` prefix to hide\r\n\t\t// caller's phone number.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tlet prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix\r\n\r\n\t\t// `nationalSignificantNumber` could be empty. In that case, `.lastIndexOf()` still works correctly.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\r\n\t\t// If the parsed national (significant) number is the last substring of the `nationalDigits`,\r\n\t\t// then it means that it's present as-is in the input string.\r\n\t\t// In any other case, the parsed national (significant) number is \"modified\" in the input string.\r\n\t\tif (\r\n\t\t\tnationalSignificantNumberIndex < 0 ||\r\n\t\t\tnationalSignificantNumberIndex !== nationalDigits.length - nationalSignificantNumber.length\r\n\t\t) {\r\n\t\t\tnationalSignificantNumberIsModified = true\r\n\t\t} else {\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// When national (significant) number is equal to the `nationalDigits`,\r\n\t\t\t// this `onExtractedNationalNumber()` function simply doesn't get called.\r\n\t\t\t// This means that at this point, `prefixBeforeNationalNumber` is always non-empty.\r\n\t\t\t// Still, added this `if` check just to prevent potential silly bugs.\r\n\t\t\t// The `!prefixBeforeNationalNumber` case is not really testable\r\n\t\t\t// so this line is exluded from the code coverage.\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (prefixBeforeNationalNumber) {\r\n\t\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\t\tprefixBeforeNationalSignificantNumberThatIsNotNationalPrefix = prefixBeforeNationalNumber\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberIsModified,\r\n\t\t\tprefixBeforeNationalSignificantNumberThatIsNotNationalPrefix\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tcallingCode: undefined\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tstate.country,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\t\tcountry: state.country,\r\n\t\t\t\t\tcallingCode: newCallingCode\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state, { country, callingCode }) {\r\n\t\tstate.startInternationalNumber(country, callingCode)\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}","import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","// Ignores weird istanbul error: \"else path not taken\".\r\nimport { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\tlet countryCode\r\n\t\t\tif (element === '🌐') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t} else {\r\n\t\t\t\tcountryCode = element\r\n\t\t\t}\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === countryCode)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '🌐':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}","import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util.js'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete.js'\r\n\r\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js'\r\n\r\nimport parseDigits from './helpers/parseDigits.js'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js'\r\nimport { VALID_PUNCTUATION } from './constants.js'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t// Google developers say:\r\n\t// \"We require that the first matching group is present in the\r\n\t//  output pattern to ensure no data is lost while formatting.\"\r\n\t'\\\\$1' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats an updated phone number.\r\n\t * @param  {string} nextDigits — Additional phone number digits.\r\n\t * @param  {object} state — `AsYouType` state.\r\n\t * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n\t */\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, state.country, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: (format) => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: (format) => this.getSeparatorAfterNationalPrefix(format)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\t// The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Start narrowing down the list of possible formats based on the leading digits.\r\n\t\t// (only previously matched formats take part in the narrowing down process)\r\n\r\n\t\t// `leading_digits_patterns` start with 3 digits min\r\n\t\t// and then go up from there one digit at a time.\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\r\n\t\t// Google imposes a requirement on the leading digits\r\n\t\t// to be minimum 3 digits long in order to be eligible\r\n\t\t// for checking those with a leading digits pattern.\r\n\t\t//\r\n\t\t// Since `leading_digits_patterns` start with 3 digits min,\r\n\t\t// Google's original `libphonenumber` library only starts\r\n\t\t// excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t//\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Also, `leading_digits_patterns` doesn't always correspond to a single\r\n\t\t// digits count. For example, `60|8` pattern would already match `8`\r\n\t\t// but the `60` part would require having at least two leading digits,\r\n\t\t// so the whole pattern would require inputting two digits first in order to\r\n\t\t// decide on whether it matches the input, even when the input is \"80\".\r\n\t\t//\r\n\t\t// This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\r\n\t\t// even when there's only 1 or 2 digits of the national (significant) number.\r\n\t\t// To do that, it uses a non-strict pattern matcher written specifically for that.\r\n\t\t//\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t// Before leading digits < 3 matching was implemented:\r\n\t\t\t// return true\r\n\t\t\t//\r\n\t\t\t// After leading digits < 3 matching was implemented:\r\n\t\t\ttry {\r\n\t\t\t\treturn new PatternMatcher(leadingDigitsPattern).match(leadingDigits, { allowOverflow: true }) !== undefined\r\n\t\t\t} catch (error) /* istanbul ignore next */ {\r\n\t\t\t\t// There's a slight possibility that there could be some undiscovered bug\r\n\t\t\t\t// in the pattern matcher code. Since the \"leading digits < 3 matching\"\r\n\t\t\t\t// feature is not \"essential\" for operation, it can fall back to the old way\r\n\t\t\t\t// in case of any issues rather than halting the application's execution.\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\r\n\t\t// available then use the usual regular expression matching.\r\n\t\t//\r\n\t\t// The whole pattern is wrapped in round brackets (`()`) because\r\n\t\t// the pattern can use \"or\" operator (`|`) at the top level of the pattern.\r\n\t\t//\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\t//\r\n\t\t// For some weird reason, `istanbul` says \"else path not taken\"\r\n\t\t// for the `for of` line below. Supposedly that means that\r\n\t\t// the loop doesn't ever go over the last element in the list.\r\n\t\t// That's true because there always is `this.chosenFormat`\r\n\t\t// when `this.matchingFormats` is non-empty.\r\n\t\t// And, for some weird reason, it doesn't think that the case\r\n\t\t// with empty `this.matchingFormats` qualifies for a valid \"else\" path.\r\n\t\t// So simply muting this `istanbul` warning.\r\n\t\t// It doesn't skip the contents of the `for of` loop,\r\n\t\t// it just skips the `for of` line.\r\n\t\t//\r\n\t\t/* istanbul ignore next */\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix(format) {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tprefixBeforeNationalSignificantNumberThatIsNotNationalPrefix\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix }) {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\r\n//\r\n// Example:\r\n//\r\n// value - '88005553535'\r\n// caret - 2 // starting from 0; is positioned before the first zero\r\n// operation - 'Backspace'\r\n//\r\n// Returns\r\n// {\r\n// \tvalue: '8005553535'\r\n// \tcaret: 1\r\n// }\r\n//\r\n// Currently supports just 'Delete' and 'Backspace' operations\r\n//\r\nexport default function edit(value, caret, operation)\r\n{\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Backspace':\r\n\t\t\t// If there exists the previous character,\r\n\t\t\t// then erase it and reposition the caret.\r\n\t\t\tif (caret > 0)\r\n\t\t\t{\r\n\t\t\t\t// Remove the previous character\r\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret)\r\n\t\t\t\t// Position the caret where the previous (erased) character was\r\n\t\t\t\tcaret--\r\n\t\t\t}\r\n\t\t\tbreak\r\n\r\n\t\tcase 'Delete':\r\n\t\t\t// Remove current digit (if any)\r\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1)\r\n\t\t\tbreak\r\n\t}\r\n\r\n\treturn { value, caret }\r\n}","import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, input.country, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, country, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, country, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}","import Metadata from './metadata.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport AsYouTypeState from './AsYouTypeState.js'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport getCountryByNationalNumber from './helpers/getCountryByNationalNumber.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\t// `this.defaultCountry` and `this.defaultCallingCode` aren't required to be in sync.\r\n\t\t// For example, `this.defaultCountry` could be `\"AR\"` and `this.defaultCallingCode` could be `undefined`.\r\n\t\t// So `this.defaultCountry` and `this.defaultCallingCode` are totally independent.\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (isObject(optionsOrDefaultCountry)) {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included a `.country` property on an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (callingCode, country) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset({\r\n\t\t\tcountry: this.defaultCountry,\r\n\t\t\tcallingCode: this.defaultCallingCode\r\n\t\t})\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tprefixBeforeNationalSignificantNumberThatIsNotNationalPrefix,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberIsModified } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberIsModified\r\n\t\t\t\t? this.state.getNationalDigits()\r\n\t\t\t\t: this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the exact country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\t{\r\n\t\t\t\tnationalNumber: this.state.nationalSignificantNumber,\r\n\t\t\t\tmetadata: this.metadata\r\n\t\t\t}\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tlet country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t// For example, `country` could be `\"AR\"` and `callingCode` could be `undefined`.\r\n\t\t// So `country` and `callingCode` are totally independent.\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// By default, if `defaultCountry` parameter was passed when\r\n\t\t// creating `AsYouType` instance, `state.country` is gonna be\r\n\t\t// that `defaultCountry`, which doesn't entirely conform with\r\n\t\t// `parsePhoneNumber()`'s behavior where it attempts to determine\r\n\t\t// the country more precisely in cases when multiple countries\r\n\t\t// could correspond to the same `countryCallingCode`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103#note_1417192969\r\n\t\t//\r\n\t\t// Because `AsYouType.getNumber()` method is supposed to be a 1:1\r\n\t\t// equivalent for `parsePhoneNumber(AsYouType.getNumberValue())`,\r\n\t\t// then it should also behave accordingly in cases of `country` ambiguity.\r\n\t\t// That's how users of this library would expect it to behave anyway.\r\n\t\t//\r\n\t\tif (country) {\r\n\t\t\tif (country === this.defaultCountry) {\r\n\t\t\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t\t\t// For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\r\n\t\t\t\t// So `state.country` and `state.callingCode` are totally independent.\r\n\t\t\t\tconst metadata = new Metadata(this.metadata.metadata)\r\n\t\t\t\tmetadata.selectNumberingPlan(country)\r\n\t\t\t\tconst callingCode = metadata.numberingPlan.callingCode()\r\n\t\t\t\tconst ambiguousCountries = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\t\t\tif (ambiguousCountries.length > 1) {\r\n\t\t\t\t\tconst exactCountry = getCountryByNationalNumber(nationalSignificantNumber, {\r\n\t\t\t\t\t\tcountries: ambiguousCountries,\r\n\t\t\t\t\t\tmetadata: this.metadata.metadata\r\n\t\t\t\t\t})\r\n\t\t\t\t\tif (exactCountry) {\r\n\t\t\t\t\t\tcountry = exactCountry\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}","import isObject from './helpers/isObject.js'\r\n\r\n// Extracts the following properties from function arguments:\r\n// * input `text`\r\n// * `options` object\r\n// * `metadata` JSON\r\nexport default function normalizeArguments(args) {\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}","import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import { count_occurences } from './helpers.js'\r\nimport close_braces from './closeBraces.js'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `shouldCloseBraces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', shouldCloseBraces) {\r\n\tif (!template) {\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst placeholdersCountInTemplate = count_occurences(placeholder, template)\r\n\r\n\treturn function(value) {\r\n\t\tif (!value) {\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet characterIndexInValue = 0\r\n\t\tlet templateWithFilledInPlaceholders = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split('')) {\r\n\t\t\tif (character !== placeholder) {\r\n\t\t\t\ttemplateWithFilledInPlaceholders += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\ttemplateWithFilledInPlaceholders += value[characterIndexInValue]\r\n\t\t\tcharacterIndexInValue++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (characterIndexInValue === value.length) {\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < placeholdersCountInTemplate) {\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (shouldCloseBraces) {\r\n\t\t\ttemplateWithFilledInPlaceholders = close_braces(templateWithFilledInPlaceholders, template)\r\n\t\t}\r\n\r\n\t\treturn { text: templateWithFilledInPlaceholders, template }\r\n\t}\r\n}","// Parses the `text`.\r\n//\r\n// Returns `{ value, caret }` where `caret` is\r\n// the caret position inside `value`\r\n// corresponding to the `caret_position` inside `text`.\r\n//\r\n// The `text` is parsed by feeding each character sequentially to\r\n// `parse_character(character, value, context)` function\r\n// and appending the result (if it's not `undefined`) to `value`.\r\n//\r\n// `context` argument is just a utility empty object that is shared within the bounds\r\n// of parsing a single input string. The `_parse()` function could use that object\r\n// to store any kind of \"flags\" in it in order to alter its behavior based when\r\n// parsing next characters within the same string. Or it could completely ignore it.\r\n//\r\n// Example:\r\n//\r\n// `text` is `8 (800) 555-35-35`,\r\n// `caret_position` is `4` (before the first `0`).\r\n// `parse_character` is `(character, value) =>\r\n//   if (character >= '0' && character <= '9') { return character }`.\r\n//\r\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\r\n//\r\nexport default function parse(text, caret_position, parse_character)\r\n{\r\n\tconst context = {}\r\n\r\n\tlet value = ''\r\n\r\n\tlet focused_input_character_index = 0\r\n\r\n\tlet index = 0\r\n\twhile (index < text.length)\r\n\t{\r\n\t\tconst character = parse_character(text[index], value, context)\r\n\r\n\t\tif (character !== undefined)\r\n\t\t{\r\n\t\t\tvalue += character\r\n\r\n\t\t\tif (caret_position !== undefined)\r\n\t\t\t{\r\n\t\t\t\tif (caret_position === index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (caret_position > index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t}\r\n\r\n\t\tindex++\r\n\t}\r\n\r\n\t// If caret position wasn't specified\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\t// Then set caret position to \"after the last input character\"\r\n\t\tfocused_input_character_index = value.length\r\n\t}\r\n\r\n\tconst result =\r\n\t{\r\n\t\tvalue,\r\n\t\tcaret : focused_input_character_index\r\n\t}\r\n\r\n\treturn result\r\n}","import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Country.\r\n * @param  {string} [defaultCountry] — Default country.\r\n * @param  {string} [defaultCallingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', null, 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', null, 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tlet isNumberWithIddPrefix\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country || defaultCountry, defaultCallingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tisNumberWithIddPrefix = true\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || defaultCountry || defaultCallingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tdefaultCountry,\r\n\t\t\t\t\tdefaultCallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t// No need to set it to `UNSPECIFIED`. It can be just `undefined`.\r\n\t\t\t\t// countryCallingCodeSource: 'UNSPECIFIED',\r\n\t\t\t\tnumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `number` can only be international at this point.\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n\r\n// The possible values for the returned `countryCallingCodeSource` are:\r\n//\r\n// Copy-pasted from:\r\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\r\n//\r\n// // The source from which the country_code is derived. This is not set in the\r\n// // general parsing method, but in the method that parses and keeps raw_input.\r\n// // New fields could be added upon request.\r\n// enum CountryCodeSource {\r\n//  // Default value returned if this is not set, because the phone number was\r\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\r\n//  // return false if this is the case.\r\n//  UNSPECIFIED = 0;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading \"+\",\r\n//  // e.g. the French number \"+33 1 42 68 53 00\".\r\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading IDD,\r\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\r\n//  FROM_NUMBER_WITH_IDD = 5;\r\n//\r\n//  // The country_code is derived based on a phone number without a leading\r\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\r\n//  // supplied as France.\r\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\r\n//\r\n//  // The country_code is derived NOT based on the phone number itself, but\r\n//  // from the defaultCountry parameter provided in the parsing function by the\r\n//  // clients. This happens mostly for numbers written in the national format\r\n//  // (without country code). For example, this would be set when parsing the\r\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\r\n//  // France.\r\n//  FROM_DEFAULT_COUNTRY = 20;\r\n// }","// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}","import Metadata, { validateMetadata } from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport isObject from './helpers/isObject.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata — Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\t// Validate `countryOrCountryCallingCode` argument.\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('First argument is required')\r\n\t\t}\r\n\t\tif (typeof countryOrCountryCallingCode !== 'string') {\r\n\t\t\tthrow new TypeError('First argument must be a string')\r\n\t\t}\r\n\r\n\t\t// In case of public API use: `constructor(number, metadata)`.\r\n\t\t// Transform the arguments from `constructor(number, metadata)` to\r\n\t\t// `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\r\n\t\tif (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\r\n\t\t\tthrow new TypeError('`metadata` argument not passed')\r\n\t\t}\r\n\t\tif (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\r\n\t\t\tmetadata = nationalNumber\r\n\t\t\tconst e164Number = countryOrCountryCallingCode\r\n\t\t\tif (!E164_NUMBER_REGEXP.test(e164Number)) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits')\r\n\t\t\t}\r\n\t\t\tconst { countryCallingCode, number } = extractCountryCallingCode(e164Number, undefined, undefined, undefined, metadata)\r\n\t\t\tnationalNumber = number\r\n\t\t\tcountryOrCountryCallingCode = countryCallingCode\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: too short')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `nationalNumber` argument.\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument is required')\r\n\t\t}\r\n\t\tif (typeof nationalNumber !== 'string') {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument must be a string')\r\n\t\t}\r\n\r\n\t\t// Validate `metadata` argument.\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\t// Initialize properties.\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\t// Exclude `metadata` property output from `PhoneNumber.toString()`\r\n\t\t// so that it doesn't clutter the console output of Node.js.\r\n\t\t// Previously, when Node.js did `console.log(new PhoneNumber(...))`,\r\n\t\t// it would output the whole internal structure of the `metadata` object.\r\n\t\tthis.getMetadata = () => metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.getMetadata())\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.getMetadata())\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}\r\n\r\nconst E164_NUMBER_REGEXP = /^\\+\\d+$/","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport { validateE164Number } from './helpers/isE164Number.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport { setRefsValue } from './useExternalRef.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tcouldNumberBelongToCountry,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate that the initially-supplied `value` is in `E.164` format.\r\n\t\t// Because sometimes people attempt to supply a `value` like \"+1 (879) 490-8676\".\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/231#note_2016334796\r\n\t\tif (value) {\r\n\t\t\tvalidateE164Number(value)\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// This function mimicks `refSetter` function returned from `useExternalRef()` hook\r\n\t// because this class-like React component can't use the `useExternalRef()` hook.\r\n\tsetInputRef = (instance) => {\r\n\t\tsetRefsValue([this.props.inputRef, this.inputRef], instance)\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\tlatestCountrySelectedByUser: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tlatestCountrySelectedByUser\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t\t// `prevPhoneDigits` parameter to the same `onPhoneDigitsChange()` function\r\n\t\t\t// on next input change event.\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\t// Reset `latestCountrySelectedByUser` if it no longer fits the `value`.\r\n\t\tif (latestCountrySelectedByUser && value && !couldNumberBelongToCountry(value, latestCountrySelectedByUser, metadata)) {\r\n\t\t\tstateUpdate.latestCountrySelectedByUser = undefined\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\t\t\tcontainerComponentProps,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}\r\n\t\t\t\t{...containerComponentProps}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tinputFormat={international === true ? 'INTERNATIONAL' : (international === false ? 'NATIONAL' : 'INTERNATIONAL_OR_NATIONAL')}\r\n\t\t\t\t\tinternational={international ? true : undefined}\r\n\t\t\t\t\twithCountryCallingCode={international ? true : undefined}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...withDefaultProps(props)} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component props.\r\n\t */\r\n\tcontainerComponentProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format:\r\n\t * the user can input their phone number in either \"national\" or \"international\" format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool\r\n}\r\n\r\nconst defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nfunction withDefaultProps(props) {\r\n\tprops = { ...props }\r\n\r\n\tfor (const key in defaultProps) {\r\n\t\tif (props[key] === undefined) {\r\n\t\t\tprops[key] = defaultProps[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn props\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}","import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} eventListener - An optional \"on event\" function.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, eventListener) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\t// `eventListener` argument was added to this `export`ed function on Dec 26th, 2023.\r\n\t\t\t// Any 3rd-party code that used to `import` and call this function before that\r\n\t\t\t// won't be passing any `eventListener` argument.\r\n\t\t\t//\r\n\t\t\t// The addition of the `eventListener` argument was to fix the slightly-weird behavior\r\n\t\t\t// of parsing an input string when the user inputs something like `\"2+7\"\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/437\r\n\t\t\t//\r\n\t\t\t// If the parser encounters an unexpected `+` in a string being parsed\r\n\t\t\t// then it simply discards that out-of-place `+` and any following characters.\r\n\t\t\t//\r\n\t\t\tif (typeof eventListener === 'function') {\r\n\t\t\t\teventListener('end')\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useInput from './useInput.js'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tinputComponent: InputComponent = 'input',\r\n\tparse,\r\n\tformat,\r\n\tvalue,\r\n\tdefaultValue,\r\n\tonChange,\r\n\tcontrolled,\r\n\tonKeyDown,\r\n\t// `<input/>` `type` attribute.\r\n\ttype = 'text',\r\n\t...rest\r\n}, ref) {\r\n\tconst inputProps = useInput({\r\n\t\tref,\r\n\t\tparse,\r\n\t\tformat,\r\n\t\tvalue,\r\n\t\tdefaultValue,\r\n\t\tonChange,\r\n\t\tcontrolled,\r\n\t\tonKeyDown,\r\n\t\ttype,\r\n\t\t...rest\r\n\t})\r\n\r\n\treturn (\r\n\t\t<InputComponent {...inputProps}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// An initial value for an \"uncontrolled\" <input/>.\r\n\tdefaultValue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func,\r\n\r\n\t// Whether this input should be \"controlled\" or \"uncontrolled\".\r\n\t// The default value is `true` meaning \"uncontrolled\".\r\n\tcontrolled: PropTypes.bool,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nexport default Input","import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}","import template_formatter from './templateFormatter.js'\r\n\r\n// Formats `value` value preserving `caret` at the same character.\r\n//\r\n// `{ value, caret }` attribute is the result of `parse()` function call.\r\n//\r\n// Returns `{ text, caret }` where the new `caret` is the caret position\r\n// inside `text` text corresponding to the original `caret` position inside `value`.\r\n//\r\n// `formatter(value)` is a function returning `{ text, template }`.\r\n//\r\n// `text` is the `value` value formatted using `template`.\r\n// It may either cut off the non-filled right part of the `template`\r\n// or it may fill the non-filled character placeholders\r\n// in the right part of the `template` with `spacer`\r\n// which is a space (' ') character by default.\r\n//\r\n// `template` is the template used to format the `value`.\r\n// It can be either a full-length template or a partial template.\r\n//\r\n// `formatter` can also be a string — a `template`\r\n// where character placeholders are denoted by 'x'es.\r\n// In this case `formatter` function is automatically created.\r\n//\r\n// Example:\r\n//\r\n// `value` is '880',\r\n// `caret` is `2` (before the first `0`)\r\n//\r\n// `formatter` is `'880' =>\r\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\r\n//\r\n// The result is `{ text: '8 (80 )', caret: 4 }`.\r\n//\r\nexport default function format(value, caret, formatter)\r\n{\r\n\tif (typeof formatter === 'string')\r\n\t{\r\n\t\tformatter = template_formatter(formatter)\r\n\t}\r\n\r\n\tlet { text, template } = formatter(value) || {}\r\n\r\n\tif (text === undefined)\r\n\t{\r\n\t\t text = value\r\n\t}\r\n\r\n\tif (template)\r\n\t{\r\n\t\tif (caret === undefined)\r\n\t\t{\r\n\t\t\tcaret = text.length\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet index = 0\r\n\t\t\tlet found = false\r\n\r\n\t\t\tlet possibly_last_input_character_index = -1\r\n\r\n\t\t\twhile (index < text.length && index < template.length)\r\n\t\t\t{\r\n\t\t\t\t// Character placeholder found\r\n\t\t\t\tif (text[index] !== template[index])\r\n\t\t\t\t{\r\n\t\t\t\t\tif (caret === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\tcaret = index\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpossibly_last_input_character_index = index\r\n\r\n\t\t\t\t\tcaret--\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex++\r\n\t\t\t}\r\n\r\n\t\t\t// If the caret was positioned after last input character,\r\n\t\t\t// then the text caret index is just after the last input character.\r\n\t\t\tif (!found)\r\n\t\t\t{\r\n\t\t\t\tcaret = possibly_last_input_character_index + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { text, caret }\r\n}","import { useRef, useCallback } from 'react'\r\n\r\n/**\r\n * This hook creates an internal copy of a `ref`\r\n * and returns a new `ref`-alike setter function\r\n * that updates both `ref` and the internal copy of it.\r\n * That `ref`-alike setter function could then be passed\r\n * to child elements instead of the original `ref`.\r\n *\r\n * The internal copy of the `ref` can then be used to\r\n * call instance methods like `.focus()`, etc.\r\n *\r\n * One may ask: why create a copy of `ref` for \"internal\" use\r\n * when the code could use the original `ref` for that.\r\n * The answer is: the code would have to dance around the original `ref` anyway\r\n * to figure out whether it exists and to find out the internal implementation of it\r\n * in order to read its value correctly. This hook encapsulates all that \"boilerplate\" code.\r\n * The returned copy of the `ref` is guaranteed to exist and functions as a proper ref \"object\".\r\n * The returned `ref`-alike setter function must be used instead of the original `ref`\r\n * when passing it to child elements.\r\n *\r\n * @param  {(object|function)} [externalRef] — The original `ref` that may have any internal implementation and might not even exist.\r\n * @return {any[]} Returns an array of two elements: a copy of the `ref` for \"internal\" use and a `ref`-alike setter function that should be used in-place of the original `ref` when passing it to child elements.\r\n */\r\nexport default function useExternalRef(externalRef) {\r\n  // Create a copy of the original `ref` (which might not exist).\r\n  // Both refs will point to the same value.\r\n  const refCopy = useRef()\r\n\r\n  // Updates both `ref`s with the same `value`.\r\n  const refSetter = useCallback((value) => {\r\n    setRefsValue([externalRef, refCopy], value)\r\n  }, [\r\n    externalRef,\r\n    refCopy\r\n  ])\r\n\r\n  return [refCopy, refSetter]\r\n}\r\n\r\n// Sets the same `value` of all `ref`s.\r\n// Some of the `ref`s may not exist in which case they'll be skipped.\r\nexport function setRefsValue(refs, value) {\r\n  for (const ref of refs) {\r\n    if (ref) {\r\n      setRefValue(ref, value)\r\n    }\r\n  }\r\n}\r\n\r\n// Sets the value of a `ref`.\r\n// Before React Hooks were introduced, `ref`s used to be functions.\r\n// After React Hooks were introduces, `ref`s became objects with `.current` property.\r\n// This function sets a `ref`'s value regardless of its internal implementation,\r\n// so it supports both types of `ref`s.\r\nfunction setRefValue(ref, value) {\r\n  if (typeof ref === 'function') {\r\n    ref(value)\r\n  } else {\r\n    ref.current = value\r\n  }\r\n}","// This \"state\" object simply holds the state of the \"AsYouType\" parser:\r\n//\r\n// * `country?: string` — The exact country of the phone number, if it could be determined.\r\n//                        When inputting a phone number in \"international\" format, it will derive the `country` from \"country calling code\" and the phone number digits.\r\n//                        When inputting a phone number in \"national\" format, it will derive the `country` from `defaultCountry` that was specified when creating the `AsYouType` formatter.\r\n//                        Sidenote: If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` flag was `true`, then for \"non-geographic phone numbers\" `state.country` would've been \"001\".\r\n// * `callingCode?: string` — \"Country calling code\" that has been extracted from the input phone number.\r\n//                        When inputting a phone number in \"international\" format, it will extract the \"country calling code\" from the digits that follow the \"+\" character.\r\n//                        When inputting a phone number in \"national\" format, `callingCode` will be `undefined`.\r\n//                        Sidenote: `state.callingCode` is therefore independent from `state.country` and there could be situations when `state.country` is defined by `state.callingCode` is not — that would be when inputting a phone number not in \"international\" format.\r\n// * `digits: string` — Phone number digits that have been input so far, including the \"+\" character, if present. In case of inputting non-arabic digits, those will be converted to arabic ones.\r\n// * `international: boolean` — Whether the phone number is being input in \"international\" format, i.e. with a \"+\" character.\r\n// * `missingPlus: boolean` — Whether it's a phone number in \"international\" format that is missing the leading \"+\" character for some reason — apparently, Google thinks that it's a common mistake when inputting a phone number.\r\n// * `IDDPrefix?: string` — An \"IDD prefix\", when the phone number is being input in an \"out-of-country dialing\" format. https://wikitravel.org/en/International_dialling_prefix\r\n// * `carrierCode?: string` — A \"carrier code\", if the phone number contains it. Normally, those can only be present in Colombia or Brazil, and only when calling from mobile phones to fixed-line numbers.\r\n// * `nationalPrefix?: string` — \"National prefix\", if present in the phone number input.\r\n// * `nationalSignificantNumber?: string` — National (significant) number digits that have been input so far.\r\n// * `nationalSignificantNumberIsModified: boolean` — Tells if the parsed national (significant) number is present as-is in the input string. For example, when inputting \"0343515551212999\" Argentinian mobile number, the parsed national (significant) number is \"93435551212999\". There, one can see how it stripped \"0\" national prefix and prepended a \"9\", because that's how it is instructed to do in Argentina's metadata. So in the described example, the parsed national (significant) number is not present as-is in the input string. Instead, it's \"modified\" in the input string. https://gitlab.com/caamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n// * `prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix?: string` — In some countries, a phone number could have a prefix that is not a \"national prefix\" but rather some other type of \"utility\" prefix.\r\n//                                                                             For example, when calling within Australia, one could prepend `1831` prefix to hide caller's phone number.\r\n//                                                                             https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n//\r\nexport default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset({ country, callingCode }) {\r\n\t\tthis.international = false\r\n\t\tthis.missingPlus = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberIsModified = false\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix = undefined\r\n\t}\r\n\r\n\tupdate(properties) {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\tthis.onCallingCodeChange(callingCode, this.country)\r\n\t}\r\n\r\n\tstartInternationalNumber(country, callingCode) {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}","import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes()) {\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n}"],"names":["_ref","CAPTURING_DIGIT_PATTERN","metadata","constructor","empty_placeholder","Metadata","checkNumberLength","getCountryByCallingCode","PropTypes","nationalNumber","callingCode","DIGIT_PLACEHOLDER","retained_template","getCountryCallingCode","opening_braces","MAX_LENGTH_FOR_NSN","_normalizeArguments","country","FIRST_GROUP_PATTERN","selectionStart","onCut","useState","event","_parse","_format","PatternParser","concat","pattern","parsePhoneNumberWithError","labelsPropType","prefix","MAX_LENGTH_COUNTRY_CODE","input","options","value","defaultMetadata","extractFormattedPhoneNumber","createCountryIconComponent","state","IDDPrefixPattern","replace","maxLength","createInput","type","phoneContext","formattedNumber","_step","_iterator","VALID_DIGITS","CountrySelect","getPreSelectedCountry","PLUS_SIGN","RFC3966_PHONE_DIGIT_","rest","extension","format","internationalFormat","_objectSpread","autoComplete","parse","number","context","_ref$useNationalForma","keyCode","createElement","getCountryCodesForCallingCode","defaultLabels","InternationalIcon3x2","_ref$autoComplete","i","ref","length","_createForOfIteratorHelperLoose","_excluded","PhoneInput","start","_extends","charCodeAt","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","done","defaultCountry","defaultCallingCode","indexOf","initialValueFormat","on_change","undefined","_ref$metadata","target","useCallback","args","RegExp","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","_ref2","text","string","selectNumberingPlan","LEADING_PLUS","countryCallingCode","VALID_PUNCTUATION","shouldTryNationalPrefixFormattingRule","matchedGroups","split","_this$context$","b","possibleShorterNumber","countryName","result","_Array$prototype$slic2","matches","withCountryCallingCode","nationalPhoneNumber","branches","parse_character","smartCaret","matchedChars","InputSmart","_aspectRatio","InputBasic","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","ALPHANUM_","AsYouType","_extractNationalNumbe","optionsOrDefaultCountry","nationalPrefixFormattingRule","Keys","name","nationalNumberPattern","SLASHES","instructions","international","DOTS","BRACKETS","TILDES","propTypes","useNationalFormatForDefaultCountryValue","inputComponent","getCountryAndCallingCode","getCountries","_this","call","character","countryCode","_usePhoneDigits","React","onChange","phoneDigits","index","title","ParseError","labels","placeholder","RFC3966_PREFIX_","_objectWithoutProperties","inputFormat","caret","getCountrySelectOptions","couldNumberBelongToCountry","trim","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPrefixForFormattingValueAsPhoneNumber","countries","element","Error","RFC3966_ISDN_SUBADDRESS_","_React$PureComponent","filter","matchesEntirely","possibleShorterNationalNumber","setCaretPosition","caret_position","formatter","option","getTemplate","props","prevParsedCharacters","prefixMatch","capturedGroupsCount","merge","removePrefixFromFormattedPhoneNumber","cutAndStripNonPairedParens","isObject","SUPPORT_LEGACY_FORMATTING_PATTERNS","elementType","hasCapturedGroups","extractFormattedDigitsAndPlus","arg_3","inputRef","getSeparatorAfterNationalPrefix","instance","PLUS_CHARS","match","numberToParse","e164Number","substring","extractPhoneContext","template","indexOfPhoneContext","isViablePhoneNumber","digits","controlled","formattedDigits","phone","current","eventListener","endContext","onCountryMismatch","pop","_extractCountryCallin","actualCountry","setPhoneDigits","newDefaultCountry","order","inputProps","possibleLengths","object","RFC3966_PHONE_CONTEXT_","newCountry","nonGeographical","Input","countryOptions","isNonGeographicCallingCode","hasCountry","setSelectionRange","phoneContextStart","getCountryMetadata","func","isRequired","newValueFormatted","characterIndexInValue","cut_before","tree","addInternationalOption","_onKeyDown","properties","_ref3","NON_FIXED_LINE_PHONE_TYPES","arg_2","_Object$keys","OPERATOR","Object","_i","checkNumberLengthForType","formatNationalNumberUsingFormat","Array","_len","_key","nationalSignificantNumber","isPossibleNumber","arguments","test","carrierCode","VALID_PHONE_NUMBER_PATTERN","prevPhoneDigits","nonGeographic","getContext","getExtensionDigitsPattern","extLimitAfterExplicitLabel","formatNationalNumber","bool","selection","map","initCountryAndCallingCode","ext","possibleCharsAfterExtLabel","optionalExtnSuffix","before","parseDigit","rightPart","countryCodes","mergeArrays","_getCountryAndCountry","slice","operator","mobile_type","isCountrySupportedWithError","extLimitAfterAmbiguousChar","InternationalIcon1x1","nationalPrefix","formattedNationalNumber","isViablePhoneNumberStart","prefixBeforeNationalSignificantNumberThatIsNotNationalPrefix","operation","extLimitWhenNotSure","_excluded3","v2","templateWithFilledInPlaceholders","_dangling_braces","parsePattern","nextDigits","focus","forwardRef","CountrySelectWithIcon","defaultValue","autoDiallingAndExtLabelsFound","extLimitAfterLikelyLabel","possibleNationalPrefix","countryNames","startContext","_slicedToArray","error","_useState3","possibleSeparatorsNumberExtLabelNoComma","className","justLeadingPlus","RFC3966_DOMAINNAME_PATTERN_","formattedPhoneNumber","iconComponent","setCallingCode","position","onCallingCodeChange","a","nationalNumberBefore","_compareStrings","label","DefaultArrowComponent","_ref3$arrowComponent","_createClass","PhoneNumber","or","numberingPlan","eraseSelection","newValue","_excluded2","noValueHasBeenEnteredByTheUser","nationalNumberAfter","hasUserSelectedACountry","useMemo","narrowDownMatchingFormats","setExt","isNewDefaultCountrySupported","noValueHasBeenEntered","_step2","_iterator2","getPossibleCountries","_parsePhoneNumber","_useState7","_useState8","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","DIGIT_PLACEHOLDER_MATCHER","classNames","parser","_getInitialPhoneDigits","extractIddPrefix","unicodeFlags","isNumberWithIddPrefix","getMetadata","appendDigits","search","possible_lengths","characters","getNationalDigits","Icon","fromCountry","actual_length","oneOf","formatExtension","AsYouTypeFormatter","_useState10","nationalDigits","appendNationalSignificantNumberDigits","subtree","last","setRerenderTrigger","_defineProperty","getValueForPhoneDigits","isPossibleIncompleteNationalNumber","formatAs","getFullNumber","getNonFormattedNumber","chooseFormatForNumber","NumberingPlan","formattedOutput","_this$props2","resetFormat","restCharacters","getCaretPosition","useInternationalFormat","digit","countryCallingCodeEditable","isValidFormattedNationalNumber","hasExtractedNationalSignificantNumber","AsYouTypeState","onCountryChange","parseDigits","populatedNationalNumberTemplate","stateUpdate","update","_this$state2","newValueAndCaret","edit","availableFormats","valuesAreEqual","phoneNumber","IDDPrefix","partialMatch","_phoneDigits","countryCallingCodes","key","currentlySelectedCountry","isEqual","formatNational","expandSingleElementArray","divider","isWaitingForCountryCallingCode","matchingFormats","getDigitsWithoutInternationalPrefix","pickFirstMatchingElement","formatted","formatIncompletePhoneNumber","isSameOptionValue","value1","value2","asYouType","leadingDigitsPatterns","limitMaxLength","supportedCountries","JSON","stringify","_onPhoneDigitsChange","useNationalFormat","onNationalSignificantNumberChange","setValueForPhoneDigits","op","parseOneOfSet","reset","getCountryCodeForCallingCode","addExtension","getType","getNumberType","countryCallingCodeSource","useEffect","formatIDD","latestCountrySelectedByUser","getNumberingPlanMetadata","formatNumber","hasSelectedNumberingPlan","_nationalPrefixForParsing","countryMismatchDetected","couldPossiblyExtractAnotherNationalSignificantNumber","nationalPrefixForParsing","COMPLEX_NATIONAL_PREFIX","default","branch","canFormatCompleteNumber","overflow","valid","formattedCompleteNumber","formatCompleteNumber","extended","formatInternational","prevDefaultCountry","nextValue","prevValue","getIddPrefix","push","String","fromCharCode","setState","iddPrefix","getURI","getCallingCode","values","extractNationalNumberFromPossiblyIncompleteNumber","couldNewValueCorrespondToLatestCountrySelectedByUser","valueForPhoneDigits","parsedCountry","objects","setNationalNumberTemplate","getCountryAndCountryCallingCode","countryOrCountryCallingCode","metadataJson","extract","throwOnError","isCountryCode","MAX_INPUT_STRING_LENGTH","char","testFunction","_onFocus","formatNationalNumberWithNextDigits","elements","defaultIDDPrefix","extractAnotherNationalSignificantNumber","prevNationalSignificantNumber","extractNationalSignificantNumber","userCountrySelectionHistoryStateUpdate","previouslyChosenFormat","PHONE_NUMBER_START_PATTERN","onBlur","chosenFormat","_onBlur","_extractNationalNumbe2","chooseFormat","getCountry","array","startsAt","prevCountry","countrySelectProps","newCountryPrefix","_getCountry","formatNextNationalNumberDigits","onFocus","onExtractedNationalNumber","formats","rerender","getInternationalPhoneNumberPrefix","parseInput","_this2","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","leadingDigits","createRef","nationalSignificantNumberIsModified","nationalPrefixTransformRule","_this$props3","determineTheCountryIfNeeded","displayInitialValueAsLocalNumber","_this$props4","nationalSignificantNumberIndex","lastIndexOf","leadingDigitsPatternIndex","MIN_LEADING_DIGITS_LENGTH","withExtensionStripped","extractExtension","hasTypes","onSetPhoneDigits","formatSuits","formatMatches","isCountryCallingCodeAmbiguous","determineTheCountry","prefixBeforeNationalNumber","getSupportedCountries","getPhoneDigitsForValue","getInternationalPrefixBeforeCountryCallingCode","country_phone_code_to_countries","spacing","country_calling_codes","getAnyCountry","getFirstSupportedCountry","chooseCountryByCountryCallingCode","usesNationalPrefix","nationalPrefixIsOptionalWhenFormattingInNationalFormat","extractCountryCallingCode","reExtractNationalSignificantNumber","parseIncompletePhoneNumber","preSelectedCountry","getNumber","getNonFormattedNationalNumberWithPrefix","_this$state","globalMetadataObject","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","getNumberValue","getNonFormattedTemplate","getDefaultCountryMetadataForRegion","Math","min","leadingDigitsPattern","getNationalSignificantNumberDigits","_inherits","PhoneNumberInput_","componentDidMount","v1","selectedCountry","setCountry","isInternational","partial_national_significant_number","extractCallingCodeAndNationalSignificantNumber","exactCountry","getInputFormat","trimNumber","componentDidUpdate","prevProps","prevState","overflowDigitsCount","nationalSignificantNumberPart","getMaxNumberLength","_getFormats","allowOverflow","fixMissingPlus","console","_this$props5","countryOptionsOrder","Format","locales","useMemoCountrySelectOptions","sortCountryOptions","compareStringsLocales","getSupportedCountryOptions","_getNationalPrefixFormattingRule","stripIddPrefix","getFormatFormat","getCountryForPartialE164Number","partialE164Number","_ref4","callingCode_","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","_this3","startInternationalNumber","required","_loop","countrySelectOptionsMemo","_extractCountryCallin2","getCountryFromPossiblyIncompleteInternationalPhoneNumber","newCallingCode","_this$state3","missingPlus","render","_this$props6","disabled","derived_country","readOnly","style","_getNationalPrefixIsOptionalWhenFormatting","numberInputProps","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","containerComponentProps","countriesProperty","resetNationalSignificantNumber","flagComponent","flagUrl","internationalIcon","types","focusInputOnCountrySelection","NON_ALTERING_FORMAT_REG_EXP","createTemplateForFormat","_","ambiguousCountries","isFocused","getCountryByNationalNumber","_ret","DEFAULT_EXT_PREFIX","countrySelectOptions","_ref5","onCountryFocus","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","hasPlus","CountryIcon","InputComponent","setInputRef","isPossible","_extractFormattedDigitsAndPlus","extractedNumber","isValid","_extractFormattedDigi3","_extractFormattedDigi4","getDerivedStateFromProps","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","getNationalNumber","getPhoneInputWithCountryStateUpdateFromNewProps","hasStartedTypingInNationalNumberDigitsHavingInputValueSelected","isNANP","PureComponent","PhoneNumberInput","withDefaultProps","NATIONAL_PREFIX_SEPARATORS_PATTERN","FIRST_GROUP_ONLY_PREFIX_PATTERN","getChars","convertInternationalPhoneDigitsToNational","Type","internationalPrefix","nationalNumberTemplate","populatedNationalNumberTemplatePosition","repeat","validateMetadata","getTemplateForFormat","keys","join","typeOf","CREATE_CHARACTER_CLASS_PATTERN","_typeof","CREATE_STANDALONE_DIGIT_PATTERN","getExtPrefix","LONGEST_DUMMY_PHONE_NUMBER","arrayOf","isSupportedCountry","countryRequired","version","oneOfType","v3","nationalNumberDummyDigits","compare","V3","DUMMY_DIGIT","V4","strictPattern","v4","numberFormat","nationalPrefixIncludedInTemplate","numberFormatWithNationalPrefix","flags","objectOf","compareStrings","prototype","localeCompare","stripCountryCallingCode","applyInternationalSeparatorStyle","countryCallingCodePrefix","populateTemplateWithDigits","country_calling_code","intlPhoneNumberPrefix","_ref6","metadataPropType","defaultProps","Flag","InternationalIcon","any"],"mappings":"kCAOC,WACA,aAEA,IAAI,EAAS,CAAC,EAAE,cAAc,CAE9B,SAAS,IAGR,IAAK,IAFD,EAAU,GAEL,EAAI,EAAG,EAAI,UAAU,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAM,SAAS,CAAC,EAAE,CAClB,IACH,CADQ,CACE,EAAY,EAAS,AAOlC,SAAS,AAAY,CAAG,EACvB,GAAmB,UAAf,OAAO,GAAmC,UAAf,AAAyB,OAAlB,EACrC,OAAO,EAGR,GAAmB,UAAf,AAAyB,OAAlB,EACV,MAAO,GAGR,GAAI,MAAM,OAAO,CAAC,GACjB,GADuB,IAChB,EAAW,KAAK,CAAC,KAAM,GAG/B,GAAI,EAAI,QAAQ,GAAK,OAAO,SAAS,CAAC,QAAQ,EAAI,CAAC,EAAI,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,iBACnF,CADqG,MAC9F,EAAI,QAAQ,GAGpB,IAAI,EAAU,GAEd,IAAK,IAAI,KAAO,EACX,EAAO,AADS,IACL,CAAC,EAAK,IAAQ,CAAG,CAAC,EAAI,EAAE,CACtC,EAAU,EAAY,EAAS,EAAA,EAIjC,OAAO,CACR,EAjC6C,GAAA,CAE5C,CAEA,OAAO,CACR,CA8BA,SAAS,EAAa,CAAK,CAAE,CAAQ,SAC/B,AAAL,EAII,EACI,AALJ,EAKY,GADL,CAJI,AAKO,EAGf,EAAQ,EAPP,CAQT,CAEA,GAAqC,CAAjC,CAAwC,OAAO,CAClD,CADoD,CACzC,OAAO,CAAG,EACrB,EAAO,OAAO,CAAG,OACX,GAAsB,AAAlB,MAHW,aAGJ,QAA+C,UAAtB,OAAO,OAAO,GAAG,EAAiB,OAAO,GAAG,CAEtF,CAFwF,IAExF,OAAA,EAAA,CAAA,CACQ,IADiB,IAIzB,OAAO,UAAU,CAAG,CAEtB,CAAA,0EC1EA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QAEA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,ceLe,CAAC,QAAU,EAAE,sBAAwiCAAiC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,yDAAyD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,oBAAoB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,yDAAyD,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,gCAAgC,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,uCAAuC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,uFAAuF,kNAAkN,kSAAkS,8WAA8W,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,gCAAgC,cAAc,CAAC,yBAAyB,4FAA4F,wNAAwN,4SAA4S,uXAAuX,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,gCAAgC,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,IAAI,EAAE,0jBAA0jB,MAAM,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,KAAK,KAAK,mKAAmK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,yDAAyD,0DAA0D,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,sDAAsD,+EAA+E,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC,8dAA8d,CAAC,EAAE,CAAC,CAAC,CAAC,qGAAqG,CAAC,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,2CAA2C,CAAC,EAAE,CAAC,CAAC,CAAC,mDAAmD,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,8BAA8B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,sDAAsD,4FAA4F,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,wCAAwC,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,iBAAiB,qBAAqB,4BAA4B,CAAC,QAAQ,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,qCAAqC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,kFAAkF,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,uLAAuL,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,kBAAkB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,sBAAsB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,iDAAiD,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,6BAA6B,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,0BAA0B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,sCAAsC,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,2CAA2C,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,sCAAsC,CAAC,CAAC,2GAA2G,CAAC,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,6CAA6C,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,cAAc,qCAAqC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,GAAK,CAAC,MAAM,KAAK,uBAAuB,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAK,CAAC,KAAK,yCAAyC,wFAAwF,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,uBAAuB,6BAA6B,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,6DAA6D,CAAC,OAAO,CAAC,CAAC,2BAA2B,WAAW,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,8DAA8D,KAAK,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,uDAAuD,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,MAAM,mIAAmI,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,6BAA6B,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,2BAA2B,WAAW,CAAC,oDAAoD,wFAAwF,CAAC,QAAQ,CAAC,CAAC,mCAAmC,cAAc,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,sBAAsB,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,wNAAwN,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,sPAAsP,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,sDAAsD,qEAAqE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,IAAI,EAAE,kBAAkB,MAAM,EAAE,EAAE,CAAC,CAAC,0IAA0I,CAAC,EAAE,CAAC,CAAC,CAAC,qGAAqG,CAAC,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,2CAA2C,CAAC,EAAE,CAAC,CAAC,CAAC,mDAAmD,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,8BAA8B,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,uBAAuB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,2CAA2C,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,yDAAyD,qCAAqC,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,wBAAwB,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,mDAAmD,CAAC,OAAO,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,wBAAwB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,wCAAwC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,6BAA6B,2HAA2H,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,2TAA2T,kWAAkW,wXAAwX,0XAA0X,uXAAuX,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,+QAA+Q,4SAA4S,qUAAqU,uUAAuU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,2BAA2B,2BAA2B,6DAA6D,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,gMAAgM,CAAC,MAAM,EAAE,CAAC,CAAC,qBAAqB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,4BAA4B,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,KAAK,4BAA4B,4CAA4C,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,mBAAmB,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,2BAA2B,CAAC,GAAK,CAAC,MAAM,KAAK,gDAAgD,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,sCAAsC,CAAC,GAAK,CAAC,KAAK,MAAM,kDAAkD,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,kBAAkB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,gBAAgB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,IAAI,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,mCAAmC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,GAAK,CAAC,KAAK,sDAAsD,qEAAqE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,IAAI,EAAE,kBAAkB,MAAM,EAAE,EAAE,CAAC,CAAC,4JAA4J,CAAC,EAAE,CAAC,CAAC,CAAC,qGAAqG,CAAC,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,2CAA2C,CAAC,EAAE,CAAC,CAAC,CAAC,mDAAmD,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,qCAAqC,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,gMAAgM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,sBAAsB,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,sGAAsG,+GAA+G,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,uGAAuG,2bAA2b,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,YAAY,qBAAqB,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,IAAI,MAAM,2BAA2B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,eAAe,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,kCAAkC,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,mDAAmD,+EAA+E,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,sBAAsB,2BAA2B,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,yCAAyC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,kBAAkB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,sDAAsD,2EAA2E,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,kBAAkB,QAAQ,CAAC,yCAAyC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,iBAAiB,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,YAAY,qCAAqC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,sBAAsB,CAAC,GAAK,CAAC,KAAK,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,wCAAwC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gCAAgC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,0DAA0D,KAAK,CAAC,GAAK,CAAC,KAAK,KAAK,qCAAqC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,OAAO,QAAQ,SAAS,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,OAAO,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,yBAAyB,qCAAqC,mDAAmD,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,sBAAsB,iCAAiC,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,07CAA07C,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,4NAA4N,CAAC,GAAG,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,8DAA8D,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,4FAA4F,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,kDAAkD,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,IAAI,EAAE,2BAA2B,SAAS,EAAE,EAAE,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,oCAAoC,CAAC,GAAG,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,6DAA6D,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,4FAA4F,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,6BAA6B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,mFAAmF,CAAC,CAAC,2GAA2G,CAAC,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,6CAA6C,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,iDAAiD,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,6DAA6D,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,mCAAmC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,qBAAqB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,MAAM,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,0BAA0B,sDAAsD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,MAAM,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,iCAAiC,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,+CAA+C,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,4BAA4B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,2BAA2B,WAAW,CAAC,uDAAuD,CAAC,UAAU,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAK,CAAC,KAAK,SAAS,gFAAgF,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,qBAAqB,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,6BAA6B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,sDAAsD,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,iCAAiC,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,0BAA0B,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,6BAA6B,WAAW,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,gBAAgB,gDAAgD,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,gCAAgC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,qCAAqC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,oCAAoC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,2BAA2B,SAAS,EAAE,uBAAuB,CAAC,GAAK,CAAC,KAAK,KAAK,0CAA0C,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,8BAA8B,4CAA4C,6CAA6C,CAAC,EAAE,EAAE,CAAC,CAAC,qBAAqB,QAAQ,CAAC,MAAM,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,qCAAqC,2DAA2D,2FAA2F,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,sYAAsY,meAAme,wkBAAwkB,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,iKAAiK,wSAAwS,kWAAkW,CAAC,MAAM,EAAE,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,6BAA6B,WAAW,CAAC,eAAe,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,wCAAwC,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,2EAA2E,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,4BAA4B,wBAAwB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,KAAK,KAAK,8FAA8F,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,wCAAwC,wDAAwD,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,iCAAiC,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,yBAAyB,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,6bAA6b,CAAC,CAAC,iCAAiC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,iHAAiH,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,sBAAsB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,8BAA8B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,oCAAoC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,6BAA6B,SAAS,EAAE,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,sDAAsD,CAAC,CAAC,+BAA+B,CAAC,CAAC,wGAAwG,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,gHAAgH,CAAC,CAAC,4FAA4F,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,GAAK,CAAC,MAAM,KAAK,yCAAyC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,MAAM,yDAAyD,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,uFAAuF,wKAAwK,uLAAuL,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,4BAA4B,8CAA8C,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,sVAAsV,soBAAsoB,0vBAA0vB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,mCAAmC,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,0CAA0C,KAAK,CAAC,GAAK,CAAC,MAAM,MAAM,2DAA2D,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,wBAAwB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,kCAAkC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,WAAW,wBAAwB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,mDAAmD,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,2BAA2B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,QAAQ,iCAAiC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,sDAAsD,2GAA2G,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,4BAA4B,CAAC,GAAK,CAAC,MAAM,KAAK,kCAAkC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,gCAAgC,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,IAAI,MAAM,qCAAqC,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,gDAAgD,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,sBAAsB,0BAA0B,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,GAAK,CAAC,KAAK,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,iDAAiD,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,mBAAmB,QAAQ,CAAC,sBAAsB,CAAC,SAAS,EAAE,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,yEAAyE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,mEAAmE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,mEAAmE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,qCAAqC,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,6CAA6C,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC,qCAAqC,cAAc,CAAC,kDAAkD,CAAC,CAAC,CAAC,EAAE,EAAE,oDAAoD,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,wCAAwC,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,gIAAgI,CAAC,CAAC,0EAA0E,CAAC,CAAC,gBAAgB,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,0CAA0C,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,wBAAwB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,wCAAwC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,6BAA6B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,yDAAyD,CAAC,CAAC,2GAA2G,CAAC,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,6CAA6C,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,oBAAoB,OAAO,CAAC,GAAK,CAAC,MAAM,MAAM,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,oEAAoE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,oFAAoF,CAAC,MAAM,CAAC,CAAC,0BAA0B,WAAW,CAAC,kBAAkB,mBAAmB,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,0BAA0B,WAAW,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,MAAM,2BAA2B,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,sCAAsC,2CAA2C,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,kCAAkC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,8BAA8B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,kBAAkB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,wCAAwC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,uBAAuB,uCAAuC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,YAAY,2CAA2C,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,QAAQ,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,KAAK,KAAK,iCAAiC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,+BAA+B,mDAAmD,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,mBAAmB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,mBAAmB,MAAM,CAAC,GAAK,CAAC,MAAM,MAAM,kCAAkC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,8BAA8B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,+EAA+E,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,gBAAgB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,0CAA0C,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,0BAA0B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,kBAAkB,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,oCAAoC,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,+CAA+C,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,yBAAyB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,aAAa,0FAA0F,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,iBAAiB,uBAAuB,CAAC,MAAM,CAAC,CAAC,wBAAwB,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,oDAAoD,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,0BAA0B,wBAAwB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,gBAAgB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,UAAU,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,cAAc,mDAAmD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,KAAK,KAAK,kDAAkD,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,qBAAqB,QAAQ,CAAC,qEAAqE,sHAAsH,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,wBAAwB,gCAAgC,CAAC,QAAQ,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,qCAAqC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,kKAAkK,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,kJAAkJ,sKAAsK,CAAC,QAAQ,CAAC,CAAC,qBAAqB,QAAQ,CAAC,6DAA6D,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,oDAAoD,CAAC,QAAQ,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,wDAAwD,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,iFAAiF,kFAAkF,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,iDAAiD,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,8BAA8B,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,mCAAmC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,4BAA4B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,GAAK,CAAC,MAAM,KAAK,iCAAiC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,SAAS,iCAAiC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,uDAAuD,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,wCAAwC,CAAC,QAAQ,CAAC,CAAC,qBAAqB,QAAQ,CAAC,yDAAyD,CAAC,QAAQ,CAAC,CAAC,6BAA6B,WAAW,CAAC,uDAAuD,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,iDAAiD,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,kCAAkC,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,uCAAuC,CAAC,CAAC,6GAA6G,CAAC,CAAC,WAAW,CAAC,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,oDAAoD,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,qCAAqC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,aAAa,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAK,CAAC,MAAM,KAAK,wGAAwG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,yBAAyB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,qBAAqB,qDAAqD,wEAAwE,CAAC,SAAS,EAAE,CAAC,CAAC,gCAAgC,cAAc,CAAC,sBAAsB,2EAA2E,6LAA6L,CAAC,SAAS,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,2BAA2B,CAAC,SAAS,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,2MAA2M,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,iCAAiC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,QAAQ,0BAA0B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,mCAAmC,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,aAAa,yBAAyB,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,KAAK,0EAA0E,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,mBAAmB,QAAQ,CAAC,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,yCAAyC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,kCAAkC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,6BAA6B,WAAW,CAAC,uHAAuH,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,6BAA6B,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,qCAAqC,cAAc,CAAC,oDAAoD,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,mCAAmC,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,mCAAmC,cAAc,CAAC,gFAAgF,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,2CAA2C,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,KAAK,YAAY,+CAA+C,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,0BAA0B,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,uBAAuB,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAK,CAAC,MAAM,uBAAuB,mCAAmC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,KAAK,KAAK,gCAAgC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,yCAAyC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,0BAA0B,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,cAAc,kBAAkB,CAAC,MAAM,CAAC,CAAC,gCAAgC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,0BAA0B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,gBAAgB,SAAS,CAAC,GAAK,CAAC,MAAM,KAAK,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,uDAAuD,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,gCAAgC,CAAC,CAAC,CAAC,gBAAgB,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,8BAA8B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,6CAA6C,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,IAAI,MAAM,sCAAsC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,eAAe,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,4BAA4B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,qBAAqB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,QAAQ,8BAA8B,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAK,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,UAAU,6CAA6C,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,MAAM,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,MAAM,OAAO,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,oCAAoC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,MAAM,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,gCAAgC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,GAAK,CAAC,MAAM,KAAK,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,oDAAoD,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,kCAAkC,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,iDAAiD,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,iBAAiB,qBAAqB,sBAAsB,CAAC,MAAM,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC,6BAA6B,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,2BAA2B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,sBAAsB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,KAAK,yBAAyB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,mBAAmB,+CAA+C,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,0BAA0B,WAAW,CAAC,wCAAwC,+CAA+C,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAK,CAAC,MAAM,UAAU,4BAA4B,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,8DAA8D,kFAAkF,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,wFAAwF,oGAAoG,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,GAAK,CAAC,MAAM,UAAU,qCAAqC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,2BAA2B,aAAa,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,6rBAA6rB,CAAC,CAAC,GAAG,CAAC,CAAC,uCAAuC,CAAC,CAAC,iBAAiB,CAAC,CAAC,0OAA0O,CAAC,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,mBAAmB,2DAA2D,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,qCAAqC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,SAAS,CAAC,GAAK,CAAC,MAAM,KAAK,2BAA2B,CAAC,EAAE,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,+EAA+E,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,KAAK,KAAK,uCAAuC,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,IAAI,MAAM,+BAA+B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,qBAAqB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,IAAI,MAAM,8BAA8B,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,mBAAmB,QAAQ,EAAE,MAAM,CAAC,GAAK,CAAC,KAAK,KAAK,mDAAmD,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,qBAAqB,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,qCAAqC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,qCAAqC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,IAAI,gDAAgD,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAK,CAAC,MAAM,KAAK,gDAAgD,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,sBAAsB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,+BAA+B,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,0BAA0B,WAAW,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,gDAAgD,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,6CAA6C,CAAC,CAAC,+EAA+E,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,mCAAmC,CAAC,CAAC,CAAC,GAAK,CAAC,KAAK,KAAK,yBAAyB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,qCAAqC,CAAC,EAAE,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAK,CAAC,MAAM,KAAK,wHAAwH,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,QAAQ,CAAC,yFAAyF,CAAC,MAAM,CAAC,CAAC,0BAA0B,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,6CAA6C,6EAA6E,CAAC,QAAQ,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,+CAA+C,gDAAgD,CAAC,MAAM,CAAC,CAAC,mBAAmB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,4IAA4I,CAAC,MAAM,CAAC,CAAC,6BAA6B,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,qBAAqB,QAAQ,CAAC,aAAa,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,cAAgB,CAAC,IAAM,CAAC,MAAM,EAAE,wBAAwB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,uCAAuC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,yBAAyB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,0BAA0B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,uEAAuE,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,6BAA6B,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,kEAAkE,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,gLAAgL,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,2BAA2B,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,6BAA6B,WAAW,CAAC,oCAAoC,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,mCAAmC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,mIAAmI,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,2BAA2B,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,IAAM,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,mCXD97lF,oBACoBG,WAAAA,GAAAA,6iBwBS9C6C,EAAAA,oBAeiBtB,MAAAA,YAAYA,MAAAA,CAAGqG,MAAOrG,MAAA,CAAGwG,MAAAA,MAAAA,WAAiBxG,MAAA,CAAGyG,QAAQ,QAAAzG,MAAA,CAAG0G,MAAM,CAAE,CAEvF,EAAmB,u0DkDnB0B,CIenD,AJfoD,qBACrB,CAACP,IAAI,CAAAa,wBAClCU,UAAAA,yGAAAA,GAAAA,gCAAAA,oFAAAA,OAAAA,2DAPqCmB,kCjCIxB,8IAQa,yDAEQ,OAAA,WAE5B,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,WACoB,EAAA,CAAA,CAAO,EAAE,CAAGhE,CAAC,CAAA,EAAG,CAAG,CAAC,EAAA,IAEpC,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,CAAc,EAAA,CAAA,CAAA,EAAA,EAAa,CAACA,CAAC,CAAA,EAAG,CRNL,AmBCC,AXKO,CAAC,C6BRV,A7BQW,CAAA,u5BNTrB,wBAMR,oCAGRoC,IAAAA,CAAK,IAAA,CAAA,wCAGjBF,8CAC6CiC,MAAAA,CAAAA,SAAAA,CAAQ,QAAU,4IAQtD,CAAA,EAAA,GAAA,IAAA,CAAA,EAAc,GAAA,IAAA,CAAA,EAAA,qCAIgB,IAAA,CAAA,QAAa,CAACoD,eAAe,MUUS,qBVP7E,CbuBS,QavBTI,CAAAA,SACgCjN,KAAAA,SAAnBoN,kBAAAA,CAAmBpN,iCAGhC,SAAA,CAA0B,sDAC4B,CgDDb,CAAC,iBhDInB,CAAC,CAAC,A/BiBI,S+BhBnB,CAACiP,CdyBM,CWMA,A5BdD,AwEiLH,C7CtMM,UAAA,EAAA,CAAA,EIIoB,EAAE,MAC/B,uCAIuC,CAAA,EAAa,IACxDe,GAAwC,AAAxCA,Cd4B6C,Ac5BJ,AuB4BtC,AtDXwC,G+BjB3CA,EAAAA,MAAAA,EuB4BG,AvB5B8D,OAAO,CuB4BrE,AtDXwE,AyCDE,CVhBpB,CAAC,CAAC,CAAC,8DAMvCvQ,CAAW,CJHf,CIGiB,AJHhB,yBIID,CAAC,CAAC,EAAE,CAClB,IAAI,CAAA,aAAc,CAAC,AgDJd8S,ChDIc,CAAA,EAAA,EAE1B,CAF2C,GAEhC,CAFoC,AAEpC,6BAA8B,CAAC9S,oBAI5CwB,GAJmE,GAKnE,CALuE,QAKvEjB,CAAmB,iCACa,CAAA,sCAGhC,SAAoB4H,CAAW,CAAA,CAAa,UAEHiH,CsCgCpB,GtChCwB,CAACjH,cAAc,MAIxB,KAAK,KAAE,UAC/BqF,UAAU,CAACrF,cAAc,MoBKS,epBJ5BnH,MAAA,CAAqBmH,SwBiCiB,CAAC,CxBjCP,CAAE,CAAC,UAE9B,CyCiNlB,GzCjNsB6O,EAAc,CkBwBK,GAAA,ClBxBArJ,kBAAAA,CAAAA,GAAiC,IAAI,CAAC,oCAEzD3N,GACxB,CdqCK,ADTC,KAAA,Ae5BI6J,KAD4B,CAC5BA,yBAAK7I,MAAA,CAA0BhB,uBAErB,IAAA,EAAA,IAAsB,CAAA,wBAAyB,CAACA,GAAAA,IAAkB,CAAC,8BAEnE2E,EyCyMb,AzCvMT,CgDZD,MhDYQ,IAAI,wCACXnD,MAED,SAA8BxB,CAAW,CyCsNjB,CzCtNmB,EyCsNN,QzCrNX,CAAC0Y,GiCEF,SQoNR,EvB7L0BrP,KlBzBG,CAAC,CAAC,CAACrJ,EAAY,AiBuC7D,CjBtCC,CwBiCA,EAAA,ExBjCkB,IAUM,IAAnBuQ,EAAa1M,MAAM,EAAA,AAAgC,GAAQ,CAAxC,CAAsB,CAAC,AcwCwB,CdxCvB,CAAC,CAACA,MAAM,kBAKxD,sCAAArC,MAAAA,SAE4BxB,CAAAA,EAC5B,C6BgBD,AWhBA,GXgBA,E7BhBsB,EPqCC,EOrCG,CAACuD,EyCiNd,2BzCjN2C,CAACvD,WAAW,CAAC,KAE/C,EAAA,AAEtB,CAHmB,E6BqBb6C,gC7BlBLrB,CkB8BC,KAAA,SlB5BuBxB,CAAW,YACX,CAACua,4BAA4B,CAACva,mBAE1C,CAAA,kBAAmB,CAACmI,EFQC,sBENX,CAAC,CAAC,CAAE,OACR,IAAA,CAAA,aAAkB,CAAC,CAAA,CAAA,EAAc,EoBSlD,IpBPC,OAAA,CADa,YASO,IAAI,CAAA,mBAAoB,CAAC,CAAA,CAAEnI,EAAY,CAC5D,GAAA,GAA4C,CAAC,GAAzBuQ,C6BsBH,C7BtBgB1M,MAAAA,EAAgB0M,AAAoB,KAAK,EAAE,EAAf,CAAC,CAAC,CAAC,CAC/D,OAAO,IAAI,CAAC/Q,QAAAA,CAASmK,SAAS,CAAC,CckDQ,KdlDF,CAGxC,qDAIQ,ED6BK,EC7BD,CAAC+J,CyCsNb,YzCtN0B,CAAA,WAAA,kDAKd,CAAA,aAAc,CAAC6E,SAAS,CAAC,CAAC,CAGtC,gCACA,kBACQ,IAAA,CAAK7E,aAAa,CAACoK,CcuDG,edvDa,CAAC,CAAC,SwB+CNC,uBxB5CvCvc,MACA,kBACQ,IAAI,CAACkS,aAAa,CAACtM,qBAAqB,CAAC,CAAC,QAGlD,kBAAA5F,MACA,SAAAwL,CkBuCiB,QlBtCT,IAAA,CAAK0G,aAAAA,CAAc1G,CiCMA,GQqNK,WzC3NU,CAAC,CAAC,AAC5C,CAEA,iBAAAxL,MAAAA,SACA4d,aACY,CAAC1L,aAAa,CAAC0L,OAAO,CAAC,CAAC,mBkByCqB,sBlBrCzD,SAAA/D,SACQ,IAAI,CAAC3H,aAAa,CAAC2H,G6BgCD,qB7BhCyB,CAAC,CAAC,4CAIrD,SAAAwE,EYiEmB,WZhEP,CAACnM,EiCUE,OQ/IR,IzCqImB,CAACmM,2BAA2B,CAAC,CAAC,8BAIxD,IyCjIU,KzCiIVH,SACQ,CyClIE,GzCkIE,CAAChM,CF2BG,C2C1Jf,WzC+HyB,CAACgM,aAAa,CAAC,CACzC,kCAGAc,OP6DyB,EO5DjB,EFuCI,EAAA,CEvCC9M,aAAa,CAAC8M,QAAQ,CAAC,CAAC,qBAIrC,SAAAve,AAAKA,CAAI,EAAE,AACV,CADGA,MACI,CyC1HE,GzC0HE,CAACyR,aAAa,CAACzR,IAAI,CAACA,EAChC,oBAGA,SAAAgO,SACQ,IAAI,CAACyD,aAAa,CAACzD,GAAG,CAAC,CAAC,AAChC,CAAC,YyCvH6C,iBzCuH7CzO,MAED,SAAAkX,SACC,IAAQ,CAAA,EAAA,CAAY,CAAP,GAAW,CAAClZ,CwBoFb,OxBpFqB,CAAC0hB,+BAA+B,CAC1D,EyCpHG,A3CwKA,EEpDC,CAAC1hB,CiCcH,CfyCQ,MlBvDG,CAAC4hB,qBAAqB,AAC3C,CAEA,GAAAzI,CyCvH+C,CAAC,EzCuHhD,IwBiF2B,gCxBjF3BnX,MAAAA,SACA+f,AAAkCvhB,CwBsFgB,AxBtFL,EAAE,WACnC,CAACqF,kBiCeiB,CjCfE,CAAA,GAC/B,EAAA,wDAG8BV,SAAS,IAA5B,CAAC+O,UPuEiB,GAAA,KO9QF,EAgN3B,EAJD,SAAA,EAAYlU,CAAQ,AAInBwX,CAJqBiL,AiCuBL,CjCvByB,CFkErB,CElEuB,OAAAjL,CyChHjC,OzCiHLiL,aiCiBU,OjCjBU,CAAGA,CF6DH,KE5DrB,CAACziB,QAAAA,CAAWA,IP6EK,CO5EVyI,CiCkBC,GAAA,CjClBI,IAAI,CF6DD,EE7DwBzI,IP6EI,CAAC,GO7EG,CAAC,EACpD,CAAA,kCAEDQ,aACY,CAACR,QAAQ,CAAC,CAAC,CAAC,mDASxB,KiCuBW,IjCvBX8iB,EPgFmB,OO/EX,CkB+DI,GAAA,ClB/DCL,GiCuBE,iBjCvBkB,CAAClH,wBAAwB,CAAC,IAAI,CAAC/a,WAAW,CAAC,CAAC,CAAC,CAG9E,mBAAAwB,MAAAA,SACA+W,CiCwBoB,SjCvBX,CAAA,EAAG,GwB+FY,IAAA,CxB/FHhH,EAAE,YACX,CAAC/R,QAAQ,CAAC,CAAC,CAAA,CAGvB,0BAAAgC,MACA,SAAAsc,UACS,CAACgF,EAAE,GAAI,GyC1GK,CzC0GD,CAACvR,EAAE,EAAE,MACjB,IAAI,CAAC/R,QAAQ,CAAC,GAAG,AACzB,GAAC,CAAAmZ,IAAAA,8BAED,SAAAvR,MyCzGkB,GzC0Gb,IAAI,CAAC0b,EAAE,CP6FM,AKnBJ,CE1EE,IAAI,CAACvR,EAAE,CAAS,CAAP,GAAW,CAAC/R,EP6FO,MO7FC,CAAC,CAAC,CAAC,CACxC,IAAI,CAAA,QAAS,CAAC,CAAC,CAAC,CAGxB,IP0Fe,qBO1FfgC,MACA,QF6Ea,CE7EbwL,WACU8V,EAAE,QACJ,IAAI,CAAA,QAAA,CAAA,IAAc,CAACvR,EAAE,CkBsEM,AlBtEH,EAAA,EAAM,CACrC,GAAAoH,IAAAA,oBAED,SAAYnZ,CAAQ,EkBuEW,OlBtEvBA,CAAQ,CAAC,CyCvGA,GzCuGI,CAACsjB,EAAE,CyCvGC,CAAA,CAAA,IzCuGU,CAACvR,EAAE,CAAG,CAAC,CAAG,CAAC,CAAC,AAC/C,I6B8DiD,CAAC,G7B1DlD,UAAA/P,MAAAA,4BAGQ4d,CADS,IAAI,CAACyE,AiCiCT,CjChCE,CyCjGM,ERgIb,OAAA,CjChC0B,IAAI,CAAA,QAAS,CAAC,EAAI,IAAI,CAACA,WAAW,CAAC,IAAA,CAAKvB,kCAAkC,CAAC,CAAC,CAAC,EAAI,EAAE,AAAF,EACnGvS,GAAG,CAAC,SAAA,CAAC,aAAQoU,EAAAA,EAAUnc,IACvC,CAAC,EAAA,CAAA2Q,IAAAA,iBAAAnX,MAED,QyC1Fa,CzC0FbwP,SACQ,IAAI,CAACxR,IyC1FG,IzC0FK,CAAC,GyC1FE,CzC0FE,CAACsjB,EAAE,CAAG,CAAC,CAAG,IAAI,CAACvR,EAAE,CAAG,CAAC,CAAG,CAAC,CACnD,AADoD,CACnD,GAAAoH,IAAA,yCAED,SAAA8L,AAAiCjlB,CAAQ,EAAE,GwB6GpB,EiBrMoC,CACzD,CAAC,AzCwFKA,CAAAA,CAAS,IAAA,CAAKsjB,EAAE,CAAG,CAAC,C6BmEb6B,CAAAA,GAAAA,C7BnEqBpT,EAAE,CAAG,CAAC,CAAG,CAAC,CAAC,CAK/C,4CACA,CkBiFQ,sDlBhFqC,CAAC,IAAI,CAAC/R,QAAQ,GAAK,IAAI,CAACilB,gCAAgC,CAAC,IAAI,CAACnC,kCAAkC,CAAC,CAAC,CAAC,QAC/I,oDAGO,IAAI,CAAC9iB,CyC9EuB,OzC8Ef,CAAC,IAAA,CAAKsjB,EAAE,CAAA,EAAO,IAAI,CAACvR,EAAE,CAAG,CAAC,CAAG,CAAC,CAAC,oDAMnD,CyCjFA,MzCiFO,IAAI,CAAC2J,CiCwCA,wBjCxCyB,CAAC,CAAC,EAAI,IAAI,CAAClK,cAAc,CAAC,CAAC,GAChE,mCAAAxP,MAED,SAAAqe,GwB6He,MxB5HP,IAAI,CAACrgB,QAAQ,CAAC,IAAI,CAACsjB,EAAE,CAAG,CAAC,CAAG,IAAI,CAACvR,EAAE,CAAG,CAAC,CAAG,CAAC,CAAC,AACpD,CAAC,GAAAoH,IAAAA,mDAED,KyC8HU,IzC9HVyN,EACC,MAAO,CAAC,CAAC,CyC6HA,GzC7HI,CAAC5mB,EyC8HC,MzC9HO,CAAC,IAAI,CAACsjB,EAAE,CyC8Hf,AzC9HkB,CAAC,CAAG,IAAI,CAACvR,EAAE,CAAG,CAAC,CAAG,CAAC,CAAC,CAMtD,EAAA,CAAAoH,IAAAA,yDAAAnX,MACA,SAAAigB,OyCsIqB,OzCrIR2E,WyCsIL,+BzCtI+C,CAAC,IAAI,CAAC5mB,QAAQ,CAAC,EAAA,IAChE,CAAC4mB,WkBwFoF,+BlBxF1C,CAAC,IAAI,CAAC9D,kCAAkC,CAAC,CAAC,CAAC,AAC5F,CAAC,GAAA3J,IAAAA,sBAED,SAAA+G,EACC,OAAO,CyCqIgB,GzCrIhB,CAAKlgB,QAAAA,CAAS,IAAI,CAACsjB,EAAE,CAAG,CAAC,CyCsId,CAAA,GzCtIqB,CAACvR,EAAE,CAAG,CAAC,CAAG,EAAE,CAAA,AACpD,CAAC,EAAA,aAAA/P,MAED,SAAAwlB,EyCyIgB,OzCxIR,IAAI,CAACxnB,QAAQ,CAAC,IAAI,CAACsjB,EAAAA,CAAAA,EAAS,IAAI,CAACvR,EAAE,CyCyIf,AzCzIkB,EAAE,CAAG,EAAE,CACrD,AADsD,CACrD,EAAA,CAAAoH,IAAAA,WAAAnX,MAED,SAAAgf,CyC0Ie,CjBXU,MxB5HxB,EAAI,IAAA,CAAKwG,G6ByFH,E7BzFQ,CAAC,CAAC,AiCgDA,AQ6FhB,MzC7IoB,IAAI,CAACA,KAAK,GAAGnjB,MAAM,AAAK,GAAG,AAKxC,CAAC,CAAC,IAAI,CAACmjB,IyC+IM,CzC/ID,CAAC,CACrB,CAAC,EAAA,CAAArO,IAAAA,OAAAnX,MAED,SAAAS,AAAKA,CAAAA,KACA,GyCiJG,CzCjJC,CAACue,KyCiJM,CRhGJ,EjCjDM,IAAM/F,EAAQ,IAAI,CiCiDT,AjCjDI,AAAMuM,KAAK,CAAC,CAAC,CAAE/kB,GAC5C,GADgD,CAAC,EAAE,CAC5C,IAAA,EAASwY,EAAQ,IAAI,CAACuM,EyCiJG,GzCjJE,CAAC,CAAC,CAAE/kB,GyCiJQ,GzCjJJ,CAAC,AyCiJG,AzCjJG,CAAC,CAEnD,CwB6H6D,CxB7H7D,AwB6H8D,CxB7H9D0W,IAAAA,MAAAnX,MAED,EwBgIW,gBxB/HN,EyCqJG,EAAA,CzCrJEshB,EAAE,EAAA,IAAQ,CAACvR,EAAE,CAAA,MACX,CAAC/R,QAAQ,CAAC,CyCqJA,EzCrJG,EAAIioB,CAC7B,CAAC,IAGItD,SAAM,GyCqJC,CzCpJZA,EAAYthB,CAAM,AAGjBshB,AkB0FM,ClB7Fa3kB,CAAQ,YAC3B,IAAA,CAAKsB,G6BiB4C,I7BjBrC,CAAG+B,C6BiBkC,K7BjB5B,CyCsJA,AzCrJhBrD,QAAQ,CAAGA,CACjB,EAAC2kB,gBAAA3iB,MAED,CyCyJQ,qBzCxJI,CAACV,EyCyJG,CRlGE,IjCvDE,CAAC,CAAC,CAAC,CACtB,EAAA,cAAAU,MAED,SAAAqB,IiCwDmB,KjCvDX,IAAI,CAAA,OAAQ,CAAC,CAAC,CAAC,IACtB8V,IAAAA,akBgG8C,WlBhG9CnX,MAED,SAAAmY,SACQ,EyC4JG,EAAA,CzC5JE7Y,OAAO,CAAC,CAAC,CAAC,EAAA,EAAA,GACtB,CAAA6X,IAAAA,uDAGO,IAAA,CAAA,OAAA,CAAA,EAAe,EAAI,IAAI,CAACnZ,QAAQ,CAAA,4BAA6B,CAAC,CAAC,AACvE,CAAC,QyC8JwC,8DzC5JzC,SAAAiiB,EACC,EiCwDkB,IjCxDX,CAAC,CAAA,IAAK,CAAC3gB,OAAO,CAAC,CAAC,CAAC,EAAI,IAAI,CAACtB,QAAQ,CAACiiB,sDAAsD,CAAC,CAAC,wEAGnG,QwBqIoB,CxBrIpBS,SAMQ,IAAI,CAAA,kBAAmB,CAAC,CAAC,EAAI,CAAC,IAAI,CAACT,sDAAsD,CAAC,CAAC,CAGnG,GAAA9I,IAAA,2BACA,CyCwJwD,QzCxJxD6I,EACC,SAAO,IAAI,CAACva,EADKua,CAAA,EAAG,uBACoB,CAAC,CAAC,EAExC0H,EAAgC9Z,IAAI,CAAC,IAAI,CAACnI,4BAA4B,CAAC,EAAC,uDAUnE,IAAI,CAAA,OAAA,CAAS,C6B2EqC,A7B3EpC,CAAA,EAAA,IAAS,CAAA,MAAO,CAAC,CAAC,KASzC,EAAwC,EkBuGD,YlBvGc,EAMnDsM,KAJQ,IkBsGG,ElBrGZ8V,CAGC,CAHWpnB,CAGXonB,AAHe,CAAE7pB,CAAQ,EAGzB,AAH2B,OAAA6pB,GAC3B,CAD2B,C6ByEjB9e,E7BxEN,CAAA,IAAK,CAAA,EACT,IAAI,CAAC/K,QAAAA,CAAWA,CACjB,EAAC,CAAA,CAAAmZ,IAAA,UAAAnX,MAED,kBACC,IAAQ,CAAChC,QAAQ,CAACsjB,EAAE,CAAS,CAAP,GAAW,CAAC7gB,IAAI,CAC/B,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,AACpB,GAAC,CAAA0W,IAAAA,kBAAAnX,MAED,SAAAwL,EACC,IAAI,G6ByEE,C7BzEE,CAACxN,QAAQ,CAACsjB,EAAE,CACpB,CADsB,MACf,IAAI,CAAC7gB,IAAI,CAAC,CAAC,CAAC,EAAI,IAAI,CAACzC,QAAQ,CAACwN,eAAe,CAAC,CAAC,AACvD,cAGQyN,EAAQuM,CAAK,CAAE/kB,CAAI,EAAZwY,AAAc,OACrBxY,IAAI,GACN,aACJ,OAAO+kB,CAAK,CAAC,CAAC,CAAC,AAChB,KAAK,gBACGA,CAAK,CAAC,CAAC,CAAC,AAChB,KAAK,WAAW,QACRA,CAAK,CAAC,CAAC,CAAC,AAChB,KAAK,cAAc,QACXA,CAAK,CAAC,CAAC,CACf,AADgB,KACX,iBAAiB,QACdA,CAAK,CAAC,CAAC,CAAC,AAChB,KAAK,WAAW,QACRA,CAAK,C6BwEJ,A7BxEK,CAAC,CAAC,AAChB,KAAK,MACJ,C6B4EA,M7B5EOA,CAAK,CAAC,CAAC,CACf,AADgB,KACX,eACGA,CAAK,CAAC,CAAC,CAAC,AAChB,KAAK,IkByGG,ElBzGG,CACV,OAAOA,CAAK,CAAC,CAAC,CAAC,KACX,IkByGG,CuBuDG,SzC/JV,OAAOA,CAAK,CAAC,CAAC,CAAC,EAIX,SAAS0C,EAAiBlqB,CAAQ,KACpC,CAACA,EACJ,KAF8BkqB,CAClB,AACN,AAAI7f,EADI,CkByGA,ElBxGC,CAAC,iFAMZkB,EAASvL,CkBwGC,GlBxGY,CAACuL,EAASvL,EAASmK,SAAS,CAAC,EAAE,KACnD,AAAIE,MAAAA,sJAAK7I,MAAA,CAA2J+J,EAASvL,GAAY,GAAb,EAAS,CAAC,kBAA2B,CAAGkP,MAAM,CAACkb,IAAI,CAACpqB,GAAUqqB,IAAI,CAAC,AAAP,CAAC,GAAU,CAAC,CAAG,IAAI,CAAG,IAAI,CAAGC,EAAOtqB,GAAY,CAAb,GAAiB,CAAR,AAAWA,CAAV,CAAkB,IAAG,CAAC,CAOnT,AAP+S,IAOzSsqB,EAAS,SAATA,AAAS1C,CAAC,KAAJ0C,IAAIE,EAAW5C,CAAC,CAAA,CyCiKT,CzCpIZ,SAASjnB,EAAsBI,CAAO,CAAEf,CAAQ,EAAE,AAExD,CyCoKsB,EzCpKtB,GADW,IAAIG,EAASH,EADYW,AACJ,CAAC,CACpBqN,EADU,QACA,CAACjN,OAAO,CAAC,EAAE,AAC1Bf,EAAS6F,CkB0GC,KlB1GF,aAAoB,CAAC9E,EkB0GE,ClB1GOgF,QkB0GQ,UlB1GU,CAAC,CAAC,AAElE,OAAM,AAAIsE,KAAK,CAAA,oBAAA7I,MAAA,CAAqBT,IAG9B,GAHqC,CAAE,CAAC,IAG/B8pB,EAAmB9pB,CAAO,CAAEf,CAAQ,EAAE,AAGrD,OAAOA,EkB0GC,AlB1GQmK,EAHiB0gB,OAGR,CAAA,cAAe,CAAC9pB,EkB0GC,CAAC,CAAC,GlB1GI,CAAC,OAG9Bf,CAAQ,EAAE,AAC7B,IAAA,EAAoBA,EAAZ+qB,MAAoB,CAAb,CACQ,UAAnB,AAA6B,GyCqK1B,IzCrKIA,OACN,CAACzH,EAAE,CAAe,AAAZyH,CAAa,MAAN,GACb,CAAChZ,EAAE,CAAe,CAAC,CkB0GZ,ElB1GDgZ,CkB0GC,KlBzGP,CAACE,EAAAA,CAAiB,CAAC,GAAbF,MkB0GH,AlBzGH,CAAA,AADa,EACb,CAAkB,CAAC,GAAbA,GAELA,EAEMI,AAAyB,CAAC,CAJpB,AAIqB,EAAE,CAF5B,EAAE,AAEI,AAACJ,OAAO,EAAEK,EAAE,AAC7B,C6ByE8B,A7B1EA,GAC1B,CAACrZ,EAAE,EAAG,EACyB,CAAC,CADtB,AACuB,EAAE,CAA7BoZ,EAAQJ,MkB2G+B,ClB3GxB,EAAEO,EAAE,CAAC,IAC1B,CAACL,EAAE,CAAG,IAAI,IAETO,EAAE,EAAG,IAAI,GANTlI,A6BgFW,E7BhFT,EAAG,CASb,EAEA,CAXiB,G6B0EI,EnB1kBa,SAAC/gB,CAAS,EAAA,MAAA,KAAAf,MAAAA,CAAAA,EAAAA,QAAAA,MAAAA,CAA6Be,CMKpB,CAAA,4BNoBH,CZHC,6DYmC3C2N,SAsCU,iBAtCgBC,UAwCxBiF,gBAAgB,GAAG,GACnBC,MAtCF3E,EACAR,GA7C0B,A8BkCJ,K9BW8B,CAAC,GACrDS,UAoCgC,GArCP,AAqCU,CArCTR,EAsCxBmF,EArCgB,cAIvBpF,GAiC0B,GAAG,CAjCuB,CAAC,CAkC9CqF,EAjCP5E,YAiCqB,CA9BrBT,CAJyB,CAACoB,GACR,EAG2B,CAAC,GAAG,GAAG,YAA1BO,IAIWnB,EAChCR,QAAkD,CAAC,GACxDS,IAEmBqC,GACf,KAL2D,CAA1DR,AACyB,CAACC,EAIhB/B,CvCI6B,CuCHxCR,AAJc,OAIsC,CAAC,GACrDS,cADyB,CAACW,GACR,W+B/DA,QCcjBxO,CAFP,CDZwB,UCiBvBkD,AAJ0B,AACR,EAIlBlD,CAJqB,CADS,AAM/B,EALyB,CAAxB,CAKG,CAJJ,CADI,IAIS,EAHN,CAEW,EADlB,GAAG,EAgBGkJ,eAEChG,QACAlD,CAFP,KAAK,GACJ,GAAG,AAAuB,AACR,CAGlB,EAHqB,CADS,AAI3B,CAAC,CAHoB,CAAxB,EACD,AAWsC0C,CAZlC,OACI,GACR,GAAG,UAGG,CAAA,qBAiBL,EO5B8C,OPxByC,iBtD7BtB,KAAA,GsD2ElE,6Mf1DA,IAAA,wBAGU,QACA,QACA,QACA,gDAMA,QACA,wEASA,QACA,CjD8BV,mBiD5Be,wBA4ByB5C,KAAA,0qBAAhBgD,EAAOO,KAAK,CAAC,KAAG,CAAA,CAAAvD,EAAAC,GAAA,CAAA,CAAAgC,IAAA,EAAE,kBAxBlB,QA0BZ,AACAkT,C7BoBC,yI6CxE2BnV,CzDCb,CgCQ8C,orByBTrC,CAAA,KAAI,CAAA,CAAAA,EAAAC,C1DMA,E0DNA,CAAA,CAAAgC,GvCIgE,CuCJhE,EAAE,GvCIqE,CAAC,UuCJ5F,OACiB6D,EAAWlC,IAAW,EAAE,GVRuC,OUwB9F,E7CnB+I,CAAC,M6CmBhJ,GAAmCkC,CAAS,CAAA,CAAsB,CAAEoE,CAAa,CZMD,CYNG,GAEvE,QAAA,+BAgBD,+BAOV+D,GAAAA,uH1EhEgD,CAAA,CAAA,CAAA,CAAA,oBA8BftQ,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAuC,CwBKG,CAAC,AxBLF,KwEJ3D,MCYE,kDzECQkC,+BAS4C+K,eAAAA,sFAWzC,MAG1B4B,CiEfJ,CAAA,EjEe6CrO,EAAAA,SAAmBf,eAGnC,CAAA,gBAObgR,CiBWE,SqBhFa,CAAA,CAAA,qsBAGbpO,EAAAC,CEEoD,EAAA,EAAA,IFFpD,EAAA,kBACM,iErB4EN,EjBX4BuO,EAAY5D,eAAAA,GAAAA,OAa1D,GAAI/K,GAAQ,CAAA,WAAY,C8BPJ,8B9BqBFyT,CAAAA,CAAAA,EAAAA,QAEvB,IAAuBK,eAAe,C6CSD,E7CLhBA,CgBGC,CmCtBA,anDmBc,CAIfL,EAAAA,MAAuB,CAAG,CAAC,CAAC,CAAGK,C6CSG,Y7CJhDL,EAL4D,AAK5DA,OAAwB,CAACK,C4DHF,C5DGiB,A6CYb,C2BoKlB,AxEhLgC,GAAA,EAAS,cAAgB,kBAjHzChW,EAAAA,EAAAA,KAAAA,EAAAA,Y8D8DjBmP,GAAAA,CAAAA,CAAAA,CAAwC,CAAE1P,CAAQ,EAAE,+CvC7DD,2CAIL,CAAA,2KrBA7D,CsBCsB,iBtBAtB,QACA,+BAKqC8B,C4BhBJ,CAAA,C5BgBkB,CAAA,CAAU,4CASd,CqDrBE,AQKC,AbAA,oChDsBff,OAAAA,CAASe,EAAMiE,kBAAAA,qCAEoB,CCFA,UDQxB6B,qBAAAA,KAA0B,CyCS1D,AnBf8D,CJNlB,mBlBiBJ5H,WAAW,E6CKK,e7CAA,EAAE,EAAE,QAA5B,UAAUyB,MuCdS,CvCcF,CAAC,CAAC,wBAkBxClB,EAAAA,SAAAA,WAAqC,G8D3BC,CAAC,ArEyB1C,CAAN,UOMR,qBAGqCqC,IAA7C0B,C+D3BoB,A/D2ByB,qqBAA1BwK,G6CMoC,C7CNV,CAAA,CAAAlM,EAAAC,GAAA,CAAA,CAAAgC,IAAA,EAAE,qBACtBtE,C8D5BJ,A9C4BM,ChBAckC,EAAMzC,eAMzC,SAAA,GAAA,CAA2C,CAAEyC,CAAAA,CAAMzC,CAAQ,EAAE,cACnDyC,CgE3BA,GAAA,ChE2BKA,EAAAA,sCAWoC,CAAC,EAAE,CAAtD+K,eAAe,CAAC,A2CR2B,EAAA,OAAA,CAAA,EAAA,M3CQI,CAAC,QAGf/K,EAAAA,OAAAA,QJ7FlC1C,GAAAA,OAAAA,KAAAA,EAAAA,sBAEkDS,CAAAA,CAAaR,CAAAA,6CAMhCe,EAAAA,OAC9BsB,EAAmB,IAAA,OAAA,EAAA,SAAoC,OAC5C,YAAA,CAAA,+BAImC,CAAA,EAAA,CAAIgC,MAAAA,CAAAA,mBAMf,cAAQ6B,C8CFC,AEDE,AQHlD,CxDM6D,EAAE,CAAA,MAAO,CAAG,CoERzC,ApEQ0C,CyDa1D,CzDb4D,mCuDVLxC,CAAM,CAAA,CAAU,gDAC5B,GAAA,6DAI6B,CEFtF,AFEuF,CAAC,CAAG,aACxD,CAAA,oCAqBW,GAAKwH,CAAW,CAACC,EAAoB,IgBOb,EAAoB,+BhBN9CO,6CAGR,YAKtBR,CAAAA,CAAY,EAAC,cAekB,CAAC,EAAE,aACQ7G,MAAM,CAAC,OAIjD6G,CAAW,CAAA,EAAA,gBAU6BlG,GZII,IYJG,CAACkG,CAAW,CAAC,EAAA,EACrEwH,EAAgCxB,KAAAA,CAAM,EAAA,KAOblR,EAASkU,CxBLyB,CAAC,CAAC,UwBKd,CAAC1C,cAAc,CAAC,CAAC,EAAE,CACvEA,EAAAA,EAAAA,aAAuC,CAAA,cAAe,EAAC,CAAC,QAGxCtG,CAAW,CAAC,EAAA,gEASvB,uIjD/F4D,CAAA,CAAA,oDASrE5G,IAAAA,sqBAAAA,GAAAA,CAAAA,CAAAA,EAA+BzB,C4DVqD,C9CmBC,CfPC+B,ECFvDC,GKDS,CAAA,EAAA,SLCtB7C,KAAAA,yBACW,CAAA,4BAU+B,CAAC,EAAE,EgBEQ,0EhBIKhC,EAAAA,QAAiB,CoEe1E,AOpBlB,A3EK6F,WkBzBhF,CNLC,ANAA,AGAA,AIAA,ANAA,AGAA,ACAA,CTMG,OAAA,GAAA,CAAA,CAAA,CAAA,0CgBSiB+D,6BAAAA,CAAAA,kBAMC,kBAGF6C,EAAqB,gDjBVJ,CmCAN,A1CEM,AiBD3C,CVDoD,CAAA,CAAU,QAkER,SApD7DlD,EACA1D,CuDDyF,CAAC,CvDE1F,EALWuH,EAAAA,CAKZ,CAAC,SALW,CAAA,EAAA,EAAA,cAAA,cAuD8BmM,IAAoB,EA/CdnT,KAkD5CkK,GAAAA,EAAsCzK,CAH2CA,EA/CrBA,CA+CF,EAGX4H,GAH0C,EAAE,GA/CpB,CmEjBtD,A7BiCqD,YtCkCvBA,KACjD6C,EAAD,CAAiB8J,EAAqBvU,EAAS4H,MAAD,EAA9B,OAAoB,MAAgC,CAAC,EAAC,CAAC,EAAE,mCA7C3B,CAExC7G,SAAS,eAC2C,CAACP,WAAW,GAAI,2BAEvER,gBA2DqD,CAAEe,CAAAA,CAAAA,CAAiB,cAClCA,CwCgBG,CAAA,iExCRpC,IAxDiCR,EAAgBQ,EAAAA,WAAoB,sDAOrD8O,eF/CzBnM,CAAM,CACN3C,CAAO,CACP+D,CAAc,CACdC,CAAAA,CACA/E,CAAQ,kBAG4B8E,EAAgB9E,GAAAA,KAGzCgF,MAAAA,OAAAA,CAAAA,GAAAA,QACK7E,EAAAA,EAAAA,EACN0F,mBAAmB,CAAA,GAAA,EAAA,iBAEeE,EAAAA,MAAAA,EAK1CO,EAAAA,GAAAA,EAAAA,EAAAA,GAAAA,cAAAA,CAWD,EAAA,GAHC5C,EACA3C,EACAf,GUvByB,AVmBzBO,KAKD,SALCA,iCAiBgE,CAAC,CAAC,CAAC,EAClEkK,GAAgBC,EAA+B1K,EAAS4H,MAAD,eAAsB,CAAC,CAAC,CAAC,EAGxB,UAAU,EAClE,CADDxH,GAAkBG,EAAgBQ,EAASf,KAAF,GAAU,CAAC,CAApB,AAAf,6DkEtCb,CAAA,CAAA,CAAA,CAAA,CAGN+E,CAAkB,CAClB/E,CAAQ,EACP,IACI0D,0CAgBuDoB,E5BTG,E4BSiC9E,QAAQ,CAAC,mCAYlD,UAKnD0D,EACA3C,EACA+D,EAFM,AAGNC,EACA/E,CAHO,EAIP,EAAA,EAAA,CAAD,CAAC,CAHc,MACI,SAElB,CAAA,EAAA,EAPA0D,MAAM,YASC,6EAENqC,CGsKiB,gCHtJV,OAAF,CAAC,CAAC,CAAA,+BAeJ,OjDhGIlE,GiDiG+BsC,CAAC,EAAA,EAAA,MAAiB,EAAE,OACnCT,CxCrByC,CAAA,KAAA,CwCqB5B,EAAA,sBACb,CAAA,gCACGqC,C5DhBE,4B4DkBJ+P,CdAA,CAAC,AcAuB,uBAAA,gDAClD/P,+BAOI,CAAA,cOtFiDpD,CAAAA,8BACfnB,MAAAA,CAAKwE,EAAiB,MAAM,EJA9C,CIAiD,CJCxE0D,AIDyE,CAAE,KAAKC,IAAI,CAAC,CAAC,KnD3B1E3I,CJFmB,AMJpB,AdEA,AaFA,C/BSA,CAAA,K6EyBe,EAC1B4I,gBAAgB,C/CzBV,C+C0BNC,A/C1BM/J,CAAAA,wBIkBmJ,CAAC,E2CQ9H,EAC5BgK,G/CzBuB,CAAA,EAAA,EAAA,kBAAA,C+CyBI,A/CzBJ,E+C0BvBC,A/C1BuB,WAAA,CAAA,EAAA,O+C0BF,C/C1BE,C+C2BvBC,mBAAmB,EACnBC,IAAI,QACE,S/CpBF5G,EAAOC,mBAAmB,CAAC,C+CoBO,A/CpBN,kCAe4B,CAAC,EACvDD,EAAOA,MAAM,CAAC,CAAC,CAACf,OAAO,CAACtB,GAAqBqC,EsBM2C,AtBNpCoE,IAAD,wBAA6B,CAAC,CAAC,CAAC,CACnFpE,EAAOA,IAAD,EAAO,CAAC,CAEpB,CAAC,gBAIMV,SmBjC0B,OnB8BL,+DoB7BVA,CAAAA,CAAAA,CAA0B,CAAE3C,CPHvB,AOG+B,4BAA0BA,EAAAA,GAAY,IAAA,MAAA,CAAKoD,iBA4GpEM,CAAM,CAAEmM,CAAAA,CAAauH,CAAQ,CAAA,CAAU,CAAErV,CAAO,CxChBC,CwCgBC,MAChEwV,AAgBT,SAASA,AAAsBqB,CAAAA,CAAAA,CAAgC,UA2E7DgB,EAnEDA,EAmEoCsE,EAnEO,EAmET,OAnEU7a,CAAM,AAmEF,EAnEO,AAmEL,CIrBH,yBJ1CrB,GAAGgB,MAAM,CAAG,CAAC,CAAA,SAEJ8V,CGDC,oBHCoB,CAAC,CAAC,CAAA,EAAQA,qBAAqB,CAAC,CAAC,CAAC9V,MAAM,CAAG,CAAC,CAAC,IAEvF4R,GAAwC,GAAxCA,MAAAA,CAAAA,YAKpB,OAAOxL,GAAgBlK,ChBlCA,CAAA,EgBkCuBkB,OAAO,CAAC,CAAC,CAAC,QAwD9C4c,EAASha,ChBxCJ,KgBwCU,EAAE,OACF,CAACF,EAAAA,GAAK,OACf,CAACA,CAAC,ArBJE,CqBID,OA/FiBnE,CIVD,CjDCC,OAAA,G6CSoB0D,eAKxDA,EACAL,EAAAA,CAECyU,uBAAAA,kBAAAA,8EACiF,CAAC,CAAC,GAAK/V,IAAsC,GAA/B,CAAIA,CAAiC,CAAzByP,EAA4B,GAA7B,EAAkC,GAAG,IAAtB,AAA0B,4BAP7I9N,quC0BzGiCnD,CAAAA,CAAgBP,CxBuBa,AwBvBL,2FAGzD,UAAA,WAD2B,sBAGS,UAAU,2EAOP,CAAA,gBAAiB,6CAG/BuL,EAAShL,EAAAA,SAAAA,EAAAA,yBAGX4L,eACZ,qGAEuEhH,C1CK7B,M0CLwCA,EAAF,AAAanF,G9BOlB,E8BPlEkN,CrEqBA,CqErBkF,AAApGnH,CAA8G,CAAC,gBAA/GA,MAAAA,EAAoBrC,MAAM,cAI3B,MAAA,qEAMa,wIAoGvB,SAASga,AAAgCC,CAA2B,CAAEC,CAAY,EAAE,CXyBjB,GWxBlE,EACI7X,UAE0B6X,0BANmB,CAAC5b,AAShC2b,IACjB5c,EAAU4c,IACD9X,iBAFmC,CAAC,CAEpCA,CAFsC,AAElB9E,OAAO,CAAC,iBACW,QAW1C,8BAENgF,EAEF,IAjHG/F,GACA,E9BQ+B,EAAA,C8BRhC,CAAC,E9BQ+B,G8BXjB,CAAA,EAAoBiR,EAAAA,kBAAAA,cAIpBlQ,OACVgF,kBAAAA,CAAAA,MACD,CAAA,cAAe,ClBYA,AEYK,AgBxBFxF,GrD4BE,eqD3BJ,IAAA,CAAA,kBAAuB,ChBwBC,AgBxBE,EjBwB/C,EiBxBmD,CAAA,cAAA,0CAMlDyT,0CAGWvD,C1COsB,qC0CJlC,SAAAuE,Q/BrEgE,EAAA,gB+BsEtDjU,C9B0BI,A4BED,ArBVG,MPQF,C8BzBL,KAAK,CAAA,OAAQ,KAGpB,IAAA,CAAA,I/B1E8D,c+B0E9D,C/B1E8D,E+B0E9D,IACI,CAACR,cAAc,U/B3E2C,E+B4E9D,IAAI,CAACwV,WAAW,CAAC,CAClB,CAAC,GFwBwG,2B7BnG3C,CAAA,YAIhC,CAAA,SAAA,CAAS,QAKiB,eAAA,OAAS,EAAE/V,CAAX,GAJWA,oEAOf,CAACO,C7BLrD,C6BKoE8D,MAAAA,GAAW,C1BDE,A0BCD,CrCcxE,CqCd0E,GAVzE,8C+B6EFqL,C1CDM,CFhB0B,OmCzDK5N,CAAAA,CAAOC,CDCrD,ApDJC,AMKY,AXJZ,CAAA,C0DEqE,gCAM7C/B,wCAIhB,MAAA,2DAEqB,CAAA,EAAA,kBAAyB,wCAKpC,CAAA,oBACee,OAAAA,wCACf,CAAqBe,EAAMf,EUF7C0I,KVEoD,wEAKvCY,MAAAA,8DAEwBtE,kBAAkB,sCAMxB6G,KAAK,CjCLI,CiCKA9K,EAAMvB,C9CAG,a8CAW,CAAEuB,EAAMf,OAAO,CAAEf,8BAQnC+N,0BAAAA,CAA2BjM,CkBCE,CAAC,AlBDGiE,CzDCA,CAAC,CyDDF,eAAmB,CAAC,EAAE,MAGvF,iHS+BgB,IAAI,CAAA,KAAQ,+DSpDgB/F,QAAQ,EAC9D,CAD6C+B,CTRD,CAgEjB,KSxDyB,ATwDjB,CblBxB,SsBhCK5B,uBAAAA,2BAEoBY,OAAAA,CAASe,CzBgB2B,AiB8GnC,GD9EV,CC8EU,kBAAA,gBQzHyBqD,kCAKvD5E,EAAAA,EAAAA,CAA8BuB,KAAMvB,C7BhBF,a6BgBgB,CAAGuB,KAAM8K,AAAD,KAACA,CAC1B5M,EAAAA,qBAAAA,mCTwCvC,kBACkB,EC0MY,ED1MRG,EAAS,GQPdiW,CROkB,CAACL,WAAAA,8BACO,CAAC,IAAI,CAAA,kBAAmB,CAAC,wBAGpE,SAAAsD,AAAQP,CAAW,EAClB,OAAO,IAAI,CAACpV,MAAM,GAAA,EAAiBA,MAAM,CXqBA,CAAC,IWrBO,CAAA,GAAI,GAAKoV,EAAYrI,GAAG,CPCzB,gCOiBjDwK,C1ByCoBD,Q0BxCZE,GAAc,IAAI,CAAE,YAAkB,CAACnF,ItB4B/B,AJgBCsF,OAAAA,mC0BzCVhY,CAAM,CzC6BgB,AyC7BdtB,CAAO,ChBoCgB,CgBpCd,C1BmDqB,AhB1CF,M0CRnCyZ,S1BhG4B1Z,CAAAA,CAAOuB,CAAAA,CAAAA,CAAAA,CAAiBrD,CAAQ,SAUzDoL,SA+JHA,EACC,IAAA,QAAAmE,EAAAI,E0B7LsB,EhB4Kf,EgB5KeoM,I1B6LtB1X,G0B7LsB,G1B6LtB,CADQmZ,Ce7Ba,CAAA,Af6BNlO,KAAA,CAAAC,GAAAC,CAAA,AFHmC,CEGnC,EAAAA,EAAAD,EAAA,AAAAC,EAAA,EAAA,GAAA,cAAA,MAEjBrL,EAAAA,EAAYE,MAAAA,EAAQ,QACZ,EAAE,EMxCD,KNyCH8U,GAAG,EAAIqE,CAAO,CAACrZ,CfnBF,AemBG,CAAC,CAAE,CACtB,CAAC,CAAC,AULA,CVKC,CAACgV,EAAI,CAAD,A0BrDK,A1BqDDqE,CAAO,CAAA,EAAG,CAACrE,EFFA,AEEG,CAAA,WAK5BqE,CAAO,CAAA,EAAG,EAzKNpS,CAAAA,EAAAA,GAAAA,8CAOmC,iBAErB,CAACtJ,EAAAA,OAAa,CAAC,OAC5BuI,MAAAA,oBAAAA,MAAAA,CAA0BvI,CmBhBK,CAAA,OAAA,yEnBuB/BA,EAAAA,KAAAA,EAAAA,wBAFiB,CAAA,EAAOiE,kBAAAA,MA2G5BiV,IAAiC,EAAYvE,EAA7CuE,EAA8BvK,EAAG,CAAA,GAAjCuK,IAAiC,AAAU,CAAiB,EAAE,OAvGlCjV,kBAAAA,SAEH,CmBpBL,EAAA,cnBoB4B,CAAA,EAAA,KAAc,8CAU/C,EA2FfiV,IAxFG5K,GAAqB7P,EIIM,A/BOF,A2BXYuB,EAAM+N,WAAW,CAAE,WAAA,EAAsB9N,KAC3DD,EADkE,AjBevE,AiBdW2O,CAD6D,EAC7DA,CAuFK,EAvFAzQ,IAAU+B,EAAAA,eAAuB,CAAC,EAwFpE0O,EAAAA,AJ9F0E,OI8FlB9N,IrBLG,0DqB3ElB,KAAM,gBAAiB3C,EAAU+B,GA+EzEiZ,IA/EgF,CAAC,GJCrD,oBIAH,CAAItX,OACD+M,GAAG,CA6EE,AsBnGjC,EtBsBiCzQ,CdrBf+N,GcqByBhM,EAAAA,eAAAA,GA8E5C0O,EAAAA,IAA4CzQ,QAAQ,CAAC,wBA1E1D,CAAW+F,GAAkBvE,C3COY,KAAA,CAAA,qBgE9CrC,oBrB2CG,CAAA,GAAA,MAAwB,CAAGjB,OAC5BuB,EAAM2O,GAAAA,iCqB3CD,MAGK,KAAK,KAAV,6FAGb,CAAA,GAAoBjP,MAAA,CAAA,EAAA,QAAA,EAAyB,iBrB6CvC,CAACO,EAAAA,WAAAA,EAAqB,aA4DpBiZ,EAIT,SAAA,CACe,CACdnL,CAAW,CACX9J,CAAkB,CAClBuQ,CAAW,CACXtW,CAAQ,EACP,AAGD,GAF+BW,AAE/B,EAFqD2V,EAAatW,EAASA,MAAD,EAAS,CAAC,GAErD+F,EAAoB,CAClD,CM1CC,OAAA,EAAA,GAAA,EN0C4D8J,EAAa,ADjKjB7P,Ib+GQ,CAAC,Ga/GD,ECiKmB,CAAEA,SAG3D,ErBTE,CqBSC,EAAE,KACH,IAAM2C,EAW5BA,CIlCmC,eJoCCwC,EAA1BwX,AdlDqB,UckDgB3c,EAASA,QAAQ,CAAC,qBDhLtC,CCgLjB2c,EDhL2Bnc,CmBPC,wGlBwL/B,OACJwc,EAAAA,KAASxb,MAAA,CAAIuE,EAAkB,KAAAvE,MAAA,CAAI4O,GAAqB7P,CAAzB,CAAyC,IAAI,CAAE,OAAR,GAAf,KAAsC,CAAEP,QAAQ,CAAC,AAvF1G6P,WAAAA,CACN9J,EACAhE,EAAQuU,KAAD,MAAY,CACnBtW,KAEoC8B,EAAAA,CADrC,CAAC,CACoCA,CAiDE,EAjDS9B,IAAU+B,EAAQ0U,EAAV,GAAS,MhCUjC,IgCViD,CAAC,AAkD7EhG,EAAAA,EAAAA,EAAuCA,ChCvClC,EgCuCqC,kFA/ChCjP,MAAA,CAA2D6B,EAAM,IAAA,CAAG,CAAC,E0BWpF,IAAI,CACJA,EAAAA,EACOE,ChBiCuC,EgBjCvCA,GAAAA,CAAAA,EAAAA,GAAe,CAAA,EAAA,C/CqCR,A+CrCUwO,GAAAA,CAAAA,YACxB,IAAI,CAACgE,WAAW,CAAC,AzClIcgG,MyCoIhC5C,IAAAA,uBAED,SAAAG,CAAsB,qBACF,CpBSF,ArBmBK,A8BNrB,UWtB8BvX,K/C0Cb,E+C1CoB,CAAC,8BAGxC,SAAAwa,AAAoBxa,CAAAA,SACZ,IAAI,CAACsB,CzC6BI,KAAA,CyC7BG,CXwBwC,Af4BrC,e0BpDctB,C1CUE,kC0CPzB,EAAE,OACR,IAAI,CAACsB,MAAM,CAAC,SAAS,CAAEtB,GAC9B,IXuBmC,AWxBE,CAAC,4OAiCxC,GAA2B,SAAS,8BxBjK0B,mBAM7DmB,QAEMJ,EAAgB,EtBFZ,EsBGVI,CAT+F,QAO/F,MACA,CAHAD,AtBAuB,AsB6BgBuC,CQIL,AiBzBlC2D,MzBHA,MACA,MAY8C,YAAA,6CyBV9CA,KzBuBYE,GAAAA,WAR2E,oBvBVjD7D,OAAAA,IAAAA,EAA0B1C,EAAe,eAK9B,KAAA,m7EEpCe9C,mBuCKAuF,yEAAAA,wNAAAA,iJAAAA,yDAAAA,gNAAAA,cAAAA,+KAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAtCkB,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,8FAeK,mBAgB1B,GAAA,EAAA,gEASejF,MAAAA,CAA6BuN,iCAlBpCnD,u1B5CzBQ9K,EAAAA,OAAAA,CAAAA,EAAAA,EAAAA,QAAAA,QkBAgC,EAAEd,gDAEyC,0DAQ/CA,IfoDd+B,CAAAA,CAAS/B,CAAQ,EAAE,QAGjC,CAAC,gCAKSA,EAASgO,UAAU,CAACjM,EAAQ+C,cAAc,CAAC,CAAA,mBAE9DoE,CtBMG,CAAA,mDsBJC1H,MAAA,CAAqBO,EAAQ+C,cAAc,CAAE,CAAC,OA0LtCvE,cAAc,GA/B9Bwf,CAAe,CgDmKtB,AhDnKwBhO,CAAE,CAAE8L,CAAO,EAAE,MAMzBoC,UYhO+E,CPZC,AOYDngB,CZDG,AYCH,QACjEA,EAA3BoC,CtBTyCC,AbID,AqCLC,0BFUd,aW8CmC,UACd6C,OAAO,CAAA,6BAM7BuH,EAAsBmB,GAAuBrJ,CajBE,EIjB1B,GjBkC8B,wCAM1B,CAAA,IAAM6J,K7CRE,W6CUjC,C9BfA,AuDkLrB,2BzBhKiCA,C9BfF,W8B0Bf,ChBjCH,AwCCkB,KxBgCT,IAIC,GAAG,CX5ENxL,cWiFoBkN,EpBrCE,EoBqCE,CAAClN,CJDE,GIEnDyQ,GAA4BvD,IAAI,CAAClN,EAAY,CAAC,uCX5EpB,uCASF,8BAS0B,CAAA,YAKnB,IACiC2B,MAAM,CAE7C,CmClBE,AnCkBD,wBAGL6H,EAAcE,CevBE,GJ+BIC,KAAAA,CAAAA,EXR2BE,mBWDzDjC,gCXSoC,CAAC,EAAA,EAAA,MAQnB,aZyKuC3E,EAAM,CAC1EzD,CADwE,2BAC3C,SAA7BA,AAA8ByD,CAAI,KAAKzD,EArCnCyD,IAqCmCzD,EArC7B,MAGI,CqBGC,ErBHE8b,EAAyB,G2BpCzC,C3BsEiFjM,EAAE,CAAC,O2BtEpF,E3BsCU7I,EgDgKuC,ChDjKhC,AgDiKgC,IrBtMlC,kB3B0CD,IA4B0D2U,OAAO,EAAzC3b,EAxBxC,IAAA,EAwBwCA,AAxBvByD,EAAKsQ,CmBGJ,C6BgKE,IhDnKQ,CAAC2I,WAC7B,EAAe,CAAC,QAuBwB1c,AApBxC,EAEEgP,KAAAA,CAAMkO,GAEN9c,OAAAA,CAAAA,GAAwC,EAAE,CAAC,SAmBxCoB,EACJ,MADY,AACL,CAAA,MAEH8I,ciDtJJsD,GAAAA,IAA+B,CjDsJPpM,AiDtJQA,E3CxCmC,IN8LrC,CAAC,CgDhMjB,MCoDyBkM,IAAI,CjD6IdlM,GACrB,CAAEoP,CmBME,CnBPuB,AKlCF,CLkCG,EAAE,CACrB,CgDjMM,QAIJ,KhD+LX,CAAC,CAIV,CKhCC,GLgCKgO,EAAwBC,GoCtBH,gEzCxNoBtc,8DAOvCiC,CAAAA,CAAAA,EAAAA,QKuOuChD,KK5BtC,CL4B4C,WACtB,CAGxB,UACR,MAjL+EqO,EAAE,CAAEhQ,EfR/C,E0Ddc,AM8CE,A9CnDN,AlBmBV,KeQ8D,CAAC,CAAA,EAAA,EAA1F2B,MAAM,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAA6BoP,KAAAA,KAGtCM,EAAAA,mCAGI,EMRC,AdWI,EAAA,EAAA,wDQgMf,SAASxJ,AACRwJ,CAAoB,CACpBtO,CAAc,CACdC,CAAkB,CAClB/E,CAAQ,EACP,IAWD,GAhBwB4J,CAOuCsY,GAC9DE,GAA2BhP,QOzEJqI,AP0EvBtW,CO1EuB,CP2EvBL,CO3E0B,CP4E1BC,EACA/E,EAASA,CAHA,C+BYwBmiB,E/Bbc,CAAC,CAIxC,EAFM,AAGf,CAAC,CANKhH,EAAAA,EAIa,AAJbA,wBAAwB,CAAA,EAAoBjO,EAAlBnH,IKZD,AAAoB,CAAC,aLYF,CAAA,EAAQmH,EAANxJ,MAAM,CAa1D,GAAA,IACUmC,CO7EC,eP4Ea,EKhBA,AE7DC,CP8EI,CAACE,OKhBK,CAAC,ALoB/B,GAAIrC,EOjFkC,GPiFvBoB,IAAkBC,EKhBhB,AL8BjB,MAAO,CAAC,SAd2C,CAAC,EAAE,WAC9B,CAACD,EAAgBC,SAElCD,CKlB4B,ALkB5BA,EAFgC,AAW3CiB,EAAqBhB,GAAsBpE,EAAsBmE,EAAgB9E,EAASA,MAAD,EAAS,CAAC,CAIpG,GAAA,CAAK0D,MAAM,EAAE,AACL,gBoC5BkB,GACC,OpC4BzByX,SyBnBuC,YzBoBvCpV,GAIF,IAAA,EAAA,GAICqc,GAA2B1e,CwCjEiD,CAAC,CxCkE7E3C,EACAf,CAFiC,CAAC,CAGlC,EAFO,AAJOuH,EAAdhH,CAMD,CAAC,AwCnEmB,YxC6DL,CAAA,EACHgH,C+BUC,C/BVZsI,WAAW,CAiBZ,EAAA,GAA6C9J,EAjBjC,AAiBqD,gBAChExF,EACAP,SAAAA,CACD,CAAC,EAaD,SgDpNqB,EhDyMpBe,EAAU6iB,EAEW,EKlBT,ILeK,CAGW,CAAxBA,COhGL,CP8FuB,AO7FRpW,CAAA,EAAG,APoGP3H,YyBzBa,OzByBM,CAAC9E,IAIxB,GAJ+B,CAAC,OAMtCgF,mBAAAA,2BACAoV,iBACA5a,EACAsP,YAAAA,AADc,EAGhB,EA/QEuD,EACArR,EAAQ+C,cAAc,CACtB/C,EAAQgD,KAAD,aAAmB,CAC1B/E,GACA,EAAA,EAAA,CAAD,CAAC,KAAA,CAAA,EATciV,EAAAA,cAAAA,CAAAA,EAAAA,EAAAA,kBACI,CAAA,EAAA,EAAA,wBAAA,CAAA,EAAA,EAElBpF,WAAW,KAQP7P,EAAAA,wBAAiC,CAAC,EAAG,CwC7BL,CAAC,ExC8BjC+B,CuDnCJ,CvDmCYgQ,EAAE,WACH7I,EAAW,gCAMlB3I,GAAAA,EAAiC8D,GnBZI8S,GAAAA,GAAAA,MmBe7BpF,EAAE,OACP,IAAA,EAAA,oBAGC,OAYU1N,MAAAA,CJlIPxD,EIkIgBA,CAAoB,KuDlCb8Y,CAAA,AvDmCtB5H,EAAE,AuDnCuB,+BvDuC9B,CAAA,EAGR,GAAA,EAAYA,EAAE,CAAA,cAEZhM,EACAxF,EAAAA,EACSP,C2B7B4D,O3B8BtE,kBACa,CIME,IJLQe,CAAAA,EAEvB,IACC+X,EAAAA,OADgB,IAChBA,CAA0BjJ,CgD8JnB,I3C5LyB,C2C4LzB,EhD5JC,CACIY,CgD4KD,EAAA,CAAA,CAAA,EhD1KZqI,EAAAA,0BAAsC,CAAGqC,CqBKE,CrBJpCrC,QAMM,CAAC/W,EAAAA,QAAgB,GAAG/B,EAASyb,GgD6KF,qBhD7K0B,CAAC,CAAC,GAAG1a,CAAAA,GAAAA,GACvDR,EAAgBP,EAAS4H,MAAD,IAAV,WAAgC,CAAC,CAAC,CAAC,GACjE,KAEI7F,AAFC,EAEDA,QAAgB,EAAE,6BAQtBgE,EACA8J,YAAAA,EACAsM,MAAAA,aACUA,OACY,IAArBpa,AAAyB,EAAjBua,QAAQ,EAChBtc,EAASwN,eAAe,CAAC,CAAC,EAC1BkC,GAAiBnP,EAAgBQ,EAASf,EAAQ,CAAC,EAAX,CAAc,GAAtC,CAA0C,AAA3B,GAA8B,GAG9DyQ,EAFC,IAgFa1P,EA9FO,GAANyF,CAAgBjG,CA8FV,CAAkBkQ,EA9FQA,CAA1B,AA8FqB,EA9FQ,AA8FN,CAC9B,AA/FqC,WAiGnD7D,MAAAA,YAGU,CAAG6D,CwCjDyB,AxCiDzBA,EAEPjK,GAtGgD,CAAA,cEvK/BzE,GAAAA,CAAAA,EAAAA,kF3BAJ/B,GAAAA,YAAAA,UNHN,CACb,IAAO,OACP,QAAW,uBACX,MAAS,QACT,GAAM,WACN,GAAM,mBACN,GAAM,UACN,GAAM,uBACN,GAAM,cACN,GAAM,sBACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,SACN,GAAM,aACN,GAAM,YACN,GAAM,iBACN,GAAM,UACN,GAAM,YACN,GAAM,QACN,GAAM,gBACN,GAAM,aACN,GAAM,yBACN,GAAM,WACN,GAAM,aACN,GAAM,UACN,GAAM,eACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,mBACN,GAAM,UACN,GAAM,oBACN,GAAM,UACN,GAAM,mCACN,GAAM,SACN,GAAM,UACN,GAAM,SACN,GAAM,gBACN,GAAM,WACN,GAAM,UACN,GAAM,SACN,GAAM,SACN,GAAM,0BACN,GAAM,oCACN,GAAM,2BACN,GAAM,QACN,GAAM,cACN,GAAM,gBACN,GAAM,eACN,GAAM,QACN,GAAM,WACN,GAAM,QACN,GAAM,WACN,GAAM,aACN,GAAM,OACN,GAAM,aACN,GAAM,UACN,GAAM,mBACN,GAAM,SACN,GAAM,iBACN,GAAM,UACN,GAAM,WACN,GAAM,UACN,GAAM,WACN,GAAM,qBACN,GAAM,UACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,iBACN,GAAM,UACN,GAAM,QACN,GAAM,WACN,GAAM,UACN,GAAM,OACN,GAAM,mBACN,GAAM,iCACN,GAAM,gBACN,GAAM,SACN,GAAM,QACN,GAAM,iBACN,GAAM,UACN,GAAM,UACN,GAAM,gBACN,GAAM,WACN,GAAM,QACN,GAAM,YACN,GAAM,YACN,GAAM,SACN,GAAM,SACN,GAAM,aACN,GAAM,oBACN,GAAM,SACN,GAAM,+CACN,GAAM,YACN,GAAM,OACN,GAAM,gBACN,GAAM,SACN,GAAM,YACN,GAAM,oCACN,GAAM,WACN,GAAM,UACN,GAAM,QACN,GAAM,UACN,GAAM,YACN,GAAM,UACN,GAAM,SACN,GAAM,cACN,GAAM,QACN,GAAM,iCACN,GAAM,OACN,GAAM,OACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,SACN,GAAM,QACN,GAAM,QACN,GAAM,aACN,GAAM,WACN,GAAM,WACN,GAAM,UACN,GAAM,wBACN,GAAM,cACN,GAAM,cACN,GAAM,SACN,GAAM,iBACN,GAAM,aACN,GAAM,OACN,GAAM,UACN,GAAM,cACN,GAAM,gBACN,GAAM,YACN,GAAM,UACN,GAAM,UACN,GAAM,YACN,GAAM,aACN,GAAM,SACN,GAAM,QACN,GAAM,UACN,GAAM,SACN,GAAM,UACN,GAAM,aACN,GAAM,6BACN,GAAM,aACN,GAAM,mBACN,GAAM,kBACN,GAAM,OACN,GAAM,UACN,GAAM,WACN,GAAM,QACN,GAAM,2BACN,GAAM,aACN,GAAM,aACN,GAAM,aACN,GAAM,QACN,GAAM,YACN,GAAM,WACN,GAAM,SACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,UACN,GAAM,gBACN,GAAM,QACN,GAAM,iBACN,GAAM,UACN,GAAM,YACN,GAAM,cACN,GAAM,SACN,GAAM,QACN,GAAM,QACN,GAAM,OACN,GAAM,cACN,GAAM,OACN,GAAM,gBACN,GAAM,SACN,GAAM,OACN,GAAM,mBACN,GAAM,mBACN,GAAM,cACN,GAAM,WACN,GAAM,SACN,GAAM,4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","ignoreList":[0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89]}