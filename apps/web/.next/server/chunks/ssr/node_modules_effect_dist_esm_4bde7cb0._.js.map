{"version":3,"sources":["turbopack:///[project]/node_modules/effect/src/Function.ts","turbopack:///[project]/node_modules/effect/src/internal/errors.ts","turbopack:///[project]/node_modules/effect/src/Hash.ts","turbopack:///[project]/node_modules/effect/src/Utils.ts","turbopack:///[project]/node_modules/effect/src/Equal.ts","turbopack:///[project]/node_modules/effect/src/GlobalValue.ts","turbopack:///[project]/node_modules/effect/src/Predicate.ts","turbopack:///[project]/node_modules/effect/src/Equivalence.ts","turbopack:///[project]/node_modules/effect/src/internal/array.ts","turbopack:///[project]/node_modules/effect/src/Inspectable.ts","turbopack:///[project]/node_modules/effect/src/internal/version.ts","turbopack:///[project]/node_modules/effect/src/internal/effectable.ts","turbopack:///[project]/node_modules/effect/src/internal/opCodes/effect.ts","turbopack:///[project]/node_modules/effect/src/Pipeable.ts","turbopack:///[project]/node_modules/effect/src/internal/option.ts","turbopack:///[project]/node_modules/effect/src/internal/doNotation.ts","turbopack:///[project]/node_modules/effect/src/internal/either.ts","turbopack:///[project]/node_modules/effect/src/Either.ts","turbopack:///[project]/node_modules/effect/src/Option.ts","turbopack:///[project]/node_modules/effect/src/Order.ts","turbopack:///[project]/node_modules/effect/src/Iterable.ts","turbopack:///[project]/node_modules/effect/src/Tuple.ts","turbopack:///[project]/node_modules/effect/src/String.ts","turbopack:///[project]/node_modules/effect/src/Number.ts","turbopack:///[project]/node_modules/effect/src/Array.ts","turbopack:///[project]/node_modules/effect/src/Record.ts"],"sourcesContent":["/**\n * @since 2.0.0\n */\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface FunctionTypeLambda extends TypeLambda {\n  readonly type: (a: this[\"In\"]) => this[\"Target\"]\n}\n\n/**\n * Tests if a value is a `function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = (input: unknown): input is Function => typeof input === \"function\"\n\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * You can pass either the arity of the uncurried function or a predicate\n * which determines if the function is being used in a data-first or\n * data-last style.\n *\n * **Example** (Using arity to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(2, (self, that) => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using call signatures to define the overloads)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * **Example** (Using a predicate to determine data-first or data-last style)\n *\n * ```ts\n * import { dual, pipe } from \"effect/Function\"\n *\n * const sum = dual<\n *   (that: number) => (self: number) => number,\n *   (self: number, that: number) => number\n * >(\n *   (args) => args.length === 2,\n *   (self, that) => self + that\n * )\n *\n * console.log(sum(2, 3)) // 5\n * console.log(pipe(2, sum(3))) // 5\n * ```\n *\n * @since 2.0.0\n */\nexport const dual: {\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * You can pass either the arity of the uncurried function or a predicate\n   * which determines if the function is being used in a data-first or\n   * data-last style.\n   *\n   * **Example** (Using arity to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(2, (self, that) => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using call signatures to define the overloads)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using a predicate to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(\n   *   (args) => args.length === 2,\n   *   (self, that) => self + that\n   * )\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(arity: Parameters<DataFirst>[\"length\"], body: DataFirst): DataLast & DataFirst\n  /**\n   * Creates a function that can be used in a data-last (aka `pipe`able) or\n   * data-first style.\n   *\n   * The first parameter to `dual` is either the arity of the uncurried function\n   * or a predicate that determines if the function is being used in a data-first\n   * or data-last style.\n   *\n   * Using the arity is the most common use case, but there are some cases where\n   * you may want to use a predicate. For example, if you have a function that\n   * takes an optional argument, you can use a predicate to determine if the\n   * function is being used in a data-first or data-last style.\n   *\n   * You can pass either the arity of the uncurried function or a predicate\n   * which determines if the function is being used in a data-first or\n   * data-last style.\n   *\n   * **Example** (Using arity to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(2, (self, that) => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using call signatures to define the overloads)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum: {\n   *   (that: number): (self: number) => number\n   *   (self: number, that: number): number\n   * } = dual(2, (self: number, that: number): number => self + that)\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * **Example** (Using a predicate to determine data-first or data-last style)\n   *\n   * ```ts\n   * import { dual, pipe } from \"effect/Function\"\n   *\n   * const sum = dual<\n   *   (that: number) => (self: number) => number,\n   *   (self: number, that: number) => number\n   * >(\n   *   (args) => args.length === 2,\n   *   (self, that) => self + that\n   * )\n   *\n   * console.log(sum(2, 3)) // 5\n   * console.log(pipe(2, sum(3))) // 5\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <DataLast extends (...args: Array<any>) => any, DataFirst extends (...args: Array<any>) => any>(isDataFirst: (args: IArguments) => boolean, body: DataFirst): DataLast & DataFirst\n} = function(arity, body) {\n  if (typeof arity === \"function\") {\n    return function() {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments)\n      }\n      return ((self: any) => body(self, ...arguments)) as any\n    }\n  }\n\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`)\n\n    case 2:\n      return function(a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b)\n        }\n        return function(self: any) {\n          return body(self, a)\n        }\n      }\n\n    case 3:\n      return function(a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c)\n        }\n        return function(self: any) {\n          return body(self, a, b)\n        }\n      }\n\n    case 4:\n      return function(a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d)\n        }\n        return function(self: any) {\n          return body(self, a, b, c)\n        }\n      }\n\n    case 5:\n      return function(a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e)\n        }\n        return function(self: any) {\n          return body(self, a, b, c, d)\n        }\n      }\n\n    default:\n      return function() {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments)\n        }\n        const args = arguments\n        return function(self: any) {\n          return body(self, ...args)\n        }\n      }\n  }\n}\n/**\n * Apply a function to given values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const apply = <A extends ReadonlyArray<unknown>>(...a: A) => <B>(self: (...a: A) => B): B => self(...a)\n\n/**\n * A lazy argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { LazyArg, constant } from \"effect/Function\"\n *\n * const constNull: LazyArg<null> = constant(null)\n * ```\n *\n * @since 2.0.0\n */\nexport interface LazyArg<A> {\n  (): A\n}\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { FunctionN } from \"effect/Function\"\n *\n * const sum: FunctionN<[number, number], number> = (a, b) => a + b\n * ```\n *\n * @since 2.0.0\n */\nexport interface FunctionN<A extends ReadonlyArray<unknown>, B> {\n  (...args: A): B\n}\n\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const identity = <A>(a: A): A => a\n\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const satisfies = <A>() => <B extends A>(b: B) => b\n\n/**\n * Casts the result to the specified type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n * ```\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce: <A, B>(a: A) => B = identity as any\n\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */\nexport const constant = <A>(value: A): LazyArg<A> => () => value\n\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n * ```\n *\n * @since 2.0.0\n */\nexport const constTrue: LazyArg<boolean> = constant(true)\n\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const constFalse: LazyArg<boolean> = constant(false)\n\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n * ```\n *\n * @since 2.0.0\n */\nexport const constNull: LazyArg<null> = constant(null)\n\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n * ```\n *\n * @since 2.0.0\n */\nexport const constUndefined: LazyArg<undefined> = constant(undefined)\n\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n * ```\n *\n * @since 2.0.0\n */\nexport const constVoid: LazyArg<void> = constUndefined\n\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n * ```\n *\n * @since 2.0.0\n */\nexport const flip = <A extends Array<unknown>, B extends Array<unknown>, C>(\n  f: (...a: A) => (...b: B) => C\n): (...b: B) => (...a: A) => C =>\n(...b) =>\n(...a) => f(...a)(...b)\n\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n * ```\n *\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B, C>(bc: (b: B) => C): <A>(self: (a: A) => B) => (a: A) => C\n  /**\n   * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n   * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { compose } from \"effect/Function\"\n   *\n   * const increment = (n: number) => n + 1;\n   * const square = (n: number) => n * n;\n   *\n   * assert.strictEqual(compose(increment, square)(2), 9);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, C>(self: (a: A) => B, bc: (b: B) => C): (a: A) => C\n} = dual(2, <A, B, C>(ab: (a: A) => B, bc: (b: B) => C): (a: A) => C => (a) => bc(ab(a)))\n\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly useful when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = <A>(_: never): A => {\n  throw new Error(\"Called `absurd` function which should be uncallable\")\n}\n\n/**\n * Creates a   version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n * ```\n *\n * @since 2.0.0\n */\nexport const tupled = <A extends ReadonlyArray<unknown>, B>(f: (...a: A) => B): (a: A) => B => (a) => f(...a)\n\n/**\n * Inverse function of `tupled`\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n * ```\n *\n * @since 2.0.0\n */\nexport const untupled = <A extends ReadonlyArray<unknown>, B>(f: (a: A) => B): (...a: A) => B => (...a) => f(a)\n\n/**\n * Pipes the value of an expression into a pipeline of functions.\n *\n * **Details**\n *\n * The `pipe` function is a utility that allows us to compose functions in a\n * readable and sequential manner. It takes the output of one function and\n * passes it as the input to the next function in the pipeline. This enables us\n * to build complex transformations by chaining multiple functions together.\n *\n * ```ts skip-type-checking\n * import { pipe } from \"effect\"\n *\n * const result = pipe(input, func1, func2, ..., funcN)\n * ```\n *\n * In this syntax, `input` is the initial value, and `func1`, `func2`, ...,\n * `funcN` are the functions to be applied in sequence. The result of each\n * function becomes the input for the next function, and the final result is\n * returned.\n *\n * Here's an illustration of how `pipe` works:\n *\n * ```\n * ┌───────┐    ┌───────┐    ┌───────┐    ┌───────┐    ┌───────┐    ┌────────┐\n * │ input │───►│ func1 │───►│ func2 │───►│  ...  │───►│ funcN │───►│ result │\n * └───────┘    └───────┘    └───────┘    └───────┘    └───────┘    └────────┘\n * ```\n *\n * It's important to note that functions passed to `pipe` must have a **single\n * argument** because they are only called with a single argument.\n *\n * **When to Use**\n *\n * This is useful in combination with data-last functions as a simulation of\n * methods:\n *\n * ```ts skip-type-checking\n * as.map(f).filter(g)\n * ```\n *\n * becomes:\n *\n * ```ts skip-type-checking\n * import { pipe, Array } from \"effect\"\n *\n * pipe(as, Array.map(f), Array.filter(g))\n * ```\n *\n * **Example** (Chaining Arithmetic Operations)\n *\n * ```ts\n * import { pipe } from \"effect\"\n *\n * // Define simple arithmetic operations\n * const increment = (x: number) => x + 1\n * const double = (x: number) => x * 2\n * const subtractTen = (x: number) => x - 10\n *\n * // Sequentially apply these operations using `pipe`\n * const result = pipe(5, increment, double, subtractTen)\n *\n * console.log(result)\n * // Output: 2\n * ```\n *\n * @since 2.0.0\n */\nexport function pipe<A>(a: A): A\nexport function pipe<A, B = never>(a: A, ab: (a: A) => B): B\nexport function pipe<A, B = never, C = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C\n): C\nexport function pipe<A, B = never, C = never, D = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D\n): D\nexport function pipe<A, B = never, C = never, D = never, E = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): E\nexport function pipe<A, B = never, C = never, D = never, E = never, F = never>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): F\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): G\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): H\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): I\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): J\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K\n): K\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L\n): L\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M\n): M\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N\n): N\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O\n): O\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P\n): P\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q\n): Q\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R\n): R\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S\n): S\nexport function pipe<\n  A,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never,\n  K = never,\n  L = never,\n  M = never,\n  N = never,\n  O = never,\n  P = never,\n  Q = never,\n  R = never,\n  S = never,\n  T = never\n>(\n  a: A,\n  ab: (a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J,\n  jk: (j: J) => K,\n  kl: (k: K) => L,\n  lm: (l: L) => M,\n  mn: (m: M) => N,\n  no: (n: N) => O,\n  op: (o: O) => P,\n  pq: (p: P) => Q,\n  qr: (q: Q) => R,\n  rs: (r: R) => S,\n  st: (s: S) => T\n): T\nexport function pipe(\n  a: unknown,\n  ab?: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return a\n    case 2:\n      return ab!(a)\n    case 3:\n      return bc!(ab!(a))\n    case 4:\n      return cd!(bc!(ab!(a)))\n    case 5:\n      return de!(cd!(bc!(ab!(a))))\n    case 6:\n      return ef!(de!(cd!(bc!(ab!(a)))))\n    case 7:\n      return fg!(ef!(de!(cd!(bc!(ab!(a))))))\n    case 8:\n      return gh!(fg!(ef!(de!(cd!(bc!(ab!(a)))))))\n    case 9:\n      return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab!(a))))))))\n    default: {\n      let ret = arguments[0]\n      for (let i = 1; i < arguments.length; i++) {\n        ret = arguments[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n *\n * See also [`pipe`](#pipe).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { flow } from \"effect/Function\"\n *\n * const len = (s: string): number => s.length\n * const double = (n: number): number => n * 2\n *\n * const f = flow(len, double)\n *\n * assert.strictEqual(f('aaa'), 6)\n * ```\n *\n * @since 2.0.0\n */\nexport function flow<A extends ReadonlyArray<unknown>, B = never>(\n  ab: (...a: A) => B\n): (...a: A) => B\nexport function flow<A extends ReadonlyArray<unknown>, B = never, C = never>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C\n): (...a: A) => C\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never\n>(ab: (...a: A) => B, bc: (b: B) => C, cd: (c: C) => D): (...a: A) => D\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E\n): (...a: A) => E\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F\n): (...a: A) => F\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G\n): (...a: A) => G\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H\n): (...a: A) => H\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I\n): (...a: A) => I\nexport function flow<\n  A extends ReadonlyArray<unknown>,\n  B = never,\n  C = never,\n  D = never,\n  E = never,\n  F = never,\n  G = never,\n  H = never,\n  I = never,\n  J = never\n>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (c: C) => D,\n  de: (d: D) => E,\n  ef: (e: E) => F,\n  fg: (f: F) => G,\n  gh: (g: G) => H,\n  hi: (h: H) => I,\n  ij: (i: I) => J\n): (...a: A) => J\nexport function flow(\n  ab: Function,\n  bc?: Function,\n  cd?: Function,\n  de?: Function,\n  ef?: Function,\n  fg?: Function,\n  gh?: Function,\n  hi?: Function,\n  ij?: Function\n): unknown {\n  switch (arguments.length) {\n    case 1:\n      return ab\n    case 2:\n      return function(this: unknown) {\n        return bc!(ab.apply(this, arguments))\n      }\n    case 3:\n      return function(this: unknown) {\n        return cd!(bc!(ab.apply(this, arguments)))\n      }\n    case 4:\n      return function(this: unknown) {\n        return de!(cd!(bc!(ab.apply(this, arguments))))\n      }\n    case 5:\n      return function(this: unknown) {\n        return ef!(de!(cd!(bc!(ab.apply(this, arguments)))))\n      }\n    case 6:\n      return function(this: unknown) {\n        return fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))\n      }\n    case 7:\n      return function(this: unknown) {\n        return gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))\n      }\n    case 8:\n      return function(this: unknown) {\n        return hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments))))))))\n      }\n    case 9:\n      return function(this: unknown) {\n        return ij!(hi!(gh!(fg!(ef!(de!(cd!(bc!(ab.apply(this, arguments)))))))))\n      }\n  }\n  return\n}\n\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole: <T>() => T = unsafeCoerce(absurd)\n\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n * ```\n *\n * @since 2.0.0\n */\nexport const SK = <A, B>(_: A, b: B): B => b\n","/**\n * @since 2.0.0\n */\n\n/** @internal */\nexport const getBugErrorMessage = (message: string) =>\n  `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`\n","/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/** @internal */\nconst randomHashCache = globalValue(\n  Symbol.for(\"effect/Hash/randomHashCache\"),\n  () => new WeakMap<object, number>()\n)\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Hash\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Hash {\n  [symbol](): number\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash: <A>(self: A) => number = <A>(self: A) => {\n  if (structuralRegionState.enabled === true) {\n    return 0\n  }\n\n  switch (typeof self) {\n    case \"number\":\n      return number(self)\n    case \"bigint\":\n      return string(self.toString(10))\n    case \"boolean\":\n      return string(String(self))\n    case \"symbol\":\n      return string(String(self))\n    case \"string\":\n      return string(self)\n    case \"undefined\":\n      return string(\"undefined\")\n    case \"function\":\n    case \"object\": {\n      if (self === null) {\n        return string(\"null\")\n      } else if (self instanceof Date) {\n        return hash(self.toISOString())\n      } else if (self instanceof URL) {\n        return hash(self.href)\n      } else if (isHash(self)) {\n        return self[symbol]()\n      } else {\n        return random(self)\n      }\n    }\n    default:\n      throw new Error(\n        `BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`\n      )\n  }\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random: <A extends object>(self: A) => number = (self) => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)))\n  }\n  return randomHashCache.get(self)!\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine: (b: number) => (self: number) => number = (b) => (self) => (self * 53) ^ b\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = (n: number): number => (n & 0xbfffffff) | ((n >>> 1) & 0x40000000)\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = (u: unknown): u is Hash => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = (n: number) => {\n  if (n !== n || n === Infinity) {\n    return 0\n  }\n  let h = n | 0\n  if (h !== n) {\n    h ^= n * 0xffffffff\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = (str: string) => {\n  let h = 5381, i = str.length\n  while (i) {\n    h = (h * 33) ^ str.charCodeAt(--i)\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = <A extends object>(o: A, keys: ReadonlyArray<keyof A>) => {\n  let h = 12289\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]! as string), combine(hash((o as any)[keys[i]!])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = <A extends object>(o: A) =>\n  structureKeys(o, Object.keys(o) as unknown as ReadonlyArray<keyof A>)\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = <A>(arr: ReadonlyArray<A>) => {\n  let h = 6151\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])))\n  }\n  return optimize(h)\n}\n\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached: {\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object): (hash: number) => number\n  /**\n   * @since 2.0.0\n   * @category hashing\n   */\n  (self: object, hash: number): number\n} = function() {\n  if (arguments.length === 1) {\n    const self = arguments[0] as object\n    return function(hash: number) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash\n        },\n        enumerable: false\n      })\n      return hash\n    } as any\n  }\n  const self = arguments[0] as object\n  const hash = arguments[1] as number\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash\n    },\n    enumerable: false\n  })\n\n  return hash\n}\n","/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport type { Kind, TypeLambda } from \"./HKT.js\"\nimport { getBugErrorMessage } from \"./internal/errors.js\"\nimport { isNullable, isObject } from \"./Predicate.js\"\nimport type * as Types from \"./Types.js\"\n\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId: unique symbol = Symbol.for(\"effect/Gen/GenKind\")\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type GenKindTypeId = typeof GenKindTypeId\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface GenKind<F extends TypeLambda, R, O, E, A> extends Variance<F, R, O, E> {\n  readonly value: Kind<F, R, O, E, A>\n\n  [Symbol.iterator](): IterableIterator<GenKind<F, R, O, E, A>, A>\n}\n\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = (u: unknown): u is GenKind<any, any, any, any, any> => isObject(u) && GenKindTypeId in u\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl<F extends TypeLambda, R, O, E, A> implements GenKind<F, R, O, E, A> {\n  constructor(\n    /**\n     * @since 2.0.0\n     */\n    readonly value: Kind<F, R, O, E, A>\n  ) {}\n\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return (_: R) => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return (_: never): O => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return (_: never): E => _\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  readonly [GenKindTypeId]: typeof GenKindTypeId = GenKindTypeId;\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): IterableIterator<GenKind<F, R, O, E, A>, A> {\n    return new SingleShotGen<GenKind<F, R, O, E, A>, A>(this as any)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen<T, A> implements IterableIterator<T, A> {\n  private called = false\n\n  constructor(readonly self: T) {}\n\n  /**\n   * @since 2.0.0\n   */\n  next(a: A): IteratorResult<T, A> {\n    return this.called ?\n      ({\n        value: a,\n        done: true\n      }) :\n      (this.called = true,\n        ({\n          value: this.self,\n          done: false\n        }))\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  return(a: A): IteratorResult<T, A> {\n    return ({\n      value: a,\n      done: true\n    })\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  throw(e: unknown): IteratorResult<T, A> {\n    throw e\n  }\n\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator](): IterableIterator<T, A> {\n    return new SingleShotGen<T, A>(this.self)\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = <F extends TypeLambda, R, O, E, A>(\n  kind: Kind<F, R, O, E, A>\n): GenKind<F, R, O, E, A> => new GenKindImpl(kind)\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Variance<in out F extends TypeLambda, in R, out O, out E> {\n  readonly [GenKindTypeId]: GenKindTypeId\n  readonly _F: Types.Invariant<F>\n  readonly _R: Types.Contravariant<R>\n  readonly _O: Types.Covariant<O>\n  readonly _E: Types.Covariant<E>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Gen<F extends TypeLambda, Z> {\n  <Self, K extends Variance<F, any, any, any> | YieldWrap<Kind<F, any, any, any, any>>, A>(\n    ...args:\n      | [\n        self: Self,\n        body: (this: Self, resume: Z) => Generator<K, A, never>\n      ]\n      | [\n        body: (resume: Z) => Generator<K, A, never>\n      ]\n  ): Kind<\n    F,\n    [K] extends [Variance<F, infer R, any, any>] ? R\n      : [K] extends [YieldWrap<Kind<F, infer R, any, any, any>>] ? R\n      : never,\n    [K] extends [Variance<F, any, infer O, any>] ? O\n      : [K] extends [YieldWrap<Kind<F, any, infer O, any, any>>] ? O\n      : never,\n    [K] extends [Variance<F, any, any, infer E>] ? E\n      : [K] extends [YieldWrap<Kind<F, any, any, infer E, any>>] ? E\n      : never,\n    A\n  >\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Adapter<Z extends TypeLambda> {\n  <_R, _O, _E, _A>(\n    self: Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, _R, _O, _E, _A>(a: A, ab: (a: A) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, _R, _O, _E, _A>(a: A, ab: (a: A) => B, bc: (b: B) => Kind<Z, _R, _O, _E, _A>): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: F) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (g: H) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, _R, _O, _E, _A>(\n    a: A,\n    ab: (a: A) => B,\n    bc: (b: B) => C,\n    cd: (c: C) => D,\n    de: (d: D) => E,\n    ef: (e: E) => F,\n    fg: (f: F) => G,\n    gh: (g: G) => H,\n    hi: (h: H) => I,\n    ij: (i: I) => J,\n    jk: (j: J) => K,\n    kl: (k: K) => L,\n    lm: (l: L) => M,\n    mn: (m: M) => N,\n    no: (n: N) => O,\n    op: (o: O) => P,\n    pq: (p: P) => Q,\n    qr: (q: Q) => R,\n    rs: (r: R) => S,\n    st: (s: S) => T,\n    tu: (s: T) => Kind<Z, _R, _O, _E, _A>\n  ): GenKind<Z, _R, _O, _E, _A>\n}\n\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter: <F extends TypeLambda>() => Adapter<F> = () => (function() {\n  let x = arguments[0]\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x)\n  }\n  return new GenKindImpl(x) as any\n})\n\nconst defaultIncHi = 0x14057b7e\nconst defaultIncLo = 0xf767814f\nconst MUL_HI = 0x5851f42d >>> 0\nconst MUL_LO = 0x4c957f2d >>> 0\nconst BIT_53 = 9007199254740992.0\nconst BIT_27 = 134217728.0\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type PCGRandomState = [number, number, number, number]\n\n/**\n * @category model\n * @since 2.0.0\n */\nexport type OptionalNumber = number | null | undefined\n\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  private _state!: Int32Array\n\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seed` - The low 32 bits of the seed (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seed?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seedHi` - The high 32 bits of the seed.\n   * - `seedLo` - The low 32 bits of the seed.\n   * - `inc` - The low 32 bits of the incrementer (0 is used for high 32 bits).\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(seedHi: OptionalNumber, seedLo: OptionalNumber, inc?: OptionalNumber)\n  /**\n   * Creates an instance of PCGRandom.\n   *\n   * - `seedHi` - The high 32 bits of the seed.\n   * - `seedLo` - The low 32 bits of the seed.\n   * - `incHi` - The high 32 bits of the incrementer.\n   * - `incLo` - The low 32 bits of the incrementer.\n   *\n   * @memberOf PCGRandom\n   */\n  constructor(\n    seedHi: OptionalNumber,\n    seedLo: OptionalNumber,\n    incHi: OptionalNumber,\n    incLo: OptionalNumber\n  )\n  constructor(\n    seedHi?: OptionalNumber,\n    seedLo?: OptionalNumber,\n    incHi?: OptionalNumber,\n    incLo?: OptionalNumber\n  ) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = (Math.random() * 0xffffffff) >>> 0\n      seedHi = 0\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi\n      seedHi = 0\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo\n      incHi = this._state ? this._state[2] : defaultIncHi\n    } else if (isNullable(incLo)) {\n      incLo = <number> incHi\n      incHi = 0\n    }\n\n    this._state = new Int32Array([0, 0, (<number> incHi) >>> 0, ((incLo || 0) | 1) >>> 0])\n    this._next()\n    add64(\n      this._state,\n      this._state[0]!,\n      this._state[1]!,\n      (<number> seedHi) >>> 0,\n      (<number> seedLo) >>> 0\n    )\n    this._next()\n    return this\n  }\n\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState(): PCGRandomState {\n    return [this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!]\n  }\n\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state: PCGRandomState) {\n    this._state[0] = state[0]\n    this._state[1] = state[1]\n    this._state[2] = state[2]\n    this._state[3] = state[3] | 1\n  }\n\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max: number) {\n    return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max\n  }\n\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0\n    const lo = (this._next() & 0x07ffffff) * 1.0\n    return (hi * BIT_27 + lo) / BIT_53\n  }\n\n  /** @internal */\n  private _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0]! >>> 0\n    const oldLo = this._state[1]! >>> 0\n\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO)\n    add64(this._state, this._state[0]!, this._state[1]!, this._state[2]!, this._state[3]!)\n\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18\n    let xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0\n    xsHi = (xsHi ^ oldHi) >>> 0\n    xsLo = (xsLo ^ oldLo) >>> 0\n    const xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27\n    const rot2 = ((-rot >>> 0) & 31) >>> 0\n    return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0\n  }\n}\n\nfunction mul64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let c1 = ((aLo >>> 16) * (bLo & 0xffff)) >>> 0\n  let c0 = ((aLo & 0xffff) * (bLo >>> 16)) >>> 0\n\n  let lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0\n  let hi = ((aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16))) >>> 0\n\n  c0 = (c0 << 16) >>> 0\n  lo = (lo + c0) >>> 0\n  if ((lo >>> 0) < (c0 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  c1 = (c1 << 16) >>> 0\n  lo = (lo + c1) >>> 0\n  if ((lo >>> 0) < (c1 >>> 0)) {\n    hi = (hi + 1) >>> 0\n  }\n\n  hi = (hi + Math.imul(aLo, bHi)) >>> 0\n  hi = (hi + Math.imul(aHi, bLo)) >>> 0\n\n  out[0] = hi\n  out[1] = lo\n}\n\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(\n  out: Int32Array,\n  aHi: number,\n  aLo: number,\n  bHi: number,\n  bLo: number\n): void {\n  let hi = (aHi + bHi) >>> 0\n  const lo = (aLo + bLo) >>> 0\n  if ((lo >>> 0) < (aLo >>> 0)) {\n    hi = (hi + 1) | 0\n  }\n  out[0] = hi\n  out[1] = lo\n}\n\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId: unique symbol = Symbol.for(\"effect/Utils/YieldWrap\")\n\n/**\n * @since 3.0.6\n */\nexport class YieldWrap<T> {\n  /**\n   * @since 3.0.6\n   */\n  readonly #value: T\n  constructor(value: T) {\n    this.#value = value\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId](): T {\n    return this.#value\n  }\n}\n\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet<T>(self: YieldWrap<T>): T {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]()\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"))\n}\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = globalValue(\n  \"effect/Utils/isStructuralRegion\",\n  (): { enabled: boolean; tester: ((a: unknown, b: unknown) => boolean) | undefined } => ({\n    enabled: false,\n    tester: undefined\n  })\n)\n\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = <A>(body: () => A, tester?: (a: unknown, b: unknown) => boolean): A => {\n  const current = structuralRegionState.enabled\n  const currentTester = structuralRegionState.tester\n  structuralRegionState.enabled = true\n  if (tester) {\n    structuralRegionState.tester = tester\n  }\n  try {\n    return body()\n  } finally {\n    structuralRegionState.enabled = current\n    structuralRegionState.tester = currentTester\n  }\n}\n\nconst standard = {\n  effect_internal_function: <A>(body: () => A) => {\n    return body()\n  }\n}\n\nconst forced = {\n  effect_internal_function: <A>(body: () => A) => {\n    try {\n      return body()\n    } finally {\n      //\n    }\n  }\n}\n\nconst isNotOptimizedAway =\n  standard.effect_internal_function(() => new Error().stack)?.includes(\"effect_internal_function\") === true\n\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = isNotOptimizedAway ? standard.effect_internal_function : forced.effect_internal_function\n\nconst genConstructor = (function*() {}).constructor\n\n/**\n * @since 3.11.0\n */\nexport const isGeneratorFunction = (u: unknown): u is (...args: Array<any>) => Generator<any, any, any> =>\n  isObject(u) && u.constructor === genConstructor\n","/**\n * @since 2.0.0\n */\nimport type { Equivalence } from \"./Equivalence.js\"\nimport * as Hash from \"./Hash.js\"\nimport { hasProperty } from \"./Predicate.js\"\nimport { structuralRegionState } from \"./Utils.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol: unique symbol = Symbol.for(\"effect/Equal\")\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Equal extends Hash.Hash {\n  [symbol](that: Equal): boolean\n}\n\n/**\n * @since 2.0.0\n * @category equality\n */\nexport function equals<B>(that: B): <A>(self: A) => boolean\nexport function equals<A, B>(self: A, that: B): boolean\nexport function equals(): any {\n  if (arguments.length === 1) {\n    return (self: unknown) => compareBoth(self, arguments[0])\n  }\n  return compareBoth(arguments[0], arguments[1])\n}\n\nfunction compareBoth(self: unknown, that: unknown): boolean {\n  if (self === that) {\n    return true\n  }\n  const selfType = typeof self\n  if (selfType !== typeof that) {\n    return false\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester\n            ? structuralRegionState.tester(self, that)\n            : false\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString()\n      } else if (self instanceof URL && that instanceof URL) {\n        return self.href === that.href\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]))\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self as any)\n        const keysThat = Object.keys(that as any)\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n            }\n          }\n          return true\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false\n    }\n  }\n\n  return structuralRegionState.enabled && structuralRegionState.tester\n    ? structuralRegionState.tester(self, that)\n    : false\n}\n\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = (u: unknown): u is Equal => hasProperty(u, symbol)\n\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence: <A>() => Equivalence<A> = () => equals\n","/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */\nconst globalStoreId = `effect/GlobalValue`\n\nlet globalStore: Map<unknown, any>\n\n/**\n * Retrieves or computes a global value associated with the given `id`. If the value for this `id`\n * has already been computed, it will be returned from the global store. If it does not exist yet,\n * the provided `compute` function will be executed to compute the value, store it, and then return it.\n *\n * This ensures that even in cases where the module is imported multiple times (e.g., in mixed environments\n * like CommonJS and ESM, or during hot-reloading in development), the value is computed only once and reused\n * thereafter.\n *\n * @example\n * ```ts\n * import { globalValue } from \"effect/GlobalValue\"\n *\n * // This cache will persist as long as the module is running,\n * // even if reloaded or imported elsewhere\n * const myCache = globalValue(\n *   Symbol.for(\"myCache\"),\n *   () => new WeakMap<object, number>()\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const globalValue = <A>(id: unknown, compute: () => A): A => {\n  if (!globalStore) {\n    // @ts-expect-error\n    globalThis[globalStoreId] ??= new Map()\n    // @ts-expect-error\n    globalStore = globalThis[globalStoreId] as Map<unknown, any>\n  }\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute())\n  }\n  return globalStore.get(id)!\n}\n","/**\n * This module provides a collection of functions for working with predicates and refinements.\n *\n * A `Predicate<A>` is a function that takes a value of type `A` and returns a boolean.\n * It is used to check if a value satisfies a certain condition.\n *\n * A `Refinement<A, B>` is a special type of predicate that not only checks a condition\n * but also provides a type guard, allowing TypeScript to narrow the type of the input\n * value from `A` to a more specific type `B` within a conditional block.\n *\n * The module includes:\n * - Basic predicates and refinements for common types (e.g., `isString`, `isNumber`).\n * - Combinators to create new predicates from existing ones (e.g., `and`, `or`, `not`).\n * - Advanced combinators for working with data structures (e.g., `tuple`, `struct`).\n * - Type-level utilities for inspecting predicate and refinement types.\n *\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { TupleOf, TupleOfAtLeast } from \"./Types.js\"\n\n/**\n * Represents a function that takes a value of type `A` and returns `true` if the value\n * satisfies some condition, `false` otherwise.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isEven: Predicate.Predicate<number> = (n) => n % 2 === 0\n *\n * assert.strictEqual(isEven(2), true)\n * assert.strictEqual(isEven(3), false)\n * ```\n *\n * @category models\n * @since 2.0.0\n */\nexport interface Predicate<in A> {\n  (a: A): boolean\n}\n\n/**\n * A `TypeLambda` for `Predicate`. This is used to support higher-kinded types\n * and allows `Predicate` to be used in generic contexts within the `effect` ecosystem.\n *\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface PredicateTypeLambda extends TypeLambda {\n  readonly type: Predicate<this[\"Target\"]>\n}\n\n/**\n * Represents a function that serves as a type guard.\n *\n * A `Refinement<A, B>` is a function that takes a value of type `A` and returns a\n * type predicate `a is B`, where `B` is a subtype of `A`. If the function returns\n * `true`, TypeScript will narrow the type of the input variable to `B`.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isString: Predicate.Refinement<unknown, string> = (u): u is string => typeof u === \"string\"\n *\n * const value: unknown = \"hello\"\n *\n * if (isString(value)) {\n *   // value is now known to be a string\n *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n * }\n * ```\n *\n * @category models\n * @since 2.0.0\n */\nexport interface Refinement<in A, out B extends A> {\n  (a: A): a is B\n}\n\n/**\n * A namespace for type-level utilities for `Predicate`.\n *\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Predicate {\n  /**\n   * Extracts the input type `A` from a `Predicate<A>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type T = Predicate.Predicate.In<Predicate.Predicate<string>> // T is string\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Predicate<infer _A>] ? _A : never\n  /**\n   * A type representing any `Predicate`.\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Predicate<never>\n}\n\n/**\n * A namespace for type-level utilities for `Refinement`.\n *\n * @since 3.6.0\n * @category type-level\n */\nexport declare namespace Refinement {\n  /**\n   * Extracts the input type `A` from a `Refinement<A, B>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type IsString = Predicate.Refinement<unknown, string>\n   * type T = Predicate.Refinement.In<IsString> // T is unknown\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type In<T extends Any> = [T] extends [Refinement<infer _A, infer _>] ? _A : never\n  /**\n   * Extracts the output (refined) type `B` from a `Refinement<A, B>`.\n   *\n   * @example\n   * ```ts\n   * import { type Predicate } from \"effect\"\n   *\n   * type IsString = Predicate.Refinement<unknown, string>\n   * type T = Predicate.Refinement.Out<IsString> // T is string\n   * ```\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Out<T extends Any> = [T] extends [Refinement<infer _, infer _B>] ? _B : never\n  /**\n   * A type representing any `Refinement`.\n   *\n   * @since 3.6.0\n   * @category type-level\n   */\n  export type Any = Refinement<any, any>\n}\n\n/**\n * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n * to the input before passing it to the predicate. This is also known as \"contramap\" or\n * \"pre-composition\".\n *\n * @example\n * ```ts\n * import { Predicate, Number } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * // A predicate on numbers\n * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n *\n * // A function from `string` to `number`\n * const stringLength = (s: string): number => s.length\n *\n * // Create a new predicate on strings by mapping the input\n * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n *\n * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n * assert.strictEqual(hasPositiveLength(\"\"), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n   * to the input before passing it to the predicate. This is also known as \"contramap\" or\n   * \"pre-composition\".\n   *\n   * @example\n   * ```ts\n   * import { Predicate, Number } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * // A predicate on numbers\n   * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n   *\n   * // A function from `string` to `number`\n   * const stringLength = (s: string): number => s.length\n   *\n   * // Create a new predicate on strings by mapping the input\n   * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n   *\n   * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n   * assert.strictEqual(hasPositiveLength(\"\"), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Predicate<A>) => Predicate<B>\n  /**\n   * Transforms a `Predicate<A>` into a `Predicate<B>` by applying a function `(b: B) => A`\n   * to the input before passing it to the predicate. This is also known as \"contramap\" or\n   * \"pre-composition\".\n   *\n   * @example\n   * ```ts\n   * import { Predicate, Number } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * // A predicate on numbers\n   * const isPositive: Predicate.Predicate<number> = Number.greaterThan(0)\n   *\n   * // A function from `string` to `number`\n   * const stringLength = (s: string): number => s.length\n   *\n   * // Create a new predicate on strings by mapping the input\n   * const hasPositiveLength = Predicate.mapInput(isPositive, stringLength)\n   *\n   * assert.strictEqual(hasPositiveLength(\"hello\"), true)\n   * assert.strictEqual(hasPositiveLength(\"\"), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B>\n} = dual(2, <A, B>(self: Predicate<A>, f: (b: B) => A): Predicate<B> => (b) => self(f(b)))\n\n/**\n * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * const isTupleOf3 = isTupleOf(3)\n *\n * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n * assert.strictEqual(isTupleOf3([1, 2]), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   // The type of arr is now [number, number, number]\n *   const [a, b, c] = arr;\n *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf: {\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * const isTupleOf3 = isTupleOf(3)\n   *\n   * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOf3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   // The type of arr is now [number, number, number]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOf<N, T>\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with exactly `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOf<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Predicate\"\n   *\n   * const isTupleOf3 = isTupleOf(3)\n   *\n   * assert.strictEqual(isTupleOf3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOf3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   // The type of arr is now [number, number, number]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOf<N, T> => self.length === n)\n\n/**\n * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n *\n * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   // The type of arr is now [number, number, number, ...number[]]\n *   const [a, b, c] = arr;\n *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n * }\n * ```\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast: {\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n   *\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   // The type of arr is now [number, number, number, ...number[]]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <N extends number>(n: N): <T>(self: ReadonlyArray<T>) => self is TupleOfAtLeast<N, T>\n  /**\n   * A refinement that checks if a `ReadonlyArray<T>` is a tuple with at least `N` elements.\n   * If the check is successful, the type is narrowed to `TupleOfAtLeast<N, T>`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Predicate\"\n   *\n   * const isTupleOfAtLeast3 = isTupleOfAtLeast(3)\n   *\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2, 3, 4]), true);\n   * assert.strictEqual(isTupleOfAtLeast3([1, 2]), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   // The type of arr is now [number, number, number, ...number[]]\n   *   const [a, b, c] = arr;\n   *   assert.deepStrictEqual([a, b, c], [1, 2, 3])\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 3.3.0\n   */\n  <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T>\n} = dual(2, <T, N extends number>(self: ReadonlyArray<T>, n: N): self is TupleOfAtLeast<N, T> => self.length >= n)\n\n/**\n * A predicate that checks if a value is \"truthy\" in JavaScript.\n * Fails for `false`, `0`, `-0`, `0n`, `\"\"`, `null`, `undefined`, and `NaN`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.strictEqual(isTruthy(1), true)\n * assert.strictEqual(isTruthy(\"hello\"), true)\n * assert.strictEqual(isTruthy({}), true)\n *\n * assert.strictEqual(isTruthy(0), false)\n * assert.strictEqual(isTruthy(\"\"), false)\n * assert.strictEqual(isTruthy(null), false)\n * assert.strictEqual(isTruthy(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = (input: unknown) => !!input\n\n/**\n * A refinement that checks if a value is a `Set`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.strictEqual(isSet(new Set([1, 2])), true)\n * assert.strictEqual(isSet(new Set()), true)\n *\n * assert.strictEqual(isSet({}), false)\n * assert.strictEqual(isSet([1, 2]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = (input: unknown): input is Set<unknown> => input instanceof Set\n\n/**\n * A refinement that checks if a value is a `Map`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.strictEqual(isMap(new Map()), true)\n *\n * assert.strictEqual(isMap({}), false)\n * assert.strictEqual(isMap(new Set()), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = (input: unknown): input is Map<unknown, unknown> => input instanceof Map\n\n/**\n * A refinement that checks if a value is a `string`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isString } from \"effect/Predicate\"\n *\n * assert.strictEqual(isString(\"hello\"), true)\n * assert.strictEqual(isString(\"\"), true)\n *\n * assert.strictEqual(isString(123), false)\n * assert.strictEqual(isString(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = (input: unknown): input is string => typeof input === \"string\"\n\n/**\n * A refinement that checks if a value is a `number`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNumber(123), true)\n * assert.strictEqual(isNumber(0), true)\n * assert.strictEqual(isNumber(-1.5), true)\n * assert.strictEqual(isNumber(NaN), true)\n *\n * assert.strictEqual(isNumber(\"123\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = (input: unknown): input is number => typeof input === \"number\"\n\n/**\n * A refinement that checks if a value is a `boolean`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.strictEqual(isBoolean(true), true)\n * assert.strictEqual(isBoolean(false), true)\n *\n * assert.strictEqual(isBoolean(\"true\"), false)\n * assert.strictEqual(isBoolean(0), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = (input: unknown): input is boolean => typeof input === \"boolean\"\n\n/**\n * A refinement that checks if a value is a `bigint`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.strictEqual(isBigInt(1n), true)\n *\n * assert.strictEqual(isBigInt(1), false)\n * assert.strictEqual(isBigInt(\"1\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = (input: unknown): input is bigint => typeof input === \"bigint\"\n\n/**\n * A refinement that checks if a value is a `symbol`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.strictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.strictEqual(isSymbol(\"a\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = (input: unknown): input is symbol => typeof input === \"symbol\"\n\n// TODO: make public\n/**\n * A refinement that checks if a value is a valid `PropertyKey` (a `string`, `number`, or `symbol`).\n * @internal\n */\nexport const isPropertyKey = (u: unknown): u is PropertyKey => isString(u) || isNumber(u) || isSymbol(u)\n\n/**\n * A refinement that checks if a value is a `Function`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.strictEqual(isFunction(() => {}), true)\n * assert.strictEqual(isFunction(isFunction), true)\n *\n * assert.strictEqual(isFunction(\"function\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction: (input: unknown) => input is Function = isFunction_\n\n/**\n * A refinement that checks if a value is `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUndefined(undefined), true)\n *\n * assert.strictEqual(isUndefined(null), false)\n * assert.strictEqual(isUndefined(\"undefined\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = (input: unknown): input is undefined => input === undefined\n\n/**\n * A refinement that checks if a value is not `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotUndefined(null), true)\n * assert.strictEqual(isNotUndefined(\"value\"), true)\n *\n * assert.strictEqual(isNotUndefined(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = <A>(input: A): input is Exclude<A, undefined> => input !== undefined\n\n/**\n * A refinement that checks if a value is `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNull(null), true)\n *\n * assert.strictEqual(isNull(undefined), false)\n * assert.strictEqual(isNull(\"null\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = (input: unknown): input is null => input === null\n\n/**\n * A refinement that checks if a value is not `null`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotNull(undefined), true)\n * assert.strictEqual(isNotNull(\"value\"), true)\n *\n * assert.strictEqual(isNotNull(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = <A>(input: A): input is Exclude<A, null> => input !== null\n\n/**\n * A refinement that always returns `false`. The type is narrowed to `never`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNever(1), false)\n * assert.strictEqual(isNever(null), false)\n * assert.strictEqual(isNever({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever: (input: unknown) => input is never = (_: unknown): _ is never => false\n\n/**\n * A refinement that always returns `true`. The type is narrowed to `unknown`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUnknown(1), true)\n * assert.strictEqual(isUnknown(null), true)\n * assert.strictEqual(isUnknown({}), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown: (input: unknown) => input is unknown = (_): _ is unknown => true\n\n/**\n * Checks if the input is an object or an array.\n * @internal\n */\nexport const isRecordOrArray = (input: unknown): input is { [x: PropertyKey]: unknown } =>\n  typeof input === \"object\" && input !== null\n\n/**\n * A refinement that checks if a value is an `object`. Note that in JavaScript,\n * arrays and functions are also considered objects.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.strictEqual(isObject({}), true)\n * assert.strictEqual(isObject([]), true)\n * assert.strictEqual(isObject(() => {}), true)\n *\n * assert.strictEqual(isObject(null), false)\n * assert.strictEqual(isObject(\"hello\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isRecord to check for plain objects (excluding arrays and functions).\n */\nexport const isObject = (input: unknown): input is object => isRecordOrArray(input) || isFunction(input)\n\n/**\n * A refinement that checks if a value is an object-like value and has a specific property key.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { hasProperty } from \"effect/Predicate\"\n *\n * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n *\n * const value: unknown = { name: \"Alice\" };\n * if (hasProperty(value, \"name\")) {\n *   // The type of `value` is narrowed to `{ name: unknown }`\n *   // and we can safely access `value.name`\n *   console.log(value.name)\n * }\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty: {\n  /**\n   * A refinement that checks if a value is an object-like value and has a specific property key.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { hasProperty } from \"effect/Predicate\"\n   *\n   * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n   * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n   *\n   * const value: unknown = { name: \"Alice\" };\n   * if (hasProperty(value, \"name\")) {\n   *   // The type of `value` is narrowed to `{ name: unknown }`\n   *   // and we can safely access `value.name`\n   *   console.log(value.name)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(property: P): (self: unknown) => self is { [K in P]: unknown }\n  /**\n   * A refinement that checks if a value is an object-like value and has a specific property key.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { hasProperty } from \"effect/Predicate\"\n   *\n   * assert.strictEqual(hasProperty({ a: 1 }, \"a\"), true)\n   * assert.strictEqual(hasProperty({ a: 1 }, \"b\"), false)\n   *\n   * const value: unknown = { name: \"Alice\" };\n   * if (hasProperty(value, \"name\")) {\n   *   // The type of `value` is narrowed to `{ name: unknown }`\n   *   // and we can safely access `value.name`\n   *   console.log(value.name)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown }\n} = dual(\n  2,\n  <P extends PropertyKey>(self: unknown, property: P): self is { [K in P]: unknown } =>\n    isObject(self) && (property in self)\n)\n\n/**\n * A refinement that checks if a value is an object with a `_tag` property\n * that matches the given tag. This is a powerful tool for working with\n * discriminated union types.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isTagged } from \"effect/Predicate\"\n *\n * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n *\n * const isCircle = isTagged(\"circle\")\n *\n * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n * const shape2: Shape = { _tag: \"square\", side: 5 }\n *\n * assert.strictEqual(isCircle(shape1), true)\n * assert.strictEqual(isCircle(shape2), false)\n *\n * if (isCircle(shape1)) {\n *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n *   assert.strictEqual(shape1.radius, 10)\n * }\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged: {\n  /**\n   * A refinement that checks if a value is an object with a `_tag` property\n   * that matches the given tag. This is a powerful tool for working with\n   * discriminated union types.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n   *\n   * const isCircle = isTagged(\"circle\")\n   *\n   * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n   * const shape2: Shape = { _tag: \"square\", side: 5 }\n   *\n   * assert.strictEqual(isCircle(shape1), true)\n   * assert.strictEqual(isCircle(shape2), false)\n   *\n   * if (isCircle(shape1)) {\n   *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n   *   assert.strictEqual(shape1.radius, 10)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(tag: K): (self: unknown) => self is { _tag: K }\n  /**\n   * A refinement that checks if a value is an object with a `_tag` property\n   * that matches the given tag. This is a powerful tool for working with\n   * discriminated union types.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTagged } from \"effect/Predicate\"\n   *\n   * type Shape = { _tag: \"circle\"; radius: number } | { _tag: \"square\"; side: number }\n   *\n   * const isCircle = isTagged(\"circle\")\n   *\n   * const shape1: Shape = { _tag: \"circle\", radius: 10 }\n   * const shape2: Shape = { _tag: \"square\", side: 5 }\n   *\n   * assert.strictEqual(isCircle(shape1), true)\n   * assert.strictEqual(isCircle(shape2), false)\n   *\n   * if (isCircle(shape1)) {\n   *   // shape1 is now narrowed to { _tag: \"circle\"; radius: number }\n   *   assert.strictEqual(shape1.radius, 10)\n   * }\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <K extends string>(self: unknown, tag: K): self is { _tag: K }\n} = dual(\n  2,\n  <K extends string>(self: unknown, tag: K): self is { _tag: K } => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag\n)\n\n/**\n * A refinement that checks if a value is either `null` or `undefined`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNullable(null), true)\n * assert.strictEqual(isNullable(undefined), true)\n *\n * assert.strictEqual(isNullable(0), false)\n * assert.strictEqual(isNullable(\"\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isNotNullable\n */\nexport const isNullable = <A>(input: A): input is Extract<A, null | undefined> => input === null || input === undefined\n\n/**\n * A refinement that checks if a value is neither `null` nor `undefined`.\n * The type is narrowed to `NonNullable<A>`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isNotNullable(0), true)\n * assert.strictEqual(isNotNullable(\"hello\"), true)\n *\n * assert.strictEqual(isNotNullable(null), false)\n * assert.strictEqual(isNotNullable(undefined), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isNullable\n */\nexport const isNotNullable = <A>(input: A): input is NonNullable<A> => input !== null && input !== undefined\n\n/**\n * A refinement that checks if a value is an instance of `Error`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isError } from \"effect/Predicate\"\n *\n * assert.strictEqual(isError(new Error(\"boom\")), true)\n * assert.strictEqual(isError(new TypeError(\"boom\")), true)\n *\n * assert.strictEqual(isError({ message: \"boom\" }), false)\n * assert.strictEqual(isError(\"boom\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = (input: unknown): input is Error => input instanceof Error\n\n/**\n * A refinement that checks if a value is a `Uint8Array`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.strictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.strictEqual(isUint8Array(new Uint16Array()), false)\n * assert.strictEqual(isUint8Array([1, 2, 3]), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = (input: unknown): input is Uint8Array => input instanceof Uint8Array\n\n/**\n * A refinement that checks if a value is a `Date` object.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.strictEqual(isDate(new Date()), true)\n *\n * assert.strictEqual(isDate(Date.now()), false) // `Date.now()` returns a number\n * assert.strictEqual(isDate(\"2023-01-01\"), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = (input: unknown): input is Date => input instanceof Date\n\n/**\n * A refinement that checks if a value is an `Iterable`.\n * Many built-in types are iterable, such as `Array`, `string`, `Map`, and `Set`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.strictEqual(isIterable([]), true)\n * assert.strictEqual(isIterable(\"hello\"), true)\n * assert.strictEqual(isIterable(new Set()), true)\n *\n * assert.strictEqual(isIterable({}), false)\n * assert.strictEqual(isIterable(123), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = (input: unknown): input is Iterable<unknown> =>\n  typeof input === \"string\" || hasProperty(input, Symbol.iterator)\n\n/**\n * A refinement that checks if a value is a record (i.e., a plain object).\n * This check returns `false` for arrays, `null`, and functions.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.strictEqual(isRecord({}), true)\n * assert.strictEqual(isRecord({ a: 1 }), true)\n *\n * assert.strictEqual(isRecord([]), false)\n * assert.strictEqual(isRecord(new Date()), false)\n * assert.strictEqual(isRecord(null), false)\n * assert.strictEqual(isRecord(() => null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isObject\n */\nexport const isRecord = (input: unknown): input is { [x: string | symbol]: unknown } =>\n  isRecordOrArray(input) && !Array.isArray(input)\n\n/**\n * A refinement that checks if a value is a readonly record (i.e., a plain object).\n * This check returns `false` for arrays, `null`, and functions.\n *\n * This is an alias for `isRecord`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.strictEqual(isReadonlyRecord({}), true)\n * assert.strictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.strictEqual(isReadonlyRecord([]), false)\n * assert.strictEqual(isReadonlyRecord(null), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord: (\n  input: unknown\n) => input is { readonly [x: string | symbol]: unknown } = isRecord\n\n/**\n * A refinement that checks if a value is a `Promise`. It performs a duck-typing check\n * for `.then` and `.catch` methods.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.strictEqual(isPromise(Promise.resolve(1)), true)\n * assert.strictEqual(isPromise(new Promise(() => {})), true)\n *\n * assert.strictEqual(isPromise({ then() {} }), false) // Missing .catch\n * assert.strictEqual(isPromise({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isPromiseLike\n */\nexport const isPromise = (\n  input: unknown\n): input is Promise<unknown> =>\n  hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch)\n\n/**\n * A refinement that checks if a value is `PromiseLike`. It performs a duck-typing\n * check for a `.then` method.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isPromiseLike } from \"effect/Predicate\"\n *\n * assert.strictEqual(isPromiseLike(Promise.resolve(1)), true)\n * assert.strictEqual(isPromiseLike({ then: () => {} }), true)\n *\n * assert.strictEqual(isPromiseLike({}), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n * @see isPromise\n */\nexport const isPromiseLike = (\n  input: unknown\n): input is PromiseLike<unknown> => hasProperty(input, \"then\") && isFunction(input.then)\n\n/**\n * A refinement that checks if a value is a `RegExp`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * assert.strictEqual(Predicate.isRegExp(/a/), true)\n * assert.strictEqual(Predicate.isRegExp(new RegExp(\"a\")), true)\n *\n * assert.strictEqual(Predicate.isRegExp(\"/a/\"), false)\n * ```\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp = (input: unknown): input is RegExp => input instanceof RegExp\n\n/**\n * Composes a `Refinement` with another `Refinement` or `Predicate`.\n *\n * This can be used to chain checks. The first refinement is applied, and if it\n * passes, the second check is applied to the same value, potentially refining\n * the type further.\n *\n * @example\n * ```ts\n * import { Predicate } from \"effect\"\n * import * as assert from \"node:assert\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const minLength = (n: number) => (s: string): boolean => s.length >= n\n *\n * // Create a refinement that checks for a string with a minimum length of 3\n * const isLongString = Predicate.compose(isString, minLength(3))\n *\n * let value: unknown = \"hello\"\n *\n * assert.strictEqual(isLongString(value), true)\n * if (isLongString(value)) {\n *   // value is narrowed to string\n *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n * }\n * assert.strictEqual(isLongString(\"hi\"), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const compose: {\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B, D extends C>(bc: Refinement<C, D>): (ab: Refinement<A, B>) => Refinement<A, D>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(bc: Predicate<NoInfer<B>>): (ab: Refinement<A, B>) => Refinement<A, B>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends B, D extends C>(ab: Refinement<A, B>, bc: Refinement<C, D>): Refinement<A, D>\n  /**\n   * Composes a `Refinement` with another `Refinement` or `Predicate`.\n   *\n   * This can be used to chain checks. The first refinement is applied, and if it\n   * passes, the second check is applied to the same value, potentially refining\n   * the type further.\n   *\n   * @example\n   * ```ts\n   * import { Predicate } from \"effect\"\n   * import * as assert from \"node:assert\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const minLength = (n: number) => (s: string): boolean => s.length >= n\n   *\n   * // Create a refinement that checks for a string with a minimum length of 3\n   * const isLongString = Predicate.compose(isString, minLength(3))\n   *\n   * let value: unknown = \"hello\"\n   *\n   * assert.strictEqual(isLongString(value), true)\n   * if (isLongString(value)) {\n   *   // value is narrowed to string\n   *   assert.strictEqual(value.toUpperCase(), \"HELLO\")\n   * }\n   * assert.strictEqual(isLongString(\"hi\"), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B extends A>(ab: Refinement<A, B>, bc: Predicate<NoInfer<B>>): Refinement<A, B>\n} = dual(\n  2,\n  <A, B extends A, C extends B, D extends C>(ab: Refinement<A, B>, bc: Refinement<C, D>): Refinement<A, D> =>\n  (a): a is D => ab(a) && bc(a as C)\n)\n\n/**\n * Combines two predicates to test a tuple of two values. The first predicate tests the\n * first element of the tuple, and the second predicate tests the second element.\n *\n * @category combining\n * @since 2.0.0\n */\nexport const product =\n  <A, B>(self: Predicate<A>, that: Predicate<B>): Predicate<readonly [A, B]> /* readonly because contravariant */ =>\n  ([a, b]) => self(a) && that(b)\n\n/**\n * Takes an iterable of predicates and returns a new predicate that tests an array of values.\n * The new predicate returns `true` if each predicate at a given index is satisfied by the\n * value at the same index in the array. The check stops at the length of the shorter of\n * the two iterables (predicates or values).\n *\n * @category combining\n * @since 2.0.0\n * @see tuple for a more powerful, variadic version.\n */\nexport const all = <A>(\n  collection: Iterable<Predicate<A>>\n): Predicate<ReadonlyArray<A>> => {\n  return (as) => {\n    let collectionIndex = 0\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false\n      }\n      collectionIndex++\n    }\n    return true\n  }\n}\n\n/**\n * Combines a predicate for a single value and an iterable of predicates for the rest of an array.\n * Useful for checking the head and tail of an array separately.\n *\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Predicate<A>,\n  collection: Iterable<Predicate<A>>\n): Predicate<readonly [A, ...Array<A>]> /* readonly because contravariant */ => {\n  const rest = all(collection)\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail)\n}\n\n/**\n * Combines an array of predicates into a single predicate that tests an array of values.\n * This function is highly type-aware and will produce a `Refinement` if any of the provided\n * predicates are `Refinement`s, allowing for powerful type-narrowing of tuples.\n *\n * - If all predicates are `Predicate<T>`, the result is `Predicate<[T, T, ...]>`.\n * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n *   the input tuple type to a more specific tuple type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * // Create a refinement for a [string, number] tuple\n * const isStringNumberTuple = Predicate.tuple(isString, isNumber)\n *\n * const value: [unknown, unknown] = [\"hello\", 123]\n * if (isStringNumberTuple(value)) {\n *   // value is narrowed to [string, number]\n *   const [s, n] = value\n *   assert.strictEqual(s.toUpperCase(), \"HELLO\")\n *   assert.strictEqual(n.toFixed(2), \"123.00\")\n * }\n * assert.strictEqual(isStringNumberTuple([\"hello\", \"123\"]), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple: {\n  /**\n   * Combines an array of predicates into a single predicate that tests an array of values.\n   * This function is highly type-aware and will produce a `Refinement` if any of the provided\n   * predicates are `Refinement`s, allowing for powerful type-narrowing of tuples.\n   *\n   * - If all predicates are `Predicate<T>`, the result is `Predicate<[T, T, ...]>`.\n   * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n   *   the input tuple type to a more specific tuple type.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * // Create a refinement for a [string, number] tuple\n   * const isStringNumberTuple = Predicate.tuple(isString, isNumber)\n   *\n   * const value: [unknown, unknown] = [\"hello\", 123]\n   * if (isStringNumberTuple(value)) {\n   *   // value is narrowed to [string, number]\n   *   const [s, n] = value\n   *   assert.strictEqual(s.toUpperCase(), \"HELLO\")\n   *   assert.strictEqual(n.toFixed(2), \"123.00\")\n   * }\n   * assert.strictEqual(isStringNumberTuple([\"hello\", \"123\"]), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <T extends ReadonlyArray<Predicate.Any>>(...elements: T): [Extract<T[number], Refinement.Any>] extends [never] ? Predicate<{ readonly [I in keyof T]: Predicate.In<T[I]> }>\n    : Refinement<\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.In<T[I]> : Predicate.In<T[I]> },\n      { readonly [I in keyof T]: T[I] extends Refinement.Any ? Refinement.Out<T[I]> : Predicate.In<T[I]> }\n    >\n} = (...elements: ReadonlyArray<Predicate.Any>) => all(elements) as any\n\n/**\n * Combines a record of predicates into a single predicate that tests a record of values.\n * This function is highly type-aware and will produce a `Refinement` if any of the provided\n * predicates are `Refinement`s, allowing for powerful type-narrowing of structs.\n *\n * - If all predicates are `Predicate<T>`, the result is `Predicate<{ k: T, ... }>`.\n * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n *   the input record type to a more specific record type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * const personPredicate = Predicate.struct({\n *   name: isString,\n *   age: isNumber\n * })\n *\n * const value: { name: unknown; age: unknown } = { name: \"Alice\", age: 30 }\n * if (personPredicate(value)) {\n *   // value is narrowed to { name: string; age: number }\n *   assert.strictEqual(value.name.toUpperCase(), \"ALICE\")\n *   assert.strictEqual(value.age.toFixed(0), \"30\")\n * }\n * assert.strictEqual(personPredicate({ name: \"Bob\", age: \"40\" }), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const struct: {\n  /**\n   * Combines a record of predicates into a single predicate that tests a record of values.\n   * This function is highly type-aware and will produce a `Refinement` if any of the provided\n   * predicates are `Refinement`s, allowing for powerful type-narrowing of structs.\n   *\n   * - If all predicates are `Predicate<T>`, the result is `Predicate<{ k: T, ... }>`.\n   * - If any predicate is a `Refinement<A, B>`, the result is a `Refinement` that narrows\n   *   the input record type to a more specific record type.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const personPredicate = Predicate.struct({\n   *   name: isString,\n   *   age: isNumber\n   * })\n   *\n   * const value: { name: unknown; age: unknown } = { name: \"Alice\", age: 30 }\n   * if (personPredicate(value)) {\n   *   // value is narrowed to { name: string; age: number }\n   *   assert.strictEqual(value.name.toUpperCase(), \"ALICE\")\n   *   assert.strictEqual(value.age.toFixed(0), \"30\")\n   * }\n   * assert.strictEqual(personPredicate({ name: \"Bob\", age: \"40\" }), false)\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <R extends Record<string, Predicate.Any>>(fields: R): [Extract<R[keyof R], Refinement.Any>] extends [never] ?\n    Predicate<{ readonly [K in keyof R]: Predicate.In<R[K]> }> :\n    Refinement<\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.In<R[K]> : Predicate.In<R[K]> },\n      { readonly [K in keyof R]: R[K] extends Refinement.Any ? Refinement.Out<R[K]> : Predicate.In<R[K]> }\n    >\n} = (<R extends Record<string, Predicate.Any>>(fields: R) => {\n  const keys = Object.keys(fields)\n  return (a: Record<string, unknown>) => {\n    for (const key of keys) {\n      if (!fields[key](a[key] as never)) {\n        return false\n      }\n    }\n    return true\n  }\n}) as any\n\n/**\n * Returns a new predicate that is the logical negation of the given predicate.\n *\n * **Note**: If the input is a `Refinement`, the resulting predicate will be a\n * simple `Predicate`, as TypeScript cannot infer the negative type.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate, Number } from \"effect\"\n *\n * const isNonPositive = Predicate.not(Number.greaterThan(0))\n *\n * assert.strictEqual(isNonPositive(-1), true)\n * assert.strictEqual(isNonPositive(0), true)\n * assert.strictEqual(isNonPositive(1), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = <A>(self: Predicate<A>): Predicate<A> => (a) => !self(a)\n\n/**\n * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n * if at least one of the predicates returns `true`.\n *\n * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n * union of their target types (`B | C`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isString = (u: unknown): u is string => typeof u === \"string\"\n * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n *\n * const isStringOrNumber = Predicate.or(isString, isNumber)\n *\n * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n * assert.strictEqual(isStringOrNumber(123), true)\n * assert.strictEqual(isStringOrNumber(null), false)\n *\n * const value: unknown = \"world\"\n * if (isStringOrNumber(value)) {\n *   // value is narrowed to string | number\n *   console.log(value)\n * }\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or: {\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B | C>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B | C>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"OR\". The resulting predicate returns `true`\n   * if at least one of the predicates returns `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * union of their target types (`B | C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isString = (u: unknown): u is string => typeof u === \"string\"\n   * const isNumber = (u: unknown): u is number => typeof u === \"number\"\n   *\n   * const isStringOrNumber = Predicate.or(isString, isNumber)\n   *\n   * assert.strictEqual(isStringOrNumber(\"hello\"), true)\n   * assert.strictEqual(isStringOrNumber(123), true)\n   * assert.strictEqual(isStringOrNumber(null), false)\n   *\n   * const value: unknown = \"world\"\n   * if (isStringOrNumber(value)) {\n   *   // value is narrowed to string | number\n   *   console.log(value)\n   * }\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) || that(a))\n\n/**\n * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n * only if both of the predicates return `true`.\n *\n * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n * intersection of their target types (`B & C`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * type Person = { name: string }\n * type Employee = { id: number }\n *\n * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n *\n * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n *\n * const val: unknown = { name: \"Alice\", id: 123 }\n * if (isPersonAndEmployee(val)) {\n *   // val is narrowed to Person & Employee\n *   assert.strictEqual(val.name, \"Alice\")\n *   assert.strictEqual(val.id, 123)\n * }\n *\n * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and: {\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, C extends A>(that: Refinement<A, C>): <B extends A>(self: Refinement<A, B>) => Refinement<A, B & C>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A, B extends A, C extends A>(self: Refinement<A, B>, that: Refinement<A, C>): Refinement<A, B & C>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"AND\". The resulting predicate returns `true`\n   * only if both of the predicates return `true`.\n   *\n   * If both predicates are `Refinement`s, the resulting predicate is a `Refinement` to the\n   * intersection of their target types (`B & C`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type Person = { name: string }\n   * type Employee = { id: number }\n   *\n   * const hasName = (u: unknown): u is Person => Predicate.hasProperty(u, \"name\") && typeof (u as any).name === \"string\"\n   * const hasId = (u: unknown): u is Employee => Predicate.hasProperty(u, \"id\") && typeof (u as any).id === \"number\"\n   *\n   * const isPersonAndEmployee = Predicate.and(hasName, hasId)\n   *\n   * const val: unknown = { name: \"Alice\", id: 123 }\n   * if (isPersonAndEmployee(val)) {\n   *   // val is narrowed to Person & Employee\n   *   assert.strictEqual(val.name, \"Alice\")\n   *   assert.strictEqual(val.id, 123)\n   * }\n   *\n   * assert.strictEqual(isPersonAndEmployee({ name: \"Bob\" }), false) // Missing id\n   * assert.strictEqual(isPersonAndEmployee({ id: 456 }), false) // Missing name\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) && that(a))\n\n/**\n * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n * returns `true` if one of the predicates returns `true`, but not both.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n *\n * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const xor: {\n  /**\n   * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n   * returns `true` if one of the predicates returns `true`, but not both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n   * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"XOR\" (exclusive OR). The resulting predicate\n   * returns `true` if one of the predicates returns `true`, but not both.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveXorEven = Predicate.xor(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveXorEven(4), false)  // both true -> false\n   * assert.strictEqual(isPositiveXorEven(3), true)   // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-2), true)  // one true -> true\n   * assert.strictEqual(isPositiveXorEven(-1), false) // both false -> false\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) !== that(a))\n\n/**\n * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n *\n * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv: {\n  /**\n   * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n   * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n   * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"EQV\" (equivalence). The resulting predicate\n   * returns `true` if both predicates return the same boolean value (both `true` or both `false`).\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * const isPositive = (n: number) => n > 0\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * const isPositiveEqvEven = Predicate.eqv(isPositive, isEven)\n   *\n   * assert.strictEqual(isPositiveEqvEven(4), true)   // both true -> true\n   * assert.strictEqual(isPositiveEqvEven(3), false)  // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-2), false) // different -> false\n   * assert.strictEqual(isPositiveEqvEven(-1), true)  // both false -> true\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(2, <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => self(a) === that(a))\n\n/**\n * Creates a predicate that represents a logical \"if-then\" rule.\n *\n * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n *\n * This function is invaluable for defining complex validation logic where one condition dictates another.\n *\n * ### How It Works\n *\n * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n * In all other cases, the promise is considered kept, and the result is `true`.\n *\n * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n * If it doesn't rain, you haven't broken your promise, no matter what).\n *\n * ### Key Details\n *\n * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n *\n * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n *\n * @example\n * ```ts\n * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * type User = {\n *   isStaff: boolean\n *   isAdmin: boolean\n * }\n *\n * const isValidUserPermission = Predicate.implies(\n *   // antecedent: \"if\" the user is an admin...\n *   (user: User) => user.isAdmin,\n *   // consequent: \"then\" they must be staff.\n *   (user: User) => user.isStaff\n * )\n *\n * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n *\n * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n *\n * // An admin who is also staff. The rule was followed.\n * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n *\n * // An admin who is NOT staff. The rule was broken!\n * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n * ```\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies: {\n  /**\n   * Creates a predicate that represents a logical \"if-then\" rule.\n   *\n   * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n   *\n   * This function is invaluable for defining complex validation logic where one condition dictates another.\n   *\n   * ### How It Works\n   *\n   * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n   * In all other cases, the promise is considered kept, and the result is `true`.\n   *\n   * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n   * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n   * If it doesn't rain, you haven't broken your promise, no matter what).\n   *\n   * ### Key Details\n   *\n   * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n   *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n   *\n   * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n   *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n   *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n   *\n   * @example\n   * ```ts\n   * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type User = {\n   *   isStaff: boolean\n   *   isAdmin: boolean\n   * }\n   *\n   * const isValidUserPermission = Predicate.implies(\n   *   // antecedent: \"if\" the user is an admin...\n   *   (user: User) => user.isAdmin,\n   *   // consequent: \"then\" they must be staff.\n   *   (user: User) => user.isStaff\n   * )\n   *\n   * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n   *\n   * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n   *\n   * // An admin who is also staff. The rule was followed.\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n   *\n   * // An admin who is NOT staff. The rule was broken!\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(consequent: Predicate<A>): (antecedent: Predicate<A>) => Predicate<A>\n  /**\n   * Creates a predicate that represents a logical \"if-then\" rule.\n   *\n   * Think of it as a conditional promise: **\"If `antecedent` holds true, then I promise `consequent` will also be true.\"**\n   *\n   * This function is invaluable for defining complex validation logic where one condition dictates another.\n   *\n   * ### How It Works\n   *\n   * The rule only fails (returns `false`) when the \"if\" part is `true`, but the \"then\" part is `false`.\n   * In all other cases, the promise is considered kept, and the result is `true`.\n   *\n   * This includes the concept of **\"vacuous truth\"**: if the \"if\" part is `false`, the rule doesn't apply,\n   * so the promise isn't broken, and the result is `true`. (e.g., \"If it rains, I'll bring an umbrella.\"\n   * If it doesn't rain, you haven't broken your promise, no matter what).\n   *\n   * ### Key Details\n   *\n   * - **Logical Equivalence**: `implies(p, q)` is the same as `not(p).or(q)`, or simply `!p || q`\n   *   in plain JavaScript. This can be a helpful way to reason about its behavior.\n   *\n   * - **Type-Safety Warning**: This function always returns a `Predicate`, never a type-narrowing\n   *   `Refinement`. A `true` result doesn't guarantee the `consequent` passed (it could be `true`\n   *   simply because the `antecedent` was `false`), so it cannot be used to safely narrow a type.\n   *\n   * @example\n   * ```ts\n   * // Rule: A user can only be an admin if they also belong to the \"staff\" group.\n   * import * as assert from \"node:assert\"\n   * import { Predicate } from \"effect\"\n   *\n   * type User = {\n   *   isStaff: boolean\n   *   isAdmin: boolean\n   * }\n   *\n   * const isValidUserPermission = Predicate.implies(\n   *   // antecedent: \"if\" the user is an admin...\n   *   (user: User) => user.isAdmin,\n   *   // consequent: \"then\" they must be staff.\n   *   (user: User) => user.isStaff\n   * )\n   *\n   * // A non-admin who is not staff. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: false }), true)\n   *\n   * // A staff member who is not an admin. Rule doesn't apply (antecedent is false).\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: false }), true)\n   *\n   * // An admin who is also staff. The rule was followed.\n   * assert.strictEqual(isValidUserPermission({ isStaff: true, isAdmin: true }), true)\n   *\n   * // An admin who is NOT staff. The rule was broken!\n   * assert.strictEqual(isValidUserPermission({ isStaff: false, isAdmin: true }), false)\n   * ```\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(antecedent: Predicate<A>, consequent: Predicate<A>): Predicate<A> => (a) => antecedent(a) ? consequent(a) : true\n)\n\n/**\n * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n * returns `true` only if both predicates return `false`.\n * This is equivalent to `not(or(p, q))`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nor: {\n  /**\n   * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n   * returns `true` only if both predicates return `false`.\n   * This is equivalent to `not(or(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"NOR\" (negated OR). The resulting predicate\n   * returns `true` only if both predicates return `false`.\n   * This is equivalent to `not(or(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) || that(a))\n)\n\n/**\n * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n * returns `true` if at least one of the predicates returns `false`.\n * This is equivalent to `not(and(p, q))`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const nand: {\n  /**\n   * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n   * returns `true` if at least one of the predicates returns `false`.\n   * This is equivalent to `not(and(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(that: Predicate<A>): (self: Predicate<A>) => Predicate<A>\n  /**\n   * Combines two predicates with a logical \"NAND\" (negated AND). The resulting predicate\n   * returns `true` if at least one of the predicates returns `false`.\n   * This is equivalent to `not(and(p, q))`.\n   *\n   * @category combinators\n   * @since 2.0.0\n   */\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A>\n} = dual(\n  2,\n  <A>(self: Predicate<A>, that: Predicate<A>): Predicate<A> => (a) => !(self(a) && that(a))\n)\n\n/**\n * Takes an iterable of predicates and returns a new predicate. The new predicate\n * returns `true` if all predicates in the collection return `true` for a given value.\n *\n * This is like `Array.prototype.every` but for a collection of predicates.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isPositive = (n: number) => n > 0\n * const isEven = (n: number) => n % 2 === 0\n *\n * const isPositiveAndEven = Predicate.every([isPositive, isEven])\n *\n * assert.strictEqual(isPositiveAndEven(4), true)\n * assert.strictEqual(isPositiveAndEven(3), false)\n * assert.strictEqual(isPositiveAndEven(-2), false)\n * ```\n *\n * @category elements\n * @since 2.0.0\n * @see some\n */\nexport const every = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a: A) => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Takes an iterable of predicates and returns a new predicate. The new predicate\n * returns `true` if at least one predicate in the collection returns `true` for a given value.\n *\n * This is like `Array.prototype.some` but for a collection of predicates.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Predicate } from \"effect\"\n *\n * const isNegative = (n: number) => n < 0\n * const isOdd = (n: number) => n % 2 !== 0\n *\n * const isNegativeOrOdd = Predicate.some([isNegative, isOdd])\n *\n * assert.strictEqual(isNegativeOrOdd(-2), true) // isNegative is true\n * assert.strictEqual(isNegativeOrOdd(3), true)  // isOdd is true\n * assert.strictEqual(isNegativeOrOdd(4), false) // both are false\n * ```\n *\n * @category elements\n * @since 2.0.0\n * @see every\n */\nexport const some = <A>(collection: Iterable<Predicate<A>>): Predicate<A> => (a) => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true\n    }\n  }\n  return false\n}\n","/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Equivalence<in A> {\n  (self: A, that: A): boolean\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EquivalenceTypeLambda extends TypeLambda {\n  readonly type: Equivalence<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(isEquivalent: (self: A, that: A) => boolean): Equivalence<A> => (self: A, that: A): boolean =>\n  self === that || isEquivalent(self, that)\n\nconst isStrictEquivalent = (x: unknown, y: unknown) => x === y\n\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict: <A>() => Equivalence<A> = () => isStrictEquivalent\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Equivalence<string> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Equivalence<number> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Equivalence<boolean> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Equivalence<bigint> = strict()\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol: Equivalence<symbol> = strict()\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Equivalence<A>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, that: Equivalence<A>): Equivalence<A> => make((x, y) => self(x, y) && that(x, y)))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Equivalence<A>>): (self: Equivalence<A>) => Equivalence<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A>\n} = dual(2, <A>(self: Equivalence<A>, collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  make((x, y) => {\n    if (!self(x, y)) {\n      return false\n    }\n    for (const equivalence of collection) {\n      if (!equivalence(x, y)) {\n        return false\n      }\n    }\n    return true\n  }))\n\nconst isAlwaysEquivalent: Equivalence<unknown> = (_x, _y) => true\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Equivalence<A>>): Equivalence<A> =>\n  combineMany(isAlwaysEquivalent, collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Equivalence<A>) => Equivalence<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B>\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, f: (b: B) => A): Equivalence<B> => make((x, y) => self(f(x), f(y)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Equivalence<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Equivalence<B>): <A>(self: Equivalence<A>) => Equivalence<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> // readonly because invariant\n} = dual(\n  2,\n  <A, B>(self: Equivalence<A>, that: Equivalence<B>): Equivalence<readonly [A, B]> =>\n    make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Equivalence<A>>): Equivalence<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n\n    let collectionLength = 0\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false\n      }\n      collectionLength++\n    }\n    return true\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Equivalence<A>,\n  collection: Iterable<Equivalence<A>>\n): Equivalence<readonly [A, ...Array<A>]> /* readonly because invariant */ => {\n  const equivalence = all(collection)\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)))\n}\n\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```ts skip-type-checking\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Equivalence<any>>>(\n  ...elements: T\n): Equivalence<Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(item: Equivalence<A>): Equivalence<ReadonlyArray<A>> =>\n  make((self, that) => {\n    if (self.length !== that.length) {\n      return false\n    }\n\n    for (let i = 0; i < self.length; i++) {\n      const isEq = item(self[i], that[i])\n      if (!isEq) {\n        return false\n      }\n    }\n\n    return true\n  })\n\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends Record<string, Equivalence<any>>>(\n  fields: R\n): Equivalence<{ readonly [K in keyof R]: [R[K]] extends [Equivalence<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n}\n","/**\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"../Array.js\"\n\n/** @internal */\nexport const isNonEmptyArray = <A>(self: ReadonlyArray<A>): self is NonEmptyArray<A> => self.length > 0\n","/**\n * @since 2.0.0\n */\nimport type * as FiberRefs from \"./FiberRefs.js\"\nimport { globalValue } from \"./GlobalValue.js\"\nimport { hasProperty, isFunction } from \"./Predicate.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\")\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type NodeInspectSymbol = typeof NodeInspectSymbol\n\n/**\n * @since 2.0.0\n * @category models\n */\nexport interface Inspectable {\n  toString(): string\n  toJSON(): unknown\n  [NodeInspectSymbol](): unknown\n}\n\n/**\n * @since 2.0.0\n */\nexport const toJSON = (x: unknown): unknown => {\n  try {\n    if (\n      hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) &&\n      x[\"toJSON\"].length === 0\n    ) {\n      return x.toJSON()\n    } else if (Array.isArray(x)) {\n      return x.map(toJSON)\n    }\n  } catch {\n    return {}\n  }\n  return redact(x)\n}\n\n/**\n * @since 2.0.0\n */\nexport const format = (x: unknown): string => JSON.stringify(x, null, 2)\n\n/**\n * @since 2.0.0\n */\nexport const BaseProto: Inspectable = {\n  toJSON() {\n    return toJSON(this)\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  },\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport abstract class Class {\n  /**\n   * @since 2.0.0\n   */\n  abstract toJSON(): unknown\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON()\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON())\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u: unknown, whitespace: number | string | undefined = 2): string => {\n  if (typeof u === \"string\") {\n    return u\n  }\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u)\n  } catch {\n    return String(u)\n  }\n}\n\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj: unknown, whitespace?: number | string | undefined): string => {\n  let cache: Array<unknown> = []\n  const retVal = JSON.stringify(\n    obj,\n    (_key, value) =>\n      typeof value === \"object\" && value !== null\n        ? cache.includes(value)\n          ? undefined // circular reference\n          : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value)\n            ? value[symbolRedactable](redactableState.fiberRefs)\n            : value)\n        : value,\n    whitespace\n  )\n  ;(cache as any) = undefined\n  return retVal\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport interface Redactable {\n  readonly [symbolRedactable]: (fiberRefs: FiberRefs.FiberRefs) => unknown\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const symbolRedactable: unique symbol = Symbol.for(\"effect/Inspectable/Redactable\")\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const isRedactable = (u: unknown): u is Redactable =>\n  typeof u === \"object\" && u !== null && symbolRedactable in u\n\nconst redactableState = globalValue(\"effect/Inspectable/redactableState\", () => ({\n  fiberRefs: undefined as FiberRefs.FiberRefs | undefined\n}))\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const withRedactableContext = <A>(context: FiberRefs.FiberRefs, f: () => A): A => {\n  const prev = redactableState.fiberRefs\n  redactableState.fiberRefs = context\n  try {\n    return f()\n  } finally {\n    redactableState.fiberRefs = prev\n  }\n}\n\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const redact = (u: unknown): unknown => {\n  if (isRedactable(u) && redactableState.fiberRefs !== undefined) {\n    return u[symbolRedactable](redactableState.fiberRefs)\n  }\n  return u\n}\n","let moduleVersion = \"3.18.4\"\n\nexport const getCurrentVersion = () => moduleVersion\n\nexport const setCurrentVersion = (version: string) => {\n  moduleVersion = version\n}\n","import type * as Channel from \"../Channel.js\"\nimport type * as Effect from \"../Effect.js\"\nimport type * as Effectable from \"../Effectable.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport { SingleShotGen, YieldWrap } from \"../Utils.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const EffectTypeId: Effect.EffectTypeId = Symbol.for(\"effect/Effect\") as Effect.EffectTypeId\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\"effect/Stream\") as Stream.StreamTypeId\n\n/** @internal */\nexport const SinkTypeId: Sink.SinkTypeId = Symbol.for(\"effect/Sink\") as Sink.SinkTypeId\n\n/** @internal */\nexport const ChannelTypeId: Channel.ChannelTypeId = Symbol.for(\"effect/Channel\") as Channel.ChannelTypeId\n\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _,\n\n  _V: version.getCurrentVersion()\n}\n\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: (_: never) => _,\n  /* c8 ignore next */\n  _In: (_: unknown) => _,\n  /* c8 ignore next */\n  _L: (_: never) => _,\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _R: (_: never) => _\n}\n\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: (_: never) => _,\n  /* c8 ignore next */\n  _InErr: (_: unknown) => _,\n  /* c8 ignore next */\n  _InElem: (_: unknown) => _,\n  /* c8 ignore next */\n  _InDone: (_: unknown) => _,\n  /* c8 ignore next */\n  _OutErr: (_: never) => _,\n  /* c8 ignore next */\n  _OutElem: (_: never) => _,\n  /* c8 ignore next */\n  _OutDone: (_: never) => _\n}\n\n/** @internal */\nexport const EffectPrototype: Effect.Effect<never> & Equal.Equal = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that: any) {\n    return this === that\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this))\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this)) as any\n  },\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const StructuralPrototype: Equal.Equal = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this))\n  },\n  [Equal.symbol](this: Equal.Equal, that: Equal.Equal) {\n    const selfKeys = Object.keys(this)\n    const thatKeys = Object.keys(that as object)\n    if (selfKeys.length !== thatKeys.length) {\n      return false\n    }\n    for (const key of selfKeys) {\n      if (!(key in (that as object) && Equal.equals((this as any)[key], (that as any)[key]))) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/** @internal */\nexport const CommitPrototype: Effect.Effect<never> = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n} as any\n\n/** @internal */\nexport const StructuralCommitPrototype: Effect.Effect<never> = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n} as any\n\n/** @internal */\nexport const Base: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = CommitPrototype\n  return Base as any\n})()\n\n/** @internal */\nexport const StructuralBase: Effectable.CommitPrimitive = (function() {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype\n  return Base as any\n})()\n","/** @internal */\nexport type OP_ASYNC = typeof OP_ASYNC\n\n/** @internal */\nexport const OP_ASYNC = \"Async\" as const\n\n/** @internal */\nexport type OP_COMMIT = typeof OP_COMMIT\n\n/** @internal */\nexport const OP_COMMIT = \"Commit\" as const\n\n/** @internal */\nexport type OP_FAILURE = typeof OP_FAILURE\n\n/** @internal */\nexport const OP_FAILURE = \"Failure\" as const\n\n/** @internal */\nexport type OP_ON_FAILURE = typeof OP_ON_FAILURE\n\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS = typeof OP_ON_SUCCESS\n\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\" as const\n\n/** @internal */\nexport type OP_ON_SUCCESS_AND_FAILURE = typeof OP_ON_SUCCESS_AND_FAILURE\n\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\" as const\n\n/** @internal */\nexport type OP_SUCCESS = typeof OP_SUCCESS\n\n/** @internal */\nexport const OP_SUCCESS = \"Success\" as const\n\n/** @internal */\nexport type OP_SYNC = typeof OP_SYNC\n\n/** @internal */\nexport const OP_SYNC = \"Sync\" as const\n\n/** @internal */\nexport const OP_TAG = \"Tag\" as const\n\n/** @internal */\nexport type OP_TAG = typeof OP_TAG\n\n/** @internal */\nexport type OP_UPDATE_RUNTIME_FLAGS = typeof OP_UPDATE_RUNTIME_FLAGS\n\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\" as const\n\n/** @internal */\nexport type OP_WHILE = typeof OP_WHILE\n\n/** @internal */\nexport const OP_WHILE = \"While\" as const\n\n/** @internal */\nexport type OP_ITERATOR = typeof OP_ITERATOR\n\n/** @internal */\nexport const OP_ITERATOR = \"Iterator\" as const\n\n/** @internal */\nexport type OP_WITH_RUNTIME = typeof OP_WITH_RUNTIME\n\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\" as const\n\n/** @internal */\nexport type OP_YIELD = typeof OP_YIELD\n\n/** @internal */\nexport const OP_YIELD = \"Yield\" as const\n\n/** @internal */\nexport type OP_REVERT_FLAGS = typeof OP_REVERT_FLAGS\n\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\" as const\n","/**\n * @since 2.0.0\n */\n\nimport type { Ctor } from \"./Types.js\"\n\n/**\n * @since 2.0.0\n * @category Models\n */\nexport interface Pipeable {\n  pipe<A>(this: A): A\n  pipe<A, B = never>(this: A, ab: (_: A) => B): B\n  pipe<A, B = never, C = never>(this: A, ab: (_: A) => B, bc: (_: B) => C): C\n  pipe<A, B = never, C = never, D = never>(this: A, ab: (_: A) => B, bc: (_: B) => C, cd: (_: C) => D): D\n  pipe<A, B = never, C = never, D = never, E = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E\n  ): E\n  pipe<A, B = never, C = never, D = never, E = never, F = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F\n  ): F\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G\n  ): G\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H\n  ): H\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I\n  ): I\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J\n  ): J\n  pipe<A, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never>(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K\n  ): K\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L\n  ): L\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M\n  ): M\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N\n  ): N\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O\n  ): O\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P\n  ): P\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q\n  ): Q\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R\n  ): R\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S\n  ): S\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T\n  ): T\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n  pipe<\n    A,\n    B = never,\n    C = never,\n    D = never,\n    E = never,\n    F = never,\n    G = never,\n    H = never,\n    I = never,\n    J = never,\n    K = never,\n    L = never,\n    M = never,\n    N = never,\n    O = never,\n    P = never,\n    Q = never,\n    R = never,\n    S = never,\n    T = never,\n    U = never\n  >(\n    this: A,\n    ab: (_: A) => B,\n    bc: (_: B) => C,\n    cd: (_: C) => D,\n    de: (_: D) => E,\n    ef: (_: E) => F,\n    fg: (_: F) => G,\n    gh: (_: G) => H,\n    hi: (_: H) => I,\n    ij: (_: I) => J,\n    jk: (_: J) => K,\n    kl: (_: K) => L,\n    lm: (_: L) => M,\n    mn: (_: M) => N,\n    no: (_: N) => O,\n    op: (_: O) => P,\n    pq: (_: P) => Q,\n    qr: (_: Q) => R,\n    rs: (_: R) => S,\n    st: (_: S) => T,\n    tu: (_: T) => U\n  ): U\n}\n\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = <A>(self: A, args: IArguments): unknown => {\n  switch (args.length) {\n    case 0:\n      return self\n    case 1:\n      return args[0](self)\n    case 2:\n      return args[1](args[0](self))\n    case 3:\n      return args[2](args[1](args[0](self)))\n    case 4:\n      return args[3](args[2](args[1](args[0](self))))\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))))\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))))\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))))\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))))\n    default: {\n      let ret = self\n      for (let i = 0, len = args.length; i < len; i++) {\n        ret = args[i](ret)\n      }\n      return ret\n    }\n  }\n}\n\n/**\n * @since 3.15.0\n * @category Models\n */\nexport interface PipeableConstructor {\n  new(...args: Array<any>): Pipeable\n}\n\n/**\n * @since 3.15.0\n * @category Prototypes\n */\nexport const Prototype: Pipeable = {\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\nconst Base: PipeableConstructor = (function() {\n  function PipeableBase() {}\n  PipeableBase.prototype = Prototype\n  return PipeableBase as any\n})()\n\n/**\n * @since 3.15.0\n * @category Constructors\n */\nexport const Class: {\n  /**\n   * @since 3.15.0\n   * @category Constructors\n   */\n  (): PipeableConstructor\n  /**\n   * @since 3.15.0\n   * @category Constructors\n   */\n  <TBase extends Ctor>(klass: TBase): TBase & PipeableConstructor\n} = (klass?: Ctor) =>\n  klass ?\n    class extends klass {\n      pipe() {\n        return pipeArguments(this, arguments)\n      }\n    }\n    : Base\n","/**\n * @since 2.0.0\n */\n\nimport * as Equal from \"../Equal.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type * as Option from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\n\nconst TypeId: Option.TypeId = Symbol.for(\"effect/Option\") as Option.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: (_: never) => _\n  },\n  [NodeInspectSymbol]<A>(this: Option.Option<A>) {\n    return this.toJSON()\n  },\n  toString<A>(this: Option.Option<A>) {\n    return format(this.toJSON())\n  }\n}\n\nconst SomeProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol]<A>(this: Option.Some<A>, that: unknown): boolean {\n    return isOption(that) && isSome(that) && Equal.equals(this.value, that.value)\n  },\n  [Hash.symbol]<A>(this: Option.Some<A>) {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)))\n  },\n  toJSON<A>(this: Option.Some<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    }\n  }\n})\n\nconst NoneHash = Hash.hash(\"None\")\nconst NoneProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol]<A>(this: Option.None<A>, that: unknown): boolean {\n    return isOption(that) && isNone(that)\n  },\n  [Hash.symbol]<A>(this: Option.None<A>) {\n    return NoneHash\n  },\n  toJSON<A>(this: Option.None<A>) {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    }\n  }\n})\n\n/** @internal */\nexport const isOption = (input: unknown): input is Option.Option<unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isNone = <A>(fa: Option.Option<A>): fa is Option.None<A> => fa._tag === \"None\"\n\n/** @internal */\nexport const isSome = <A>(fa: Option.Option<A>): fa is Option.Some<A> => fa._tag === \"Some\"\n\n/** @internal */\nexport const none: Option.Option<never> = Object.create(NoneProto)\n\n/** @internal */\nexport const some = <A>(value: A): Option.Option<A> => {\n  const a = Object.create(SomeProto)\n  a.value = value\n  return a\n}\n","import { dual } from \"../Function.js\"\nimport type { Kind, TypeLambda } from \"../HKT.js\"\nimport type { NoInfer } from \"../Types.js\"\n\ntype Map<F extends TypeLambda> = {\n  <A, B>(f: (a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n  <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B): Kind<F, R, O, E, B>\n}\n\ntype FlatMap<F extends TypeLambda> = {\n  <A, R2, O2, E2, B>(\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n  <R1, O1, E1, A, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    f: (a: A) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n}\n\n/** @internal */\nexport const let_ = <F extends TypeLambda>(\n  map: Map<F>\n): {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <R, O, E>(\n    self: Kind<F, R, O, E, A>\n  ) => Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R, O, E, A extends object, N extends string, B>(\n    self: Kind<F, R, O, E, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Kind<F, R, O, E, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    map(self, (a) => ({ ...a, [name]: f(a) }) as any))\n\n/** @internal */\nexport const bindTo = <F extends TypeLambda>(map: Map<F>): {\n  <N extends string>(\n    name: N\n  ): <R, O, E, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, { [K in N]: A }>\n  <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }>\n} =>\n  dual(2, <R, O, E, A, N extends string>(\n    self: Kind<F, R, O, E, A>,\n    name: N\n  ): Kind<F, R, O, E, { [K in N]: A }> => map(self, (a) => ({ [name]: a } as { [K in N]: A })))\n\n/** @internal */\nexport const bind = <F extends TypeLambda>(map: Map<F>, flatMap: FlatMap<F>): {\n  <N extends string, A extends object, R2, O2, E2, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Kind<F, R2, O2, E2, B>\n  ): <R1, O1, E1>(\n    self: Kind<F, R1, O1, E1, A>\n  ) => Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n  <R1, O1, E1, A extends object, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }>\n} =>\n  dual(3, <R1, O1, E1, A, N extends string, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Kind<F, R2, O2, E2, B>\n  ): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B }> =>\n    flatMap(\n      self,\n      (a) => map(f(a), (b) => ({ ...a, [name]: b }) as { [K in keyof A | N]: K extends keyof A ? A[K] : B })\n    ))\n","/**\n * @since 2.0.0\n */\n\nimport type * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport { dual } from \"../Function.js\"\nimport * as Hash from \"../Hash.js\"\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\"\nimport type { Option } from \"../Option.js\"\nimport { hasProperty } from \"../Predicate.js\"\nimport { EffectPrototype } from \"./effectable.js\"\nimport * as option from \"./option.js\"\n\n/**\n * @internal\n */\nexport const TypeId: Either.TypeId = Symbol.for(\"effect/Either\") as Either.TypeId\n\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _R: (_: never) => _\n  },\n  [NodeInspectSymbol]<L, R>(this: Either.Either<R, L>) {\n    return this.toJSON()\n  },\n  toString<L, R>(this: Either.Left<L, R>) {\n    return format(this.toJSON())\n  }\n}\n\nconst RightProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [Equal.symbol]<L, R>(this: Either.Right<L, R>, that: unknown): boolean {\n    return isEither(that) && isRight(that) && Equal.equals(this.right, that.right)\n  },\n  [Hash.symbol]<L, R>(this: Either.Right<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right))\n  },\n  toJSON<L, R>(this: Either.Right<L, R>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: toJSON(this.right)\n    }\n  }\n})\n\nconst LeftProto = Object.assign(Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [Equal.symbol]<L, R>(this: Either.Left<L, R>, that: unknown): boolean {\n    return isEither(that) && isLeft(that) && Equal.equals(this.left, that.left)\n  },\n  [Hash.symbol]<L, R>(this: Either.Left<L, R>) {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left))\n  },\n  toJSON<E, A>(this: Either.Left<E, A>) {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: toJSON(this.left)\n    }\n  }\n})\n\n/** @internal */\nexport const isEither = (input: unknown): input is Either.Either<unknown, unknown> => hasProperty(input, TypeId)\n\n/** @internal */\nexport const isLeft = <R, L>(ma: Either.Either<R, L>): ma is Either.Left<L, R> => ma._tag === \"Left\"\n\n/** @internal */\nexport const isRight = <R, L>(ma: Either.Either<R, L>): ma is Either.Right<L, R> => ma._tag === \"Right\"\n\n/** @internal */\nexport const left = <L>(left: L): Either.Either<never, L> => {\n  const a = Object.create(LeftProto)\n  a.left = left\n  return a\n}\n\n/** @internal */\nexport const right = <R>(right: R): Either.Either<R> => {\n  const a = Object.create(RightProto)\n  a.right = right\n  return a\n}\n\n/** @internal */\nexport const getLeft = <R, L>(\n  self: Either.Either<R, L>\n): Option<L> => (isRight(self) ? option.none : option.some(self.left))\n\n/** @internal */\nexport const getRight = <R, L>(\n  self: Either.Either<R, L>\n): Option<R> => (isLeft(self) ? option.none : option.some(self.right))\n\n/** @internal */\nexport const fromOption: {\n  <L>(onNone: () => L): <R>(self: Option<R>) => Either.Either<R, L>\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L>\n} = dual(\n  2,\n  <R, L>(self: Option<R>, onNone: () => L): Either.Either<R, L> =>\n    option.isNone(self) ? left(onNone()) : right(self.value)\n)\n","/**\n * @since 2.0.0\n */\n\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option_ from \"./internal/option.js\"\nimport type { Option } from \"./Option.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport { isFunction } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type Either<A, E = never> = Left<E, A> | Right<E, A>\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = either.TypeId\n\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n// TODO(4.0): flip the order of the type parameters\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Left<out E, out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Left\"\n  readonly _op: \"Left\"\n  readonly left: E\n  readonly [TypeId]: {\n    readonly _R: Covariant<A>\n    readonly _L: Covariant<E>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n// TODO(4.0): flip the order of the type parameters\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface Right<out E, out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Right\"\n  readonly _op: \"Right\"\n  readonly right: A\n  readonly [TypeId]: {\n    readonly _R: Covariant<A>\n    readonly _L: Covariant<E>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: EitherUnify<this>\n  [Unify.ignoreSymbol]?: EitherUnifyIgnore\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Either?: () => A[Unify.typeSymbol] extends Either<infer R0, infer L0> | infer _ ? Either<R0, L0> : never\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport interface EitherUnifyIgnore {}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface EitherTypeLambda extends TypeLambda {\n  readonly type: Either<this[\"Target\"], this[\"Out1\"]>\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Either {\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Left<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _E : never\n  /**\n   * @since 2.0.0\n   * @category type-level\n   */\n  export type Right<T extends Either<any, any>> = [T] extends [Either<infer _A, infer _E>] ? _A : never\n}\n\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right: <A>(a: A) => Either<A> = either.right\n\nconst void_: Either<void> = right(void 0)\nexport {\n  /**\n   * @category constructors\n   * @since 3.13.0\n   */\n  void_ as void\n}\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left: <E>(e: E) => Either<never, E> = either.left\n\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable: {\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(onNullable: (right: A) => E): (self: A) => Either<NonNullable<A>, E>\n  /**\n   * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n   * the provided default as a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(self: A, onNullable: (right: A) => E): Either<NonNullable<A>, E>\n} = dual(\n  2,\n  <A, E>(self: A, onNullable: (right: A) => E): Either<NonNullable<A>, E> =>\n    self == null ? left(onNullable(self)) : right(self)\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <E>(onNone: () => E): <A>(self: Option<A>) => Either<A, E>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n   * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, E>(self: Option<A>, onNone: () => E): Either<A, E>\n} = either.fromOption\n\nconst try_: {\n  <A, E>(\n    options: {\n      readonly try: LazyArg<A>\n      readonly catch: (error: unknown) => E\n    }\n  ): Either<A, E>\n  <A>(evaluate: LazyArg<A>): Either<A, unknown>\n} = (<A, E>(\n  evaluate: LazyArg<A> | {\n    readonly try: LazyArg<A>\n    readonly catch: (error: unknown) => E\n  }\n) => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate())\n    } catch (e) {\n      return left(e)\n    }\n  } else {\n    try {\n      return right(evaluate.try())\n    } catch (e) {\n      return left(evaluate.catch(e))\n    }\n  }\n}) as any\n\nexport {\n  /**\n   * Imports a synchronous side-effect into a pure `Either` value, translating any\n   * thrown exceptions into typed failed eithers creating with `Either.left`.\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  try_ as try\n}\n\n/**\n * Tests if a value is a `Either`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither: (input: unknown) => input is Either<unknown, unknown> = either.isEither\n\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft: <A, E>(self: Either<A, E>) => self is Left<E, A> = either.isLeft\n\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight: <A, E>(self: Either<A, E>) => self is Right<E, A> = either.isRight\n\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight: <A, E>(self: Either<A, E>) => Option<A> = either.getRight\n\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft: <A, E>(self: Either<A, E>) => Option<E> = either.getLeft\n\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A, E>({ left, right }: {\n  right: Equivalence.Equivalence<A>\n  left: Equivalence.Equivalence<E>\n}): Equivalence.Equivalence<Either<A, E>> =>\n  Equivalence.make((x, y) =>\n    isLeft(x) ?\n      isLeft(y) && left(x.left, y.left) :\n      isRight(y) && right(x.right, y.right)\n  )\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <E, E2, A, A2>(\n    options: {\n      readonly onLeft: (left: E) => E2\n      readonly onRight: (right: A) => A2\n    }\n  ): (self: Either<A, E>) => Either<A2, E2>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, E2, A2>(\n    self: Either<A, E>,\n    options: {\n      readonly onLeft: (left: E) => E2\n      readonly onRight: (right: A) => A2\n    }\n  ): Either<A2, E2>\n} = dual(\n  2,\n  <A, E, E2, A2>(self: Either<A, E>, { onLeft, onRight }: {\n    readonly onLeft: (left: E) => E2\n    readonly onRight: (right: A) => A2\n  }): Either<A2, E2> => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right))\n)\n\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft: {\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <E, E2>(f: (left: E) => E2): <A>(self: Either<A, E>) => Either<A, E2>\n  /**\n   * Maps the `Left` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, E2>(self: Either<A, E>, f: (left: E) => E2): Either<A, E2>\n} = dual(\n  2,\n  <A, E, E2>(self: Either<A, E>, f: (left: E) => E2): Either<A, E2> =>\n    isLeft(self) ? left(f(self.left)) : right(self.right)\n)\n\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, A2>(f: (right: A) => A2): <E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Maps the `Right` side of an `Either` value to a new `Either` value.\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E>\n} = dual(\n  2,\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E> =>\n    isRight(self) ? right(f(self.right)) : left(self.left)\n)\n\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <E, B, A, C = B>(\n    options: {\n      readonly onLeft: (left: E) => B\n      readonly onRight: (right: A) => C\n    }\n  ): (self: Either<A, E>) => B | C\n  /**\n   * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n   * if the value is a `Right` the inner value is applied to the `onRight` function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n   *\n   * const onRight = (value: number): string => `Ok: ${value}`\n   *\n   * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n   * assert.deepStrictEqual(\n   *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n   *   'strings: string 1, string 2'\n   * )\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, E, B, C = B>(\n    self: Either<A, E>,\n    options: {\n      readonly onLeft: (left: E) => B\n      readonly onRight: (right: A) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <A, E, B, C = B>(self: Either<A, E>, { onLeft, onRight }: {\n    readonly onLeft: (left: E) => B\n    readonly onRight: (right: A) => C\n  }): B | C => isLeft(self) ? onLeft(self.left) : onRight(self.right)\n)\n\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *\n * assert.deepStrictEqual(\n *   isPositiveEither(1),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   isPositiveEither(0),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate: {\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, B extends A, E>(refinement: Refinement<A, B>, orLeftWith: (a: A) => E): (a: A) => Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <B extends A, E, A = B>(predicate: Predicate<A>, orLeftWith: (a: A) => E): (a: B) => Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <A, E, B extends A>(self: A, refinement: Refinement<A, B>, orLeftWith: (a: A) => E): Either<B, E>\n  /**\n   * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n   * or `Left` of the result of the provided function if the predicate returns false\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   * const isPositiveEither = Either.liftPredicate(isPositive, n => `${n} is not positive`)\n   *\n   * assert.deepStrictEqual(\n   *   isPositiveEither(1),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   isPositiveEither(0),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @category lifting\n   * @since 3.4.0\n   */\n  <B extends A, E, A = B>(self: B, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<B, E>\n} = dual(\n  3,\n  <A, E>(a: A, predicate: Predicate<A>, orLeftWith: (a: A) => E): Either<A, E> =>\n    predicate(a) ? right(a) : left(orLeftWith(a))\n)\n\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n * ```\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft: {\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, B extends A, E2>(\n    refinement: Refinement<NoInfer<A>, B>,\n    orLeftWith: (right: NoInfer<A>) => E2\n  ): <E>(self: Either<A, E>) => Either<B, E2 | E>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E2>(predicate: Predicate<NoInfer<A>>, orLeftWith: (right: NoInfer<A>) => E2): <E>(self: Either<A, E>) => Either<A, E2 | E>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, B extends A, E2>(\n    self: Either<A, E>,\n    refinement: Refinement<A, B>,\n    orLeftWith: (right: A) => E2\n  ): Either<B, E | E2>\n  /**\n   * Filter the right value with the provided function.\n   * If the predicate fails, set the left value with the result of the provided function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Either } from \"effect\"\n   *\n   * const isPositive = (n: number): boolean => n > 0\n   *\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(1),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.right(1)\n   * )\n   * assert.deepStrictEqual(\n   *   pipe(\n   *     Either.right(0),\n   *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n   *   ),\n   *   Either.left(\"0 is not positive\")\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   * @category filtering & conditionals\n   */\n  <A, E, E2>(self: Either<A, E>, predicate: Predicate<A>, orLeftWith: (right: A) => E2): Either<A, E | E2>\n} = dual(3, <A, E, E2>(\n  self: Either<A, E>,\n  predicate: Predicate<A>,\n  orLeftWith: (right: A) => E2\n): Either<A, E | E2> => flatMap(self, (r) => predicate(r) ? right(r) : left(orLeftWith(r))))\n\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge: <A, E>(self: Either<A, E>) => E | A = match({\n  onLeft: identity,\n  onRight: identity\n})\n\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <E, A2>(onLeft: (left: E) => A2): <A>(self: Either<A, E>) => A2 | A\n  /**\n   * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n   * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, onLeft: (left: E) => A2): A | A2\n} = dual(\n  2,\n  <A, E, A2>(self: Either<A, E>, onLeft: (left: E) => A2): A | A2 => isLeft(self) ? onLeft(self.left) : self.right\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull: <A, E>(self: Either<A, E>) => A | null = getOrElse(constNull)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A, E>(self: Either<A, E>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <E>(onLeft: (left: E) => unknown): <A>(self: Either<A, E>) => A\n  /**\n   * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n   *\n   * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n   *   1\n   * )\n   * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, E>(self: Either<A, E>, onLeft: (left: E) => unknown): A\n} = dual(2, <A, E>(self: Either<A, E>, onLeft: (left: E) => unknown): A => {\n  if (isRight(self)) {\n    return self.right\n  }\n  throw onLeft(self.left)\n})\n\n// TODO(4.0): by default should throw `L` (i.e getOrThrowWith with the identity function)\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n * ```\n *\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow: <A, E>(self: Either<A, E>) => A = getOrThrowWith(() =>\n  new Error(\"getOrThrow called on a Left\")\n)\n\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <E, A2, E2>(that: (left: E) => Either<A2, E2>): <A>(self: Either<A, E>) => Either<A | A2, E2>\n  /**\n   * Returns `self` if it is a `Right` or `that` otherwise.\n   *\n   * @category error handling\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, that: (left: E) => Either<A2, E2>): Either<A | A2, E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, that: (left: E) => Either<A2, E2>): Either<A | A2, E2> =>\n    isLeft(self) ? that(self.left) : right(self.right)\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2, E2>(f: (right: A) => Either<A2, E2>): <E>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2> =>\n    isLeft(self) ? left(self.left) : f(self.right)\n)\n\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2, E2>(f: (right: A) => Either<A2, E2>): <E>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A2, E2>(f: Either<A2, E2>): <E, A>(self: Either<A, E>) => Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, A2>(f: (right: A) => A2): <E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A2>(right: NotFunction<A2>): <A, E>(self: Either<A, E>) => Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2>): Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2, E2>(self: Either<A, E>, f: Either<A2, E2>): Either<A2, E | E2>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: (right: A) => A2): Either<A2, E>\n  /**\n   * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, E, A2>(self: Either<A, E>, f: NotFunction<A2>): Either<A2, E>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<A, E>, f: (right: A) => Either<A2, E2> | Either<A2, E2>): Either<A2, E | E2> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isEither(b) ? b : right(b)\n    })\n)\n\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A2, E2, A, B>(that: Either<A2, E2>, f: (right: A, right2: A2) => B): <E>(self: Either<A, E>) => Either<B, E2 | E>\n  /**\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, E, A2, E2, B>(self: Either<A, E>, that: Either<A2, E2>, f: (right: A, right2: A2) => B): Either<B, E | E2>\n} = dual(\n  3,\n  <A, E, A2, E2, B>(self: Either<A, E>, that: Either<A2, E2>, f: (right: A, right2: A2) => B): Either<B, E | E2> =>\n    flatMap(self, (r) => map(that, (r2) => f(r, r2)))\n)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, E2>(that: Either<A, E2>): <A2, E>(self: Either<(right: A) => A2, E>) => Either<A2, E | E2>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A, A2, E, E2>(self: Either<(right: A) => A2, E>, that: Either<A, E2>): Either<A2, E | E2>\n} = dual(\n  2,\n  <A, E, A2, E2>(self: Either<(right: A) => A2, E>, that: Either<A, E2>): Either<A2, E | E2> =>\n    zipWith(self, that, (f, a) => f(a))\n)\n\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n * ```\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Either<any, any>> | Record<string, Either<any, any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Either<any, any>>] ? Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer A, any>] ? A : never },\n    I[number] extends never ? never : [I[number]] extends [Either<any, infer E>] ? E : never\n  >\n  : [I] extends [Iterable<Either<infer A, infer E>>] ? Either<Array<A>, E>\n  : Either<\n    { -readonly [K in keyof I]: [I[K]] extends [Either<infer A, any>] ? A : never },\n    I[keyof I] extends never ? never : [I[keyof I]] extends [Either<any, infer E>] ? E : never\n  > = (\n    input: Iterable<Either<any, any>> | Record<string, Either<any, any>>\n  ): Either<any, any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Either<any, any>> = []\n      for (const e of input) {\n        if (isLeft(e)) {\n          return e\n        }\n        out.push(e.right)\n      }\n      return right(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const e = input[key]\n      if (isLeft(e)) {\n        return e\n      }\n      out[key] = e.right\n    }\n    return right(out)\n  }\n\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = <A, E>(self: Either<A, E>): Either<E, A> => isLeft(self) ? right(self.left) : left(self.right)\n\nconst adapter = Gen.adapter<EitherTypeLambda>()\n\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<EitherTypeLambda, Gen.Adapter<EitherTypeLambda>> = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorResult<any> = iterator.next()\n  while (!state.done) {\n    const current = Gen.isGenKind(state.value)\n      ? state.value.value\n      : Gen.yieldWrapGet(state.value)\n    if (isLeft(current)) {\n      return current\n    }\n    state = iterator.next(current.right as never)\n  }\n  return right(state.value) as any\n}\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do: Either<{}> = right({})\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B, E2>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Either<B, E2>): <E>(self: Either<A, E>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E | E2>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A extends object, E, N extends string, B, E2>(\n    self: Either<A, E>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Either<B, E2>\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E | E2>\n} = doNotation.bind<EitherTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A, E>(self: Either<A, E>) => Either<{ [K in N]: A }, E>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  <A, E, N extends string>(self: Either<A, E>, name: N): Either<{ [K in N]: A }, E>\n} = doNotation.bindTo<EitherTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (r: NoInfer<A>) => B\n  ): <E>(self: Either<A, E>) => Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E>\n  <A extends object, E, N extends string, B>(\n    self: Either<A, E>,\n    name: Exclude<N, keyof A>,\n    f: (r: NoInfer<A>) => B\n  ): Either<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E>\n} = doNotation.let_<EitherTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Either, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Either.Do,\n   *   Either.bind(\"x\", () => Either.right(2)),\n   *   Either.bind(\"y\", () => Either.right(3)),\n   *   Either.let(\"sum\", ({ x, y }) => x + y)\n   * )\n   * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link bind}\n   *\n   * @category do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * Converts an `Option` of an `Either` into an `Either` of an `Option`.\n *\n * **Details**\n *\n * This function transforms an `Option<Either<A, E>>` into an\n * `Either<Option<A>, E>`. If the `Option` is `None`, the resulting `Either`\n * will be a `Right` with a `None` value. If the `Option` is `Some`, the\n * inner `Either` will be executed, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Effect, Either, Option } from \"effect\"\n *\n * //      ┌─── Option<Either<number, never>>\n * //      ▼\n * const maybe = Option.some(Either.right(42))\n *\n * //      ┌─── Either<Option<number>, never, never>\n * //      ▼\n * const result = Either.transposeOption(maybe)\n *\n * console.log(Effect.runSync(result))\n * // Output: { _id: 'Option', _tag: 'Some', value: 42 }\n * ```\n *\n * @since 3.14.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeOption = <A = never, E = never>(\n  self: Option<Either<A, E>>\n): Either<Option<A>, E> => {\n  return option_.isNone(self) ? right(option_.none) : map(self.value, option_.some)\n}\n\n/**\n * Applies an `Either` on an `Option` and transposes the result.\n *\n * **Details**\n *\n * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n *\n * @example\n * ```ts\n * import { Either, Option, pipe } from \"effect\"\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const noneResult = pipe(\n *   Option.none(),\n *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n * )\n * console.log(noneResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n *\n * //          ┌─── Either<Option<number>, never>>\n * //          ▼\n * const someRightResult = pipe(\n *   Option.some(42),\n *   Either.transposeMapOption((value) => Either.right(value * 2))\n * )\n * console.log(someRightResult)\n * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n * ```\n *\n * @since 3.15.0\n * @category Optional Wrapping & Unwrapping\n */\nexport const transposeMapOption = dual<\n  /**\n   * Applies an `Either` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n   * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Either, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n   * )\n   * console.log(noneResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const someRightResult = pipe(\n   *   Option.some(42),\n   *   Either.transposeMapOption((value) => Either.right(value * 2))\n   * )\n   * console.log(someRightResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n   * ```\n   *\n   * @since 3.15.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never>(f: (self: A) => Either<B, E>) => (self: Option<A>) => Either<Option<B>, E>,\n  /**\n   * Applies an `Either` on an `Option` and transposes the result.\n   *\n   * **Details**\n   *\n   * If the `Option` is `None`, the resulting `Either` will immediately succeed with a `Right` value of `None`.\n   * If the `Option` is `Some`, the transformation function will be applied to the inner value, and its result wrapped in a `Some`.\n   *\n   * @example\n   * ```ts\n   * import { Either, Option, pipe } from \"effect\"\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const noneResult = pipe(\n   *   Option.none(),\n   *   Either.transposeMapOption(() => Either.right(42)) // will not be executed\n   * )\n   * console.log(noneResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'None' } }\n   *\n   * //          ┌─── Either<Option<number>, never>>\n   * //          ▼\n   * const someRightResult = pipe(\n   *   Option.some(42),\n   *   Either.transposeMapOption((value) => Either.right(value * 2))\n   * )\n   * console.log(someRightResult)\n   * // Output: { _id: 'Either', _tag: 'Right', right: { _id: 'Option', _tag: 'Some', value: 84 } }\n   * ```\n   *\n   * @since 3.15.0\n   * @category Optional Wrapping & Unwrapping\n   */\n  <A, B, E = never>(self: Option<A>, f: (self: A) => Either<B, E>) => Either<Option<B>, E>\n>(2, (self, f) => option_.isNone(self) ? right(option_.none) : map(f(self.value), option_.some))\n","/**\n * @since 2.0.0\n */\nimport type { Either } from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport type { Inspectable } from \"./Inspectable.js\"\nimport * as doNotation from \"./internal/doNotation.js\"\nimport * as either from \"./internal/either.js\"\nimport * as option from \"./internal/option.js\"\nimport type { Order } from \"./Order.js\"\nimport * as order from \"./Order.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\nimport type { Predicate, Refinement } from \"./Predicate.js\"\nimport type { Covariant, NoInfer, NotFunction } from \"./Types.js\"\nimport type * as Unify from \"./Unify.js\"\nimport * as Gen from \"./Utils.js\"\n\n/**\n * The `Option` data type represents optional values. An `Option<A>` can either\n * be `Some<A>`, containing a value of type `A`, or `None`, representing the\n * absence of a value.\n *\n * **When to Use**\n *\n * You can use `Option` in scenarios like:\n *\n * - Using it for initial values\n * - Returning values from functions that are not defined for all possible\n *   inputs (referred to as “partial functions”)\n * - Managing optional fields in data structures\n * - Handling optional function arguments\n *\n * @category Models\n * @since 2.0.0\n */\nexport type Option<A> = None<A> | Some<A>\n\n/**\n * @category Symbols\n * @since 2.0.0\n */\nexport const TypeId: unique symbol = Symbol.for(\"effect/Option\")\n\n/**\n * @category Symbols\n * @since 2.0.0\n */\nexport type TypeId = typeof TypeId\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface None<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"None\"\n  readonly _op: \"None\"\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface Some<out A> extends Pipeable, Inspectable {\n  readonly _tag: \"Some\"\n  readonly _op: \"Some\"\n  readonly value: A\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  [Unify.typeSymbol]?: unknown\n  [Unify.unifySymbol]?: OptionUnify<this>\n  [Unify.ignoreSymbol]?: OptionUnifyIgnore\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface OptionUnify<A extends { [Unify.typeSymbol]?: any }> {\n  Option?: () => A[Unify.typeSymbol] extends Option<infer A0> | infer _ ? Option<A0> : never\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace Option {\n  /**\n   * Extracts the type of the value contained in an `Option`.\n   *\n   * **Example** (Getting the Value Type of an Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Declare an Option holding a string\n   * declare const myOption: Option.Option<string>\n   *\n   * // Extract the type of the value within the Option\n   * //\n   * //      ┌─── string\n   * //      ▼\n   * type MyType = Option.Option.Value<typeof myOption>\n   * ```\n   *\n   * @since 2.0.0\n   * @category Type-level Utils\n   */\n  export type Value<T extends Option<any>> = [T] extends [Option<infer _A>] ? _A : never\n}\n\n/**\n * @category Models\n * @since 2.0.0\n */\nexport interface OptionUnifyIgnore {}\n\n/**\n * @category Type Lambdas\n * @since 2.0.0\n */\nexport interface OptionTypeLambda extends TypeLambda {\n  readonly type: Option<this[\"Target\"]>\n}\n\n/**\n * Represents the absence of a value by creating an empty `Option`.\n *\n * `Option.none` returns an `Option<never>`, which is a subtype of `Option<A>`.\n * This means you can use it in place of any `Option<A>` regardless of the type\n * `A`.\n *\n * **Example** (Creating an Option with No Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding no value\n * //\n * //      ┌─── Option<never>\n * //      ▼\n * const noValue = Option.none()\n *\n * console.log(noValue)\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link some} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const none = <A = never>(): Option<A> => option.none\n\n/**\n * Wraps the given value into an `Option` to represent its presence.\n *\n * **Example** (Creating an Option with a Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * // An Option holding the number 1\n * //\n * //      ┌─── Option<number>\n * //      ▼\n * const value = Option.some(1)\n *\n * console.log(value)\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @see {@link none} for the opposite operation.\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const some: <A>(value: A) => Option<A> = option.some\n\n/**\n * Determines whether the given value is an `Option`.\n *\n * **Details**\n *\n * This function checks if a value is an instance of `Option`. It returns `true`\n * if the value is either `Option.some` or `Option.none`, and `false` otherwise.\n * This is particularly useful when working with unknown values or when you need\n * to ensure type safety in your code.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isOption(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isOption(Option.none()))\n * // Output: true\n *\n * console.log(Option.isOption({}))\n * // Output: false\n * ```\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isOption: (input: unknown) => input is Option<unknown> = option.isOption\n\n/**\n * Checks whether an `Option` represents the absence of a value (`None`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isNone(Option.some(1)))\n * // Output: false\n *\n * console.log(Option.isNone(Option.none()))\n * // Output: true\n * ```\n *\n * @see {@link isSome} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isNone: <A>(self: Option<A>) => self is None<A> = option.isNone\n\n/**\n * Checks whether an `Option` contains a value (`Some`).\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.isSome(Option.some(1)))\n * // Output: true\n *\n * console.log(Option.isSome(Option.none()))\n * // Output: false\n * ```\n *\n * @see {@link isNone} for the opposite check.\n *\n * @category Guards\n * @since 2.0.0\n */\nexport const isSome: <A>(self: Option<A>) => self is Some<A> = option.isSome\n\n/**\n * Performs pattern matching on an `Option` to handle both `Some` and `None`\n * cases.\n *\n * **Details**\n *\n * This function allows you to match against an `Option` and handle both\n * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n * the `Option` is `Some` (i.e., contains a value). It executes one of the\n * provided functions based on the case:\n *\n * - If the `Option` is `None`, the `onNone` function is executed and its result\n *   is returned.\n * - If the `Option` is `Some`, the `onSome` function is executed with the\n *   contained value, and its result is returned.\n *\n * This function provides a concise and functional way to handle optional values\n * without resorting to `if` or manual checks, making your code more declarative\n * and readable.\n *\n * **Example** (Pattern Matching with Option)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const foo = Option.some(1)\n *\n * const message = Option.match(foo, {\n *   onNone: () => \"Option is empty\",\n *   onSome: (value) => `Option has a value: ${value}`\n * })\n *\n * console.log(message)\n * // Output: \"Option has a value: 1\"\n * ```\n *\n * @category Pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Performs pattern matching on an `Option` to handle both `Some` and `None`\n   * cases.\n   *\n   * **Details**\n   *\n   * This function allows you to match against an `Option` and handle both\n   * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n   * the `Option` is `Some` (i.e., contains a value). It executes one of the\n   * provided functions based on the case:\n   *\n   * - If the `Option` is `None`, the `onNone` function is executed and its result\n   *   is returned.\n   * - If the `Option` is `Some`, the `onSome` function is executed with the\n   *   contained value, and its result is returned.\n   *\n   * This function provides a concise and functional way to handle optional values\n   * without resorting to `if` or manual checks, making your code more declarative\n   * and readable.\n   *\n   * **Example** (Pattern Matching with Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const foo = Option.some(1)\n   *\n   * const message = Option.match(foo, {\n   *   onNone: () => \"Option is empty\",\n   *   onSome: (value) => `Option has a value: ${value}`\n   * })\n   *\n   * console.log(message)\n   * // Output: \"Option has a value: 1\"\n   * ```\n   *\n   * @category Pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): (self: Option<A>) => B | C\n  /**\n   * Performs pattern matching on an `Option` to handle both `Some` and `None`\n   * cases.\n   *\n   * **Details**\n   *\n   * This function allows you to match against an `Option` and handle both\n   * scenarios: when the `Option` is `None` (i.e., contains no value), and when\n   * the `Option` is `Some` (i.e., contains a value). It executes one of the\n   * provided functions based on the case:\n   *\n   * - If the `Option` is `None`, the `onNone` function is executed and its result\n   *   is returned.\n   * - If the `Option` is `Some`, the `onSome` function is executed with the\n   *   contained value, and its result is returned.\n   *\n   * This function provides a concise and functional way to handle optional values\n   * without resorting to `if` or manual checks, making your code more declarative\n   * and readable.\n   *\n   * **Example** (Pattern Matching with Option)\n   *\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const foo = Option.some(1)\n   *\n   * const message = Option.match(foo, {\n   *   onNone: () => \"Option is empty\",\n   *   onSome: (value) => `Option has a value: ${value}`\n   * })\n   *\n   * console.log(message)\n   * // Output: \"Option has a value: 1\"\n   * ```\n   *\n   * @category Pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: Option<A>,\n    options: {\n      readonly onNone: LazyArg<B>\n      readonly onSome: (a: A) => C\n    }\n  ): B | C\n} = dual(\n  2,\n  <A, B, C = B>(self: Option<A>, { onNone, onSome }: {\n    readonly onNone: LazyArg<B>\n    readonly onSome: (a: A) => C\n  }): B | C => isNone(self) ? onNone() : onSome(self.value)\n)\n\n/**\n * Converts an `Option`-returning function into a type guard.\n *\n * **Details**\n *\n * This function transforms a function that returns an `Option` into a type\n * guard, ensuring type safety when validating or narrowing types. The returned\n * type guard function checks whether the input satisfies the condition defined\n * in the original `Option`-returning function.\n *\n * If the original function returns `Option.some`, the type guard evaluates to\n * `true`, confirming the input is of the desired type. If the function returns\n * `Option.none`, the type guard evaluates to `false`.\n *\n * This utility is especially useful for validating types in union types,\n * filtering arrays, or ensuring safe handling of specific subtypes.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * type MyData = string | number\n *\n * const parseString = (data: MyData): Option.Option<string> =>\n *   typeof data === \"string\" ? Option.some(data) : Option.none()\n *\n * //      ┌─── (a: MyData) => a is string\n * //      ▼\n * const isString = Option.toRefinement(parseString)\n *\n * console.log(isString(\"a\"))\n * // Output: true\n *\n * console.log(isString(1))\n * // Output: false\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const toRefinement = <A, B extends A>(f: (a: A) => Option<B>): (a: A) => a is B => (a: A): a is B => isSome(f(a))\n\n/**\n * Converts an `Iterable` into an `Option`, wrapping the first element if it\n * exists.\n *\n * **Details**\n *\n * This function takes an `Iterable` (e.g., an array, a generator, or any object\n * implementing the `Iterable` interface) and returns an `Option` based on its\n * content:\n *\n * - If the `Iterable` contains at least one element, the first element is\n *   wrapped in a `Some` and returned.\n * - If the `Iterable` is empty, `None` is returned, representing the absence of\n *   a value.\n *\n * This utility is useful for safely handling collections that might be empty,\n * ensuring you explicitly handle both cases where a value exists or doesn't.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromIterable([1, 2, 3]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.fromIterable([]))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Option<A> => {\n  for (const a of collection) {\n    return some(a)\n  }\n  return none()\n}\n\n/**\n * Converts an `Either` into an `Option` by discarding the error and extracting\n * the right value.\n *\n * **Details**\n *\n * This function takes an `Either` and returns an `Option` based on its value:\n *\n * - If the `Either` is a `Right`, its value is wrapped in a `Some` and\n *   returned.\n * - If the `Either` is a `Left`, the error is discarded, and `None` is\n *   returned.\n *\n * This is particularly useful when you only care about the success case\n * (`Right`) of an `Either` and want to handle the result using `Option`. By\n * using this function, you can convert `Either` into a simpler structure for\n * cases where error handling is not required.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getRight(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'ok' }\n *\n * console.log(Option.getRight(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @see {@link getLeft} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getRight: <R, L>(self: Either<R, L>) => Option<R> = either.getRight\n\n/**\n * Converts an `Either` into an `Option` by discarding the right value and\n * extracting the left value.\n *\n * **Details**\n *\n * This function transforms an `Either` into an `Option` as follows:\n *\n * - If the `Either` is a `Left`, its value is wrapped in a `Some` and returned.\n * - If the `Either` is a `Right`, the value is discarded, and `None` is\n *   returned.\n *\n * This utility is useful when you only care about the error case (`Left`) of an\n * `Either` and want to handle it as an `Option`. By discarding the right value,\n * it simplifies error-focused workflows.\n *\n * @example\n * ```ts\n * import { Either, Option } from \"effect\"\n *\n * console.log(Option.getLeft(Either.right(\"ok\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.getLeft(Either.left(\"err\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'err' }\n * ```\n *\n * @see {@link getRight} for the opposite operation.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getLeft: <R, L>(self: Either<R, L>) => Option<L> = either.getLeft\n\n/**\n * Returns the value contained in the `Option` if it is `Some`, otherwise\n * evaluates and returns the result of `onNone`.\n *\n * **Details**\n *\n * This function allows you to provide a fallback value or computation for when\n * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n * is returned. If it is empty (`None`), the `onNone` function is executed, and\n * its result is returned instead.\n *\n * This utility is helpful for safely handling `Option` values by ensuring you\n * always receive a meaningful result, whether or not the `Option` contains a\n * value. It is particularly useful for providing default values or alternative\n * logic when working with optional values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n * // Output: 1\n *\n * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n * // Output: 0\n * ```\n *\n * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrElse: {\n  /**\n   * Returns the value contained in the `Option` if it is `Some`, otherwise\n   * evaluates and returns the result of `onNone`.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback value or computation for when\n   * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n   * is returned. If it is empty (`None`), the `onNone` function is executed, and\n   * its result is returned instead.\n   *\n   * This utility is helpful for safely handling `Option` values by ensuring you\n   * always receive a meaningful result, whether or not the `Option` contains a\n   * value. It is particularly useful for providing default values or alternative\n   * logic when working with optional values.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n   * // Output: 1\n   *\n   * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n   * // Output: 0\n   * ```\n   *\n   * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n   * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n   *\n   * @category Getters\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => B | A\n  /**\n   * Returns the value contained in the `Option` if it is `Some`, otherwise\n   * evaluates and returns the result of `onNone`.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback value or computation for when\n   * an `Option` is `None`. If the `Option` contains a value (`Some`), that value\n   * is returned. If it is empty (`None`), the `onNone` function is executed, and\n   * its result is returned instead.\n   *\n   * This utility is helpful for safely handling `Option` values by ensuring you\n   * always receive a meaningful result, whether or not the `Option` contains a\n   * value. It is particularly useful for providing default values or alternative\n   * logic when working with optional values.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(1).pipe(Option.getOrElse(() => 0)))\n   * // Output: 1\n   *\n   * console.log(Option.none().pipe(Option.getOrElse(() => 0)))\n   * // Output: 0\n   * ```\n   *\n   * @see {@link getOrNull} for a version that returns `null` instead of executing a function.\n   * @see {@link getOrUndefined} for a version that returns `undefined` instead of executing a function.\n   *\n   * @category Getters\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): A | B => isNone(self) ? onNone() : self.value\n)\n\n/**\n * Returns the provided `Option` `that` if the current `Option` (`self`) is\n * `None`; otherwise, it returns `self`.\n *\n * **Details**\n *\n * This function provides a fallback mechanism for `Option` values. If the\n * current `Option` is `None` (i.e., it contains no value), the `that` function\n * is evaluated, and its resulting `Option` is returned. If the current `Option`\n * is `Some` (i.e., it contains a value), the original `Option` is returned\n * unchanged.\n *\n * This is particularly useful for chaining fallback values or computations,\n * allowing you to provide alternative `Option` values when the first one is\n * empty.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n *\n * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElse: {\n  /**\n   * Returns the provided `Option` `that` if the current `Option` (`self`) is\n   * `None`; otherwise, it returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a fallback mechanism for `Option` values. If the\n   * current `Option` is `None` (i.e., it contains no value), the `that` function\n   * is evaluated, and its resulting `Option` is returned. If the current `Option`\n   * is `Some` (i.e., it contains a value), the original `Option` is returned\n   * unchanged.\n   *\n   * This is particularly useful for chaining fallback values or computations,\n   * allowing you to provide alternative `Option` values when the first one is\n   * empty.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided `Option` `that` if the current `Option` (`self`) is\n   * `None`; otherwise, it returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a fallback mechanism for `Option` values. If the\n   * current `Option` is `None` (i.e., it contains no value), the `that` function\n   * is evaluated, and its resulting `Option` is returned. If the current `Option`\n   * is `Some` (i.e., it contains a value), the original `Option` is returned\n   * unchanged.\n   *\n   * This is particularly useful for chaining fallback values or computations,\n   * allowing you to provide alternative `Option` values when the first one is\n   * empty.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.none())))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   *\n   * console.log(Option.none().pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElse(() => Option.some(\"b\"))))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<A | B> => isNone(self) ? that() : self\n)\n\n/**\n * Returns the provided default value wrapped in `Some` if the current `Option`\n * (`self`) is `None`; otherwise, returns `self`.\n *\n * **Details**\n *\n * This function provides a way to supply a default value for cases where an\n * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n * function is executed to compute the default value, which is then wrapped in a\n * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n * is.\n *\n * This is particularly useful for handling optional values where a fallback\n * default needs to be provided explicitly in case of absence.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n *\n * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElseSome: {\n  /**\n   * Returns the provided default value wrapped in `Some` if the current `Option`\n   * (`self`) is `None`; otherwise, returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a way to supply a default value for cases where an\n   * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n   * function is executed to compute the default value, which is then wrapped in a\n   * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n   * is.\n   *\n   * This is particularly useful for handling optional values where a fallback\n   * default needs to be provided explicitly in case of absence.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(onNone: LazyArg<B>): <A>(self: Option<A>) => Option<B | A>\n  /**\n   * Returns the provided default value wrapped in `Some` if the current `Option`\n   * (`self`) is `None`; otherwise, returns `self`.\n   *\n   * **Details**\n   *\n   * This function provides a way to supply a default value for cases where an\n   * `Option` is `None`. If the current `Option` is empty (`None`), the `onNone`\n   * function is executed to compute the default value, which is then wrapped in a\n   * `Some`. If the current `Option` contains a value (`Some`), it is returned as\n   * is.\n   *\n   * This is particularly useful for handling optional values where a fallback\n   * default needs to be provided explicitly in case of absence.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.none().pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'b' }\n   *\n   * console.log(Option.some(\"a\").pipe(Option.orElseSome(() => \"b\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, onNone: LazyArg<B>): Option<A | B> => isNone(self) ? some(onNone()) : self\n)\n\n/**\n * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n * indicate the source of the value.\n *\n * **Details**\n *\n * This function allows you to provide a fallback `Option` in case the current\n * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n * wrapped in an `Either` object, providing additional information about where\n * the value came from:\n *\n * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n *   `Either.right`.\n * - If the value is from the original `Option` (`self`), it is wrapped in an\n *   `Either.left`.\n *\n * This is especially useful when you need to differentiate between values\n * originating from the primary `Option` and those coming from the fallback,\n * while still maintaining the `Option`-style handling.\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const orElseEither: {\n  /**\n   * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n   * indicate the source of the value.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback `Option` in case the current\n   * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n   * wrapped in an `Either` object, providing additional information about where\n   * the value came from:\n   *\n   * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n   *   `Either.right`.\n   * - If the value is from the original `Option` (`self`), it is wrapped in an\n   *   `Either.left`.\n   *\n   * This is especially useful when you need to differentiate between values\n   * originating from the primary `Option` and those coming from the fallback,\n   * while still maintaining the `Option`-style handling.\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <B>(that: LazyArg<Option<B>>): <A>(self: Option<A>) => Option<Either<B, A>>\n  /**\n   * Similar to {@link orElse}, but returns an `Either` wrapped in an `Option` to\n   * indicate the source of the value.\n   *\n   * **Details**\n   *\n   * This function allows you to provide a fallback `Option` in case the current\n   * `Option` (`self`) is `None`. However, unlike `orElse`, it returns the value\n   * wrapped in an `Either` object, providing additional information about where\n   * the value came from:\n   *\n   * - If the value is from the fallback `Option` (`that`), it is wrapped in an\n   *   `Either.right`.\n   * - If the value is from the original `Option` (`self`), it is wrapped in an\n   *   `Either.left`.\n   *\n   * This is especially useful when you need to differentiate between values\n   * originating from the primary `Option` and those coming from the fallback,\n   * while still maintaining the `Option`-style handling.\n   *\n   * @category Error handling\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, that: LazyArg<Option<B>>): Option<Either<B, A>> =>\n    isNone(self) ? map(that(), either.right) : map(self, either.left)\n)\n\n/**\n * Returns the first `Some` value found in an `Iterable` collection of\n * `Option`s, or `None` if no `Some` is found.\n *\n * **Details**\n *\n * This function iterates over a collection of `Option` values and returns the\n * first `Some` it encounters. If the collection contains only `None` values,\n * the result will also be `None`. This utility is useful for efficiently\n * finding the first valid value in a sequence of potentially empty or invalid\n * options.\n *\n * The iteration stops as soon as a `Some` is found, making this function\n * efficient for large collections.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.firstSomeOf([\n *   Option.none(),\n *   Option.some(1),\n *   Option.some(2)\n * ]))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = <T, C extends Iterable<Option<T>> = Iterable<Option<T>>>(\n  collection: C\n): [C] extends [Iterable<Option<infer A>>] ? Option<A> : never => {\n  let out: Option<unknown> = none()\n  for (out of collection) {\n    if (isSome(out)) {\n      return out as any\n    }\n  }\n  return out as any\n}\n\n/**\n * Converts a nullable value into an `Option`. Returns `None` if the value is\n * `null` or `undefined`, otherwise wraps the value in a `Some`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.fromNullable(undefined))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(null))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.fromNullable(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(\n  nullableValue: A\n): Option<NonNullable<A>> => (nullableValue == null ? none() : some(nullableValue as NonNullable<A>))\n\n/**\n * Lifts a function that returns `null` or `undefined` into the `Option`\n * context.\n *\n * **Details**\n *\n * This function takes a function `f` that might return `null` or `undefined`\n * and transforms it into a function that returns an `Option`. The resulting\n * function will return:\n * - `Some` if the original function produces a non-null, non-undefined value.\n * - `None` if the original function produces `null` or `undefined`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * console.log(parseOption(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parseOption(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const liftNullable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Option<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `null`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `null` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `null` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `null` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrNull(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrNull(Option.none()))\n * // Output: null\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrNull: <A>(self: Option<A>) => A | null = getOrElse(constNull)\n\n/**\n * Returns the value contained in the `Option` if it is `Some`; otherwise,\n * returns `undefined`.\n *\n * **Details**\n *\n * This function provides a way to extract the value of an `Option` while\n * falling back to `undefined` if the `Option` is `None`.\n *\n * It is particularly useful in scenarios where `undefined` is an acceptable\n * placeholder for the absence of a value, such as when interacting with APIs or\n * systems that use `undefined` as a default for missing values.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.getOrUndefined(Option.some(1)))\n * // Output: 1\n *\n * console.log(Option.getOrUndefined(Option.none()))\n * // Output: undefined\n * ```\n *\n * @category Getters\n * @since 2.0.0\n */\nexport const getOrUndefined: <A>(self: Option<A>) => A | undefined = getOrElse(constUndefined)\n\n/**\n * Lifts a function that throws exceptions into a function that returns an\n * `Option`.\n *\n * **Details**\n *\n * This utility function takes a function `f` that might throw an exception and\n * transforms it into a safer function that returns an `Option`. If the original\n * function executes successfully, the result is wrapped in a `Some`. If an\n * exception is thrown, the result is `None`, allowing the developer to handle\n * errors in a functional, type-safe way.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * console.log(parse(\"1\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parse(\"\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const liftThrowable = <A extends ReadonlyArray<unknown>, B>(\n  f: (...a: A) => B\n): (...a: A) => Option<B> =>\n(...a) => {\n  try {\n    return some(f(...a))\n  } catch {\n    return none()\n  }\n}\n\n/**\n * Extracts the value of an `Option` or throws an error if the `Option` is\n * `None`, using a custom error factory.\n *\n * **Details**\n *\n * This function allows you to extract the value of an `Option` when it is\n * `Some`. If the `Option` is `None`, it throws an error generated by the\n * provided `onNone` function. This utility is particularly useful when you need\n * a fail-fast behavior for empty `Option` values and want to provide a custom\n * error message or object.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n * ```\n *\n * @see {@link getOrThrow} for a version that throws a default error.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith: {\n  /**\n   * Extracts the value of an `Option` or throws an error if the `Option` is\n   * `None`, using a custom error factory.\n   *\n   * **Details**\n   *\n   * This function allows you to extract the value of an `Option` when it is\n   * `Some`. If the `Option` is `None`, it throws an error generated by the\n   * provided `onNone` function. This utility is particularly useful when you need\n   * a fail-fast behavior for empty `Option` values and want to provide a custom\n   * error message or object.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   * ```\n   *\n   * @see {@link getOrThrow} for a version that throws a default error.\n   *\n   * @category Conversions\n   * @since 2.0.0\n   */\n  (onNone: () => unknown): <A>(self: Option<A>) => A\n  /**\n   * Extracts the value of an `Option` or throws an error if the `Option` is\n   * `None`, using a custom error factory.\n   *\n   * **Details**\n   *\n   * This function allows you to extract the value of an `Option` when it is\n   * `Some`. If the `Option` is `None`, it throws an error generated by the\n   * provided `onNone` function. This utility is particularly useful when you need\n   * a fail-fast behavior for empty `Option` values and want to provide a custom\n   * error message or object.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n   *   1\n   * )\n   * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n   * ```\n   *\n   * @see {@link getOrThrow} for a version that throws a default error.\n   *\n   * @category Conversions\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, onNone: () => unknown): A\n} = dual(2, <A>(self: Option<A>, onNone: () => unknown): A => {\n  if (isSome(self)) {\n    return self.value\n  }\n  throw onNone()\n})\n\n/**\n * Extracts the value of an `Option` or throws a default error if the `Option`\n * is `None`.\n *\n * **Details**\n *\n * This function extracts the value from an `Option` if it is `Some`. If the\n * `Option` is `None`, it throws a default error. It is useful for fail-fast\n * scenarios where the absence of a value is treated as an exceptional case and\n * a default error is sufficient.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n * ```\n *\n * @see {@link getOrThrowWith} for a version that allows you to provide a custom error.\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const getOrThrow: <A>(self: Option<A>) => A = getOrThrowWith(() => new Error(\"getOrThrow called on a None\"))\n\n/**\n * Transforms the value inside a `Some` to a new value using the provided\n * function, while leaving `None` unchanged.\n *\n * **Details**\n *\n * This function applies a mapping function `f` to the value inside an `Option`\n * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n * result is a new `Option` with the transformed value (if it was a `Some`) or\n * still `None`.\n *\n * This utility is particularly useful for chaining transformations in a\n * functional way without needing to manually handle `None` cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Mapping over a `Some`\n * const someValue = Option.some(2)\n *\n * console.log(Option.map(someValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n *\n * // Mapping over a `None`\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.map(noneValue, (n) => n * 2))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Transforms the value inside a `Some` to a new value using the provided\n   * function, while leaving `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function applies a mapping function `f` to the value inside an `Option`\n   * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n   * result is a new `Option` with the transformed value (if it was a `Some`) or\n   * still `None`.\n   *\n   * This utility is particularly useful for chaining transformations in a\n   * functional way without needing to manually handle `None` cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Mapping over a `Some`\n   * const someValue = Option.some(2)\n   *\n   * console.log(Option.map(someValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   *\n   * // Mapping over a `None`\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.map(noneValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Transforms the value inside a `Some` to a new value using the provided\n   * function, while leaving `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function applies a mapping function `f` to the value inside an `Option`\n   * if it is a `Some`. If the `Option` is `None`, it remains unchanged. The\n   * result is a new `Option` with the transformed value (if it was a `Some`) or\n   * still `None`.\n   *\n   * This utility is particularly useful for chaining transformations in a\n   * functional way without needing to manually handle `None` cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Mapping over a `Some`\n   * const someValue = Option.some(2)\n   *\n   * console.log(Option.map(someValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 4 }\n   *\n   * // Mapping over a `None`\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.map(noneValue, (n) => n * 2))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B> => isNone(self) ? none() : some(f(self.value))\n)\n\n/**\n * Replaces the value inside a `Some` with the specified constant value, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with the given constant value `b`. If the `Option` is `None`, it remains\n * unchanged.\n *\n * This is useful when you want to preserve the presence of a value (`Some`) but\n * replace its content with a fixed value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Replacing the value of a `Some`\n * const someValue = Option.some(42)\n *\n * console.log(Option.as(someValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n *\n * // Replacing a `None` (no effect)\n * const noneValue = Option.none<number>()\n *\n * console.log(Option.as(noneValue, \"new value\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const as: {\n  /**\n   * Replaces the value inside a `Some` with the specified constant value, leaving\n   * `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function transforms an `Option` by replacing the value inside a `Some`\n   * with the given constant value `b`. If the `Option` is `None`, it remains\n   * unchanged.\n   *\n   * This is useful when you want to preserve the presence of a value (`Some`) but\n   * replace its content with a fixed value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Replacing the value of a `Some`\n   * const someValue = Option.some(42)\n   *\n   * console.log(Option.as(someValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n   *\n   * // Replacing a `None` (no effect)\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.as(noneValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <B>(b: B): <X>(self: Option<X>) => Option<B>\n  /**\n   * Replaces the value inside a `Some` with the specified constant value, leaving\n   * `None` unchanged.\n   *\n   * **Details**\n   *\n   * This function transforms an `Option` by replacing the value inside a `Some`\n   * with the given constant value `b`. If the `Option` is `None`, it remains\n   * unchanged.\n   *\n   * This is useful when you want to preserve the presence of a value (`Some`) but\n   * replace its content with a fixed value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Replacing the value of a `Some`\n   * const someValue = Option.some(42)\n   *\n   * console.log(Option.as(someValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'new value' }\n   *\n   * // Replacing a `None` (no effect)\n   * const noneValue = Option.none<number>()\n   *\n   * console.log(Option.as(noneValue, \"new value\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Mapping\n   * @since 2.0.0\n   */\n  <X, B>(self: Option<X>, b: B): Option<B>\n} = dual(2, <X, B>(self: Option<X>, b: B): Option<B> => map(self, () => b))\n\n/**\n * Replaces the value inside a `Some` with the constant value `void`, leaving\n * `None` unchanged.\n *\n * **Details**\n *\n * This function transforms an `Option` by replacing the value inside a `Some`\n * with `void`. If the `Option` is `None`, it remains unchanged.\n *\n * This is particularly useful in scenarios where the presence or absence of a\n * value is significant, but the actual content of the value is irrelevant.\n *\n * @category Mapping\n * @since 2.0.0\n */\nexport const asVoid: <_>(self: Option<_>) => Option<void> = as(undefined)\n\nconst void_: Option<void> = some(undefined)\nexport {\n  /**\n   * @since 2.0.0\n   */\n  void_ as void\n}\n\n/**\n * Applies a function to the value of a `Some` and flattens the resulting\n * `Option`. If the input is `None`, it remains `None`.\n *\n * **Details**\n *\n * This function allows you to chain computations that return `Option` values.\n * If the input `Option` is `Some`, the provided function `f` is applied to the\n * contained value, and the resulting `Option` is returned. If the input is\n * `None`, the function is not applied, and the result remains `None`.\n *\n * This utility is particularly useful for sequencing operations that may fail\n * or produce optional results, enabling clean and concise workflows for\n * handling such cases.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Address {\n *   readonly city: string\n *   readonly street: Option.Option<string>\n * }\n *\n * interface User {\n *   readonly id: number\n *   readonly username: string\n *   readonly email: Option.Option<string>\n *   readonly address: Option.Option<Address>\n * }\n *\n * const user: User = {\n *   id: 1,\n *   username: \"john_doe\",\n *   email: Option.some(\"john.doe@example.com\"),\n *   address: Option.some({\n *     city: \"New York\",\n *     street: Option.some(\"123 Main St\")\n *   })\n * }\n *\n * // Use flatMap to extract the street value\n * const street = user.address.pipe(\n *   Option.flatMap((address) => address.street)\n * )\n *\n * console.log(street)\n * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to the value of a `Some` and flattens the resulting\n   * `Option`. If the input is `None`, it remains `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to chain computations that return `Option` values.\n   * If the input `Option` is `Some`, the provided function `f` is applied to the\n   * contained value, and the resulting `Option` is returned. If the input is\n   * `None`, the function is not applied, and the result remains `None`.\n   *\n   * This utility is particularly useful for sequencing operations that may fail\n   * or produce optional results, enabling clean and concise workflows for\n   * handling such cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Address {\n   *   readonly city: string\n   *   readonly street: Option.Option<string>\n   * }\n   *\n   * interface User {\n   *   readonly id: number\n   *   readonly username: string\n   *   readonly email: Option.Option<string>\n   *   readonly address: Option.Option<Address>\n   * }\n   *\n   * const user: User = {\n   *   id: 1,\n   *   username: \"john_doe\",\n   *   email: Option.some(\"john.doe@example.com\"),\n   *   address: Option.some({\n   *     city: \"New York\",\n   *     street: Option.some(\"123 Main St\")\n   *   })\n   * }\n   *\n   * // Use flatMap to extract the street value\n   * const street = user.address.pipe(\n   *   Option.flatMap((address) => address.street)\n   * )\n   *\n   * console.log(street)\n   * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Applies a function to the value of a `Some` and flattens the resulting\n   * `Option`. If the input is `None`, it remains `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to chain computations that return `Option` values.\n   * If the input `Option` is `Some`, the provided function `f` is applied to the\n   * contained value, and the resulting `Option` is returned. If the input is\n   * `None`, the function is not applied, and the result remains `None`.\n   *\n   * This utility is particularly useful for sequencing operations that may fail\n   * or produce optional results, enabling clean and concise workflows for\n   * handling such cases.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Address {\n   *   readonly city: string\n   *   readonly street: Option.Option<string>\n   * }\n   *\n   * interface User {\n   *   readonly id: number\n   *   readonly username: string\n   *   readonly email: Option.Option<string>\n   *   readonly address: Option.Option<Address>\n   * }\n   *\n   * const user: User = {\n   *   id: 1,\n   *   username: \"john_doe\",\n   *   email: Option.some(\"john.doe@example.com\"),\n   *   address: Option.some({\n   *     city: \"New York\",\n   *     street: Option.some(\"123 Main St\")\n   *   })\n   * }\n   *\n   * // Use flatMap to extract the street value\n   * const street = user.address.pipe(\n   *   Option.flatMap((address) => address.street)\n   * )\n   *\n   * console.log(street)\n   * // Output: { _id: 'Option', _tag: 'Some', value: '123 Main St' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B> => isNone(self) ? none() : f(self.value)\n)\n\n/**\n * Chains two `Option`s together. The second `Option` can either be a static\n * value or depend on the result of the first `Option`.\n *\n * **Details**\n *\n * This function enables sequencing of two `Option` computations. If the first\n * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n * either:\n *\n * - Be a static `Option` value.\n * - Be a function that produces an `Option`, optionally based on the value of\n *   the first `Option`.\n *\n * If the first `Option` is `None`, the function skips the evaluation of the\n * second `Option` and directly returns `None`.\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const andThen: {\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B>(f: Option<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B>(f: NotFunction<B>): <A>(self: Option<A>) => Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: Option<B>): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B): Option<B>\n  /**\n   * Chains two `Option`s together. The second `Option` can either be a static\n   * value or depend on the result of the first `Option`.\n   *\n   * **Details**\n   *\n   * This function enables sequencing of two `Option` computations. If the first\n   * `Option` is `Some`, the second `Option` is evaluated. The second `Option` can\n   * either:\n   *\n   * - Be a static `Option` value.\n   * - Be a function that produces an `Option`, optionally based on the value of\n   *   the first `Option`.\n   *\n   * If the first `Option` is `None`, the function skips the evaluation of the\n   * second `Option` and directly returns `None`.\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: NotFunction<B>): Option<B>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => Option<B> | Option<B>): Option<B> =>\n    flatMap(self, (a) => {\n      const b = isFunction(f) ? f(a) : f\n      return isOption(b) ? b : some(b)\n    })\n)\n\n/**\n * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n * using a function that may return `null` or `undefined`.\n *\n * **Details**\n *\n * This function applies a transformation function `f` to the value inside a\n * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n * `undefined`, the result is `None`. If the input `Option` is `None`, the\n * function is not applied, and `None` is returned.\n *\n * This utility is particularly useful when working with deeply nested optional\n * values or chaining computations that may result in `null` or `undefined` at\n * some point.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n *\n * // Extracting a deeply nested property\n * console.log(\n *   Option.some(employee1)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * // Property does not exist\n * console.log(\n *   Option.some(employee2)\n *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n * )\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n   * using a function that may return `null` or `undefined`.\n   *\n   * **Details**\n   *\n   * This function applies a transformation function `f` to the value inside a\n   * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n   * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n   * `undefined`, the result is `None`. If the input `Option` is `None`, the\n   * function is not applied, and `None` is returned.\n   *\n   * This utility is particularly useful when working with deeply nested optional\n   * values or chaining computations that may result in `null` or `undefined` at\n   * some point.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n   *\n   * // Extracting a deeply nested property\n   * console.log(\n   *   Option.some(employee1)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * // Property does not exist\n   * console.log(\n   *   Option.some(employee2)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: Option<A>) => Option<NonNullable<B>>\n  /**\n   * Combines `flatMap` and `fromNullable`, transforming the value inside a `Some`\n   * using a function that may return `null` or `undefined`.\n   *\n   * **Details**\n   *\n   * This function applies a transformation function `f` to the value inside a\n   * `Some`. The function `f` may return a value, `null`, or `undefined`. If `f`\n   * returns a value, it is wrapped in a `Some`. If `f` returns `null` or\n   * `undefined`, the result is `None`. If the input `Option` is `None`, the\n   * function is not applied, and `None` is returned.\n   *\n   * This utility is particularly useful when working with deeply nested optional\n   * values or chaining computations that may result in `null` or `undefined` at\n   * some point.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * interface Employee {\n   *   company?: {\n   *     address?: {\n   *       street?: {\n   *         name?: string\n   *       }\n   *     }\n   *   }\n   * }\n   *\n   * const employee1: Employee = { company: { address: { street: { name: \"high street\" } } } }\n   *\n   * // Extracting a deeply nested property\n   * console.log(\n   *   Option.some(employee1)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'high street' }\n   *\n   * const employee2: Employee = { company: { address: { street: {} } } }\n   *\n   * // Property does not exist\n   * console.log(\n   *   Option.some(employee2)\n   *     .pipe(Option.flatMapNullable((employee) => employee.company?.address?.street?.name))\n   * )\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Option<A>, f: (a: A) => B | null | undefined): Option<NonNullable<B>> =>\n    isNone(self) ? none() : fromNullable(f(self.value))\n)\n\n/**\n * Flattens an `Option` of `Option` into a single `Option`.\n *\n * **Details**\n *\n * This function takes an `Option` that wraps another `Option` and flattens it\n * into a single `Option`. If the outer `Option` is `Some`, the function\n * extracts the inner `Option`. If the outer `Option` is `None`, the result\n * remains `None`.\n *\n * This is useful for simplifying nested `Option` structures that may arise\n * during functional operations.\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const flatten: <A>(self: Option<Option<A>>) => Option<A> = flatMap(identity)\n\n/**\n * Combines two `Option`s, keeping the value from the second `Option` if both\n * are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the second one if the first is\n * `Some`. If the first `Option` is `None`, the result will also be `None`,\n * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n * while discarding the value from the first `Option`.\n *\n * This is particularly useful when sequencing computations where the result of\n * the first computation is not needed, and you only care about the result of\n * the second computation.\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipRight: {\n  /**\n   * Combines two `Option`s, keeping the value from the second `Option` if both\n   * are `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the second one if the first is\n   * `Some`. If the first `Option` is `None`, the result will also be `None`,\n   * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n   * while discarding the value from the first `Option`.\n   *\n   * This is particularly useful when sequencing computations where the result of\n   * the first computation is not needed, and you only care about the result of\n   * the second computation.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <B>(that: Option<B>): <_>(self: Option<_>) => Option<B>\n  /**\n   * Combines two `Option`s, keeping the value from the second `Option` if both\n   * are `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the second one if the first is\n   * `Some`. If the first `Option` is `None`, the result will also be `None`,\n   * regardless of the second `Option`. It effectively \"zips\" the two `Option`s\n   * while discarding the value from the first `Option`.\n   *\n   * This is particularly useful when sequencing computations where the result of\n   * the first computation is not needed, and you only care about the result of\n   * the second computation.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <X, B>(self: Option<X>, that: Option<B>): Option<B>\n} = dual(2, <X, B>(self: Option<X>, that: Option<B>): Option<B> => flatMap(self, () => that))\n\n/**\n * Combines two `Option`s, keeping the value from the first `Option` if both are\n * `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and returns the first one if it is `Some`.\n * If either the first `Option` or the second `Option` is `None`, the result\n * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n * value from the second `Option`.\n *\n * This is useful when sequencing computations where the second `Option`\n * represents a dependency or condition that must hold, but its value is\n * irrelevant.\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipLeft: {\n  /**\n   * Combines two `Option`s, keeping the value from the first `Option` if both are\n   * `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the first one if it is `Some`.\n   * If either the first `Option` or the second `Option` is `None`, the result\n   * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n   * value from the second `Option`.\n   *\n   * This is useful when sequencing computations where the second `Option`\n   * represents a dependency or condition that must hold, but its value is\n   * irrelevant.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <_>(that: Option<_>): <A>(self: Option<A>) => Option<A>\n  /**\n   * Combines two `Option`s, keeping the value from the first `Option` if both are\n   * `Some`.\n   *\n   * **Details**\n   *\n   * This function takes two `Option`s and returns the first one if it is `Some`.\n   * If either the first `Option` or the second `Option` is `None`, the result\n   * will be `None`. This operation \"zips\" the two `Option`s while discarding the\n   * value from the second `Option`.\n   *\n   * This is useful when sequencing computations where the second `Option`\n   * represents a dependency or condition that must hold, but its value is\n   * irrelevant.\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, that: Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, that: Option<X>): Option<A> => tap(self, () => that))\n\n/**\n * Composes two functions that return `Option` values, creating a new function\n * that chains them together.\n *\n * **Details**\n *\n * This function allows you to compose two computations, each represented by a\n * function that returns an `Option`. The result of the first function is passed\n * to the second function if it is `Some`. If the first function returns `None`,\n * the composed function short-circuits and returns `None` without invoking the\n * second function.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n *\n * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n *\n * const parseAndDouble = Option.composeK(parse, double)\n *\n * console.log(parseAndDouble(\"42\"))\n * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n *\n * console.log(parseAndDouble(\"not a number\"))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const composeK: {\n  /**\n   * Composes two functions that return `Option` values, creating a new function\n   * that chains them together.\n   *\n   * **Details**\n   *\n   * This function allows you to compose two computations, each represented by a\n   * function that returns an `Option`. The result of the first function is passed\n   * to the second function if it is `Some`. If the first function returns `None`,\n   * the composed function short-circuits and returns `None` without invoking the\n   * second function.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n   *\n   * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n   *\n   * const parseAndDouble = Option.composeK(parse, double)\n   *\n   * console.log(parseAndDouble(\"42\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   *\n   * console.log(parseAndDouble(\"not a number\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <B, C>(bfc: (b: B) => Option<C>): <A>(afb: (a: A) => Option<B>) => (a: A) => Option<C>\n  /**\n   * Composes two functions that return `Option` values, creating a new function\n   * that chains them together.\n   *\n   * **Details**\n   *\n   * This function allows you to compose two computations, each represented by a\n   * function that returns an `Option`. The result of the first function is passed\n   * to the second function if it is `Some`. If the first function returns `None`,\n   * the composed function short-circuits and returns `None` without invoking the\n   * second function.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const parse = (s: string): Option.Option<number> => isNaN(Number(s)) ? Option.none() : Option.some(Number(s))\n   *\n   * const double = (n: number): Option.Option<number> => n > 0 ? Option.some(n * 2) : Option.none()\n   *\n   * const parseAndDouble = Option.composeK(parse, double)\n   *\n   * console.log(parseAndDouble(\"42\"))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 84 }\n   *\n   * console.log(parseAndDouble(\"not a number\"))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>): (a: A) => Option<C>\n} = dual(2, <A, B, C>(afb: (a: A) => Option<B>, bfc: (b: B) => Option<C>) => (a: A): Option<C> => flatMap(afb(a), bfc))\n\n/**\n * Applies the provided function `f` to the value of the `Option` if it is\n * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n * case it returns `None`.\n *\n * **Details**\n *\n * This function allows you to perform additional computations on the value of\n * an `Option` without modifying its original value. If the `Option` is `Some`,\n * the provided function `f` is executed with the value, and its result\n * determines whether the original `Option` is returned (`Some`) or the result\n * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n * function is not executed, and `None` is returned.\n *\n * This is particularly useful for applying side conditions or performing\n * validation checks while retaining the original `Option`'s value.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * console.log(Option.tap(Option.none(), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(Option.tap(Option.some(1), getInteger))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(Option.tap(Option.some(1.14), getInteger))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Sequencing\n * @since 2.0.0\n */\nexport const tap: {\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is\n   * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n   * case it returns `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to perform additional computations on the value of\n   * an `Option` without modifying its original value. If the `Option` is `Some`,\n   * the provided function `f` is executed with the value, and its result\n   * determines whether the original `Option` is returned (`Some`) or the result\n   * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n   * function is not executed, and `None` is returned.\n   *\n   * This is particularly useful for applying side conditions or performing\n   * validation checks while retaining the original `Option`'s value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * console.log(Option.tap(Option.none(), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.tap(Option.some(1), getInteger))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(Option.tap(Option.some(1.14), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, X>(f: (a: A) => Option<X>): (self: Option<A>) => Option<A>\n  /**\n   * Applies the provided function `f` to the value of the `Option` if it is\n   * `Some` and returns the original `Option`, unless `f` returns `None`, in which\n   * case it returns `None`.\n   *\n   * **Details**\n   *\n   * This function allows you to perform additional computations on the value of\n   * an `Option` without modifying its original value. If the `Option` is `Some`,\n   * the provided function `f` is executed with the value, and its result\n   * determines whether the original `Option` is returned (`Some`) or the result\n   * is `None` if `f` returns `None`. If the input `Option` is `None`, the\n   * function is not executed, and `None` is returned.\n   *\n   * This is particularly useful for applying side conditions or performing\n   * validation checks while retaining the original `Option`'s value.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n   *\n   * console.log(Option.tap(Option.none(), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(Option.tap(Option.some(1), getInteger))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(Option.tap(Option.some(1.14), getInteger))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Sequencing\n   * @since 2.0.0\n   */\n  <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A>\n} = dual(2, <A, X>(self: Option<A>, f: (a: A) => Option<X>): Option<A> => flatMap(self, (a) => map(f(a), () => a)))\n\n/**\n * Combines two `Option` values into a single `Option` containing a tuple of\n * their values if both are `Some`.\n *\n * **Details**\n *\n * This function takes two `Option`s and combines their values into a tuple `[A,\n * B]` if both are `Some`. If either of the `Option`s is `None`, the result is\n * `None`. This is particularly useful for combining multiple `Option` values\n * into a single one, ensuring both contain valid values.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const product = <A, B>(self: Option<A>, that: Option<B>): Option<[A, B]> =>\n  isSome(self) && isSome(that) ? some([self.value, that.value]) : none()\n\n/**\n * Combines an `Option` with a collection of `Option`s into a single `Option`\n * containing a tuple of their values if all are `Some`.\n *\n * **Details**\n *\n * This function takes a primary `Option` and a collection of `Option`s and\n * combines their values into a tuple `[A, ...Array<A>]` if all are `Some`. If\n * the primary `Option` or any `Option` in the collection is `None`, the result\n * is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const productMany = <A>(\n  self: Option<A>,\n  collection: Iterable<Option<A>>\n): Option<[A, ...Array<A>]> => {\n  if (isNone(self)) {\n    return none()\n  }\n  const out: [A, ...Array<A>] = [self.value]\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none()\n    }\n    out.push(o.value)\n  }\n  return some(out)\n}\n\n/**\n * Combines a structure of `Option`s into a single `Option` containing the\n * values with the same structure.\n *\n * **Details**\n *\n * This function takes a structure of `Option`s (a tuple, struct, or iterable)\n * and produces a single `Option` that contains the values from the input\n * structure if all `Option`s are `Some`. If any `Option` in the input is\n * `None`, the result is `None`. The structure of the input is preserved in the\n * output.\n *\n * - If the input is a tuple (e.g., an array), the result will be an `Option`\n *   containing a tuple with the same length.\n * - If the input is a struct (e.g., an object), the result will be an `Option`\n *   containing a struct with the same keys.\n * - If the input is an iterable, the result will be an `Option` containing an\n *   array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * //      ┌─── Option<[string, number]>\n * //      ▼\n * const tuple = Option.all([maybeName, maybeAge])\n * console.log(tuple)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: [ 'John', 25 ] }\n *\n * //      ┌─── Option<{ name: string; age: number; }>\n * //      ▼\n * const struct = Option.all({ name: maybeName, age: maybeAge })\n * console.log(struct)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'John', age: 25 } }\n * ```\n *\n * @category Combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all: <const I extends Iterable<Option<any>> | Record<string, Option<any>>>(\n  input: I\n) => [I] extends [ReadonlyArray<Option<any>>] ? Option<\n    { -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }\n  >\n  : [I] extends [Iterable<Option<infer A>>] ? Option<Array<A>>\n  : Option<{ -readonly [K in keyof I]: [I[K]] extends [Option<infer A>] ? A : never }> = (\n    input: Iterable<Option<any>> | Record<string, Option<any>>\n  ): Option<any> => {\n    if (Symbol.iterator in input) {\n      const out: Array<Option<any>> = []\n      for (const o of (input as Iterable<Option<any>>)) {\n        if (isNone(o)) {\n          return none()\n        }\n        out.push(o.value)\n      }\n      return some(out)\n    }\n\n    const out: Record<string, any> = {}\n    for (const key of Object.keys(input)) {\n      const o = input[key]\n      if (isNone(o)) {\n        return none()\n      }\n      out[key] = o.value\n    }\n    return some(out)\n  }\n\n/**\n * Combines two `Option` values into a new `Option` by applying a provided\n * function to their values.\n *\n * **Details**\n *\n * This function takes two `Option` values (`self` and `that`) and a combining\n * function `f`. If both `Option` values are `Some`, the function `f` is applied\n * to their values, and the result is wrapped in a new `Some`. If either\n * `Option` is `None`, the result is `None`.\n *\n * This utility is useful for combining two optional computations into a single\n * result while maintaining type safety and avoiding explicit checks for `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * // Combine the name and age into a person object\n * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n *   name: name.toUpperCase(),\n *   age\n * }))\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Combines two `Option` values into a new `Option` by applying a provided\n   * function to their values.\n   *\n   * **Details**\n   *\n   * This function takes two `Option` values (`self` and `that`) and a combining\n   * function `f`. If both `Option` values are `Some`, the function `f` is applied\n   * to their values, and the result is wrapped in a new `Some`. If either\n   * `Option` is `None`, the result is `None`.\n   *\n   * This utility is useful for combining two optional computations into a single\n   * result while maintaining type safety and avoiding explicit checks for `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const maybeName: Option.Option<string> = Option.some(\"John\")\n   * const maybeAge: Option.Option<number> = Option.some(25)\n   *\n   * // Combine the name and age into a person object\n   * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n   *   name: name.toUpperCase(),\n   *   age\n   * }))\n   *\n   * console.log(person)\n   * // Output:\n   * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n   * ```\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Option<B>, f: (a: A, b: B) => C): (self: Option<A>) => Option<C>\n  /**\n   * Combines two `Option` values into a new `Option` by applying a provided\n   * function to their values.\n   *\n   * **Details**\n   *\n   * This function takes two `Option` values (`self` and `that`) and a combining\n   * function `f`. If both `Option` values are `Some`, the function `f` is applied\n   * to their values, and the result is wrapped in a new `Some`. If either\n   * `Option` is `None`, the result is `None`.\n   *\n   * This utility is useful for combining two optional computations into a single\n   * result while maintaining type safety and avoiding explicit checks for `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const maybeName: Option.Option<string> = Option.some(\"John\")\n   * const maybeAge: Option.Option<number> = Option.some(25)\n   *\n   * // Combine the name and age into a person object\n   * const person = Option.zipWith(maybeName, maybeAge, (name, age) => ({\n   *   name: name.toUpperCase(),\n   *   age\n   * }))\n   *\n   * console.log(person)\n   * // Output:\n   * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n   * ```\n   *\n   * @category Zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C>\n} = dual(\n  3,\n  <A, B, C>(self: Option<A>, that: Option<B>, f: (a: A, b: B) => C): Option<C> =>\n    map(product(self, that), ([a, b]) => f(a, b))\n)\n\n/**\n * Applies a function inside a `Some` to a value inside another `Some`,\n * combining them into a new `Option`.\n *\n * **Details**\n *\n * This function allows you to apply a function wrapped in an `Option` (`self`)\n * to a value wrapped in another `Option` (`that`). If both `Option`s are\n * `Some`, the function is applied to the value, and the result is wrapped in a\n * new `Some`. If either `Option` is `None`, the result is `None`.\n *\n * @category Combining\n * @since 2.0.0\n */\nexport const ap: {\n  /**\n   * Applies a function inside a `Some` to a value inside another `Some`,\n   * combining them into a new `Option`.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a function wrapped in an `Option` (`self`)\n   * to a value wrapped in another `Option` (`that`). If both `Option`s are\n   * `Some`, the function is applied to the value, and the result is wrapped in a\n   * new `Some`. If either `Option` is `None`, the result is `None`.\n   *\n   * @category Combining\n   * @since 2.0.0\n   */\n  <A>(that: Option<A>): <B>(self: Option<(a: A) => B>) => Option<B>\n  /**\n   * Applies a function inside a `Some` to a value inside another `Some`,\n   * combining them into a new `Option`.\n   *\n   * **Details**\n   *\n   * This function allows you to apply a function wrapped in an `Option` (`self`)\n   * to a value wrapped in another `Option` (`that`). If both `Option`s are\n   * `Some`, the function is applied to the value, and the result is wrapped in a\n   * new `Some`. If either `Option` is `None`, the result is `None`.\n   *\n   * @category Combining\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B>\n} = dual(2, <A, B>(self: Option<(a: A) => B>, that: Option<A>): Option<B> => zipWith(self, that, (f, a) => f(a)))\n\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n * elements that are `None`.\n *\n * **Details**\n *\n * This function takes an initial value of type `B` and a reducing function `f`\n * that combines the accumulator with values of type `A`. It processes an\n * iterable of `Option<A>`, applying `f` only to the `Some` values while\n * ignoring the `None` values. The result is a single value of type `B`.\n *\n * This utility is particularly useful for aggregating values from an iterable\n * of `Option`s while skipping the absent (`None`) values.\n *\n * @example\n * ```ts\n * import { Option, pipe } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n *\n * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n * // Output: 3\n * ```\n *\n * @category Reducing\n * @since 2.0.0\n */\nexport const reduceCompact: {\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n   * elements that are `None`.\n   *\n   * **Details**\n   *\n   * This function takes an initial value of type `B` and a reducing function `f`\n   * that combines the accumulator with values of type `A`. It processes an\n   * iterable of `Option<A>`, applying `f` only to the `Some` values while\n   * ignoring the `None` values. The result is a single value of type `B`.\n   *\n   * This utility is particularly useful for aggregating values from an iterable\n   * of `Option`s while skipping the absent (`None`) values.\n   *\n   * @example\n   * ```ts\n   * import { Option, pipe } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   *\n   * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n   * // Output: 3\n   * ```\n   *\n   * @category Reducing\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<Option<A>>) => B\n  /**\n   * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, ignoring\n   * elements that are `None`.\n   *\n   * **Details**\n   *\n   * This function takes an initial value of type `B` and a reducing function `f`\n   * that combines the accumulator with values of type `A`. It processes an\n   * iterable of `Option<A>`, applying `f` only to the `Some` values while\n   * ignoring the `None` values. The result is a single value of type `B`.\n   *\n   * This utility is particularly useful for aggregating values from an iterable\n   * of `Option`s while skipping the absent (`None`) values.\n   *\n   * @example\n   * ```ts\n   * import { Option, pipe } from \"effect\"\n   *\n   * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n   *\n   * console.log(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)))\n   * // Output: 3\n   * ```\n   *\n   * @category Reducing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<Option<A>>, b: B, f: (b: B, a: A) => B): B => {\n    let out: B = b\n    for (const oa of self) {\n      if (isSome(oa)) {\n        out = f(out, oa.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Converts an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, its value is wrapped in a single-element array.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.toArray(Option.some(1)))\n * // Output: [1]\n *\n * console.log(Option.toArray(Option.none()))\n * // Output: []\n * ```\n *\n * @category Conversions\n * @since 2.0.0\n */\nexport const toArray = <A>(self: Option<A>): Array<A> => isNone(self) ? [] : [self.value]\n\n/**\n * Splits an `Option` into two `Option`s based on the result of a mapping\n * function that produces an `Either`.\n *\n * **Details**\n *\n * This function takes an `Option` and a mapping function `f` that converts its\n * value into an `Either`. It returns a tuple of two `Option`s:\n *\n * - The first `Option` (`left`) contains the value from the `Left` side of the\n *   `Either` if it exists, otherwise `None`.\n * - The second `Option` (`right`) contains the value from the `Right` side of\n *   the `Either` if it exists, otherwise `None`.\n *\n * If the input `Option` is `None`, both returned `Option`s are `None`.\n *\n * This utility is useful for filtering and categorizing the contents of an\n * `Option` based on a bifurcating computation.\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Splits an `Option` into two `Option`s based on the result of a mapping\n   * function that produces an `Either`.\n   *\n   * **Details**\n   *\n   * This function takes an `Option` and a mapping function `f` that converts its\n   * value into an `Either`. It returns a tuple of two `Option`s:\n   *\n   * - The first `Option` (`left`) contains the value from the `Left` side of the\n   *   `Either` if it exists, otherwise `None`.\n   * - The second `Option` (`right`) contains the value from the `Right` side of\n   *   the `Either` if it exists, otherwise `None`.\n   *\n   * If the input `Option` is `None`, both returned `Option`s are `None`.\n   *\n   * This utility is useful for filtering and categorizing the contents of an\n   * `Option` based on a bifurcating computation.\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A) => Either<C, B>): (self: Option<A>) => [left: Option<B>, right: Option<C>]\n  /**\n   * Splits an `Option` into two `Option`s based on the result of a mapping\n   * function that produces an `Either`.\n   *\n   * **Details**\n   *\n   * This function takes an `Option` and a mapping function `f` that converts its\n   * value into an `Either`. It returns a tuple of two `Option`s:\n   *\n   * - The first `Option` (`left`) contains the value from the `Left` side of the\n   *   `Either` if it exists, otherwise `None`.\n   * - The second `Option` (`right`) contains the value from the `Right` side of\n   *   the `Either` if it exists, otherwise `None`.\n   *\n   * If the input `Option` is `None`, both returned `Option`s are `None`.\n   *\n   * This utility is useful for filtering and categorizing the contents of an\n   * `Option` based on a bifurcating computation.\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Option<A>, f: (a: A) => Either<C, B>): [left: Option<B>, right: Option<C>]\n} = dual(2, <A, B, C>(\n  self: Option<A>,\n  f: (a: A) => Either<C, B>\n): [excluded: Option<B>, satisfying: Option<C>] => {\n  if (isNone(self)) {\n    return [none(), none()]\n  }\n  const e = f(self.value)\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)]\n})\n\n// TODO(4.0): remove?\n/**\n * Alias of {@link flatMap}.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Transform and filter numbers\n * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n *\n * console.log(transformEven(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(1)))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(transformEven(Option.some(2)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  // TODO(4.0): remove?\n  /**\n   * Alias of {@link flatMap}.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Transform and filter numbers\n   * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n   *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n   *\n   * console.log(transformEven(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(1)))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(2)))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => Option<B>): (self: Option<A>) => Option<B>\n  // TODO(4.0): remove?\n  /**\n   * Alias of {@link flatMap}.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Transform and filter numbers\n   * const transformEven = (n: Option.Option<number>): Option.Option<string> =>\n   *   Option.filterMap(n, (n) => (n % 2 === 0 ? Option.some(`Even: ${n}`) : Option.none()))\n   *\n   * console.log(transformEven(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(1)))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(transformEven(Option.some(2)))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'Even: 2' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Option<A>, f: (a: A) => Option<B>): Option<B>\n} = flatMap\n\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const removeEmptyString = (input: Option.Option<string>) =>\n *   Option.filter(input, (value) => value !== \"\")\n *\n * console.log(removeEmptyString(Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"\")))\n * // Output: { _id: 'Option', _tag: 'None' }\n *\n * console.log(removeEmptyString(Option.some(\"a\")))\n * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n * ```\n *\n * @category Filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => Option<A>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n   *\n   * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const removeEmptyString = (input: Option.Option<string>) =>\n   *   Option.filter(input, (value) => value !== \"\")\n   *\n   * console.log(removeEmptyString(Option.none()))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"\")))\n   * // Output: { _id: 'Option', _tag: 'None' }\n   *\n   * console.log(removeEmptyString(Option.some(\"a\")))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 'a' }\n   * ```\n   *\n   * @category Filtering\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A>\n} = dual(\n  2,\n  <A>(self: Option<A>, predicate: Predicate<A>): Option<A> =>\n    filterMap(self, (b) => (predicate(b) ? option.some(b) : option.none))\n)\n\n/**\n * Creates an `Equivalence` instance for comparing `Option` values, using a\n * provided `Equivalence` for the inner type.\n *\n * **Details**\n *\n * This function takes an `Equivalence` instance for a specific type `A` and\n * produces an `Equivalence` instance for `Option<A>`. The resulting\n * `Equivalence` determines whether two `Option` values are equivalent:\n *\n * - Two `None`s are considered equivalent.\n * - A `Some` and a `None` are not equivalent.\n * - Two `Some` values are equivalent if their inner values are equivalent\n *   according to the provided `Equivalence`.\n *\n * **Example** (Comparing Optional Numbers for Equivalence)\n *\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n *\n * console.log(isEquivalent(Option.none(), Option.none()))\n * // Output: true\n *\n * console.log(isEquivalent(Option.none(), Option.some(1)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.none()))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(2)))\n * // Output: false\n *\n * console.log(isEquivalent(Option.some(1), Option.some(1)))\n * // Output: true\n * ```\n *\n * @category Equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = <A>(isEquivalent: Equivalence.Equivalence<A>): Equivalence.Equivalence<Option<A>> =>\n  Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value))\n\n/**\n * Creates an `Order` instance for comparing `Option` values, using a provided\n * `Order` for the inner type.\n *\n * **Details**\n *\n * This function produces an `Order` instance for `Option<A>`, allowing `Option`\n * values to be compared:\n *\n * - `None` is always considered less than any `Some` value.\n * - If both are `Some`, their inner values are compared using the provided\n *   `Order` instance.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const order = Option.getOrder(Number.Order)\n *\n * console.log(order(Option.none(), Option.none()))\n * // Output: 0\n *\n * console.log(order(Option.none(), Option.some(1)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.none()))\n * // Output: 1\n *\n * console.log(order(Option.some(1), Option.some(2)))\n * // Output: -1\n *\n * console.log(order(Option.some(1), Option.some(1)))\n * // Output: 0\n * ```\n *\n * @category Sorting\n * @since 2.0.0\n */\nexport const getOrder = <A>(O: Order<A>): Order<Option<A>> =>\n  order.make((self, that) => isSome(self) ? (isSome(that) ? O(self.value, that.value) : 1) : -1)\n\n/**\n * Lifts a binary function to work with `Option` values, allowing the function\n * to operate on two `Option`s.\n *\n * **Details**\n *\n * This function takes a binary function `f` and returns a new function that\n * applies `f` to the values of two `Option`s (`self` and `that`). If both\n * `Option`s are `Some`, the binary function `f` is applied to their values, and\n * the result is wrapped in a new `Some`. If either `Option` is `None`, the\n * result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // A binary function to add two numbers\n * const add = (a: number, b: number): number => a + b\n *\n * // Lift the `add` function to work with `Option` values\n * const addOptions = Option.lift2(add)\n *\n * // Both `Option`s are `Some`\n * console.log(addOptions(Option.some(2), Option.some(3)))\n * // Output: { _id: 'Option', _tag: 'Some', value: 5 }\n *\n * // One `Option` is `None`\n * console.log(addOptions(Option.some(2), Option.none()))\n * // Output: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */\nexport const lift2 = <A, B, C>(f: (a: A, b: B) => C): {\n  (that: Option<B>): (self: Option<A>) => Option<C>\n  (self: Option<A>, that: Option<B>): Option<C>\n} => dual(2, (self: Option<A>, that: Option<B>): Option<C> => zipWith(self, that, f))\n\n/**\n * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n *\n * **Details**\n *\n * This function transforms a `Predicate` (or a more specific `Refinement`) into\n * a function that produces an `Option`. If the predicate evaluates to `true`,\n * the input value is wrapped in a `Some`. If the predicate evaluates to\n * `false`, the result is `None`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * // Check if a number is positive\n * const isPositive = (n: number) => n > 0\n *\n * //      ┌─── (b: number) => Option<number>\n * //      ▼\n * const parsePositive = Option.liftPredicate(isPositive)\n *\n * console.log(parsePositive(1))\n * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n *\n * console.log(parsePositive(-1))\n * // OUtput: { _id: 'Option', _tag: 'None' }\n * ```\n *\n * @category Lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Refinement<A, B>): (a: A) => Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(predicate: Predicate<A>): (b: B) => Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: A, refinement: Refinement<A, B>): Option<B>\n  /**\n   * Lifts a `Predicate` or `Refinement` into the `Option` context, returning a\n   * `Some` of the input value if the predicate is satisfied, or `None` otherwise.\n   *\n   * **Details**\n   *\n   * This function transforms a `Predicate` (or a more specific `Refinement`) into\n   * a function that produces an `Option`. If the predicate evaluates to `true`,\n   * the input value is wrapped in a `Some`. If the predicate evaluates to\n   * `false`, the result is `None`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * // Check if a number is positive\n   * const isPositive = (n: number) => n > 0\n   *\n   * //      ┌─── (b: number) => Option<number>\n   * //      ▼\n   * const parsePositive = Option.liftPredicate(isPositive)\n   *\n   * console.log(parsePositive(1))\n   * // Output: { _id: 'Option', _tag: 'Some', value: 1 }\n   *\n   * console.log(parsePositive(-1))\n   * // OUtput: { _id: 'Option', _tag: 'None' }\n   * ```\n   *\n   * @category Lifting\n   * @since 2.0.0\n   */\n  <B extends A, A = B>(self: B, predicate: Predicate<A>): Option<B>\n} = dual(\n  2,\n  <B extends A, A = B>(b: B, predicate: Predicate<A>): Option<B> => predicate(b) ? some(b) : none()\n)\n\n/**\n * Returns a function that checks if an `Option` contains a specified value,\n * using a provided equivalence function.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses an equivalence function `isEquivalent` to compare the value\n * inside the `Option` to the provided value. If the `Option` is `Some` and the\n * equivalence function returns `true`, the result is `true`. If the `Option` is\n * `None` or the values are not equivalent, the result is `false`.\n *\n * @example\n * ```ts\n * import { Number, Option } from \"effect\"\n *\n * const contains = Option.containsWith(Number.Equivalence)\n *\n * console.log(Option.some(2).pipe(contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link contains} for a version that uses the default `Equivalence`.\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Option<A>) => boolean\n  (self: Option<A>, a: A): boolean\n} => dual(2, (self: Option<A>, a: A): boolean => isNone(self) ? false : isEquivalent(self.value, a))\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if an `Option` contains a specified value\n * using the default `Equivalence`.\n *\n * **Details**\n *\n * This function allows you to check whether an `Option` contains a specific\n * value. It uses the default `Equivalence` for equality comparison. If the\n * `Option` is `Some` and its value is equivalent to the provided value, the\n * result is `true`. If the `Option` is `None` or the values are not equivalent,\n * the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * console.log(Option.some(2).pipe(Option.contains(2)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.contains(2)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.contains(2)))\n * // Output: false\n * ```\n *\n * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if an `Option` contains a specified value\n   * using the default `Equivalence`.\n   *\n   * **Details**\n   *\n   * This function allows you to check whether an `Option` contains a specific\n   * value. It uses the default `Equivalence` for equality comparison. If the\n   * `Option` is `Some` and its value is equivalent to the provided value, the\n   * result is `true`. If the `Option` is `None` or the values are not equivalent,\n   * the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(2).pipe(Option.contains(2)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.contains(2)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.contains(2)))\n   * // Output: false\n   * ```\n   *\n   * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Option<A>) => boolean\n  /**\n   * Returns a function that checks if an `Option` contains a specified value\n   * using the default `Equivalence`.\n   *\n   * **Details**\n   *\n   * This function allows you to check whether an `Option` contains a specific\n   * value. It uses the default `Equivalence` for equality comparison. If the\n   * `Option` is `Some` and its value is equivalent to the provided value, the\n   * result is `true`. If the `Option` is `None` or the values are not equivalent,\n   * the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * console.log(Option.some(2).pipe(Option.contains(2)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.contains(2)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.contains(2)))\n   * // Output: false\n   * ```\n   *\n   * @see {@link containsWith} for a version that allows you to specify a custom equivalence function.\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Checks if a value in an `Option` satisfies a given predicate or refinement.\n *\n * **Details**\n *\n * This function allows you to check if a value inside a `Some` meets a\n * specified condition. If the `Option` is `None`, the result is `false`. If the\n * `Option` is `Some`, the provided predicate or refinement is applied to the\n * value:\n *\n * - If the condition is met, the result is `true`.\n * - If the condition is not met, the result is `false`.\n *\n * @example\n * ```ts\n * import { Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * console.log(Option.some(2).pipe(Option.exists(isEven)))\n * // Output: true\n *\n * console.log(Option.some(1).pipe(Option.exists(isEven)))\n * // Output: false\n *\n * console.log(Option.none().pipe(Option.exists(isEven)))\n * // Output: false\n * ```\n *\n * @category Elements\n * @since 2.0.0\n */\nexport const exists: {\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: Refinement<NoInfer<A>, B>): (self: Option<A>) => self is Option<B>\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate<NoInfer<A>>): (self: Option<A>) => boolean\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B>\n  /**\n   * Checks if a value in an `Option` satisfies a given predicate or refinement.\n   *\n   * **Details**\n   *\n   * This function allows you to check if a value inside a `Some` meets a\n   * specified condition. If the `Option` is `None`, the result is `false`. If the\n   * `Option` is `Some`, the provided predicate or refinement is applied to the\n   * value:\n   *\n   * - If the condition is met, the result is `true`.\n   * - If the condition is not met, the result is `false`.\n   *\n   * @example\n   * ```ts\n   * import { Option } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   *\n   * console.log(Option.some(2).pipe(Option.exists(isEven)))\n   * // Output: true\n   *\n   * console.log(Option.some(1).pipe(Option.exists(isEven)))\n   * // Output: false\n   *\n   * console.log(Option.none().pipe(Option.exists(isEven)))\n   * // Output: false\n   * ```\n   *\n   * @category Elements\n   * @since 2.0.0\n   */\n  <A>(self: Option<A>, predicate: Predicate<A>): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: Option<A>, refinement: Refinement<A, B>): self is Option<B> =>\n    isNone(self) ? false : refinement(self.value)\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bindTo: {\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string>(name: N): <A>(self: Option<A>) => Option<{ [K in N]: A }>\n  // -------------------------------------------------------------------------------------\n  // do notation\n  // -------------------------------------------------------------------------------------\n\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A, N extends string>(self: Option<A>, name: N): Option<{ [K in N]: A }>\n} = doNotation.bindTo<OptionTypeLambda>(map)\n\nconst let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.let_<OptionTypeLambda>(map)\n\nexport {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bind}\n   * @see {@link bindTo}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  let_ as let\n}\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <N extends string, A extends object, B>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Option<B>): (self: Option<A>) => Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Option, pipe } from \"effect\"\n   *\n   * const result = pipe(\n   *   Option.Do,\n   *   Option.bind(\"x\", () => Option.some(2)),\n   *   Option.bind(\"y\", () => Option.some(3)),\n   *   Option.let(\"sum\", ({ x, y }) => x + y),\n   *   Option.filter(({ x, y }) => x * y > 5)\n   * )\n   * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n   * ```\n   *\n   * @see {@link Do}\n   * @see {@link bindTo}\n   * @see {@link let_ let}\n   *\n   * @category Do notation\n   * @since 2.0.0\n   */\n  <A extends object, N extends string, B>(\n    self: Option<A>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => Option<B>\n  ): Option<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = doNotation.bind<OptionTypeLambda>(map, flatMap)\n\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category Do notation\n * @since 2.0.0\n */\nexport const Do: Option<{}> = some({})\n\nconst adapter = Gen.adapter<OptionTypeLambda>()\n\n/**\n * Similar to `Effect.gen`, `Option.gen` provides a more readable,\n * generator-based syntax for working with `Option` values, making code that\n * involves `Option` easier to write and understand. This approach is similar to\n * using `async/await` but tailored for `Option`.\n *\n * **Example** (Using `Option.gen` to Create a Combined Value)\n *\n * ```ts\n * import { Option } from \"effect\"\n *\n * const maybeName: Option.Option<string> = Option.some(\"John\")\n * const maybeAge: Option.Option<number> = Option.some(25)\n *\n * const person = Option.gen(function* () {\n *   const name = (yield* maybeName).toUpperCase()\n *   const age = yield* maybeAge\n *   return { name, age }\n * })\n *\n * console.log(person)\n * // Output:\n * // { _id: 'Option', _tag: 'Some', value: { name: 'JOHN', age: 25 } }\n * ```\n *\n * @category Generators\n * @since 2.0.0\n */\nexport const gen: Gen.Gen<OptionTypeLambda, Gen.Adapter<OptionTypeLambda>> = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0])\n  const iterator = f(adapter)\n  let state: IteratorResult<any> = iterator.next()\n  while (!state.done) {\n    const current = Gen.isGenKind(state.value)\n      ? state.value.value\n      : Gen.yieldWrapGet(state.value)\n    if (isNone(current)) {\n      return current\n    }\n    state = iterator.next(current.value as never)\n  }\n  return some(state.value)\n}\n\n/**\n * Merges two optional values, applying a function if both exist.\n * Unlike {@link zipWith}, this function returns `None` only if both inputs are `None`.\n *\n * @internal\n */\nexport const mergeWith = <A>(f: (a1: A, a2: A) => A) => (o1: Option<A>, o2: Option<A>): Option<A> => {\n  if (isNone(o1)) {\n    return o2\n  } else if (isNone(o2)) {\n    return o1\n  }\n  return some(f(o1.value, o2.value))\n}\n","/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\n\n/**\n * @category type class\n * @since 2.0.0\n */\nexport interface Order<in A> {\n  (self: A, that: A): -1 | 0 | 1\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface OrderTypeLambda extends TypeLambda {\n  readonly type: Order<this[\"Target\"]>\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A>(\n  compare: (self: A, that: A) => -1 | 0 | 1\n): Order<A> =>\n(self, that) => self === that ? 0 : compare(self, that)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string: Order<string> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number: Order<number> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean: Order<boolean> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint: Order<bigint> = make((self, that) => self < that ? -1 : 1)\n\n/**\n * @since 2.0.0\n */\nexport const reverse = <A>(O: Order<A>): Order<A> => make((self, that) => O(that, self))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(that: Order<A>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, that: Order<A>): Order<A>\n} = dual(2, <A>(self: Order<A>, that: Order<A>): Order<A> =>\n  make((a1, a2) => {\n    const out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    return that(a1, a2)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany: {\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<A>\n  /**\n   * @category combining\n   * @since 2.0.0\n   */\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A>\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<A> =>\n  make((a1, a2) => {\n    let out = self(a1, a2)\n    if (out !== 0) {\n      return out\n    }\n    for (const O of collection) {\n      out = O(a1, a2)\n      if (out !== 0) {\n        return out\n      }\n    }\n    return out\n  }))\n\n/**\n * @since 2.0.0\n */\nexport const empty = <A>(): Order<A> => make(() => 0)\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = <A>(collection: Iterable<Order<A>>): Order<A> => combineMany(empty(), collection)\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <B, A>(f: (b: B) => A): (self: Order<A>) => Order<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B>\n} = dual(\n  2,\n  <A, B>(self: Order<A>, f: (b: B) => A): Order<B> => make((b1, b2) => self(f(b1), f(b2)))\n)\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date: Order<Date> = mapInput(number, (date) => date.getTime())\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product: {\n  <B>(that: Order<B>): <A>(self: Order<A>) => Order<readonly [A, B]> // readonly because invariant\n  <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> // readonly because invariant\n} = dual(2, <A, B>(self: Order<A>, that: Order<B>): Order<readonly [A, B]> =>\n  make(([xa, xb], [ya, yb]) => {\n    const o = self(xa, ya)\n    return o !== 0 ? o : that(xb, yb)\n  }))\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = <A>(collection: Iterable<Order<A>>): Order<ReadonlyArray<A>> => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length)\n    let collectionLength = 0\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break\n      }\n      const o = O(x[collectionLength], y[collectionLength])\n      if (o !== 0) {\n        return o\n      }\n      collectionLength++\n    }\n    return 0\n  })\n}\n\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany: {\n  <A>(collection: Iterable<Order<A>>): (self: Order<A>) => Order<readonly [A, ...Array<A>]> // readonly because invariant\n  <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> // readonly because invariant\n} = dual(2, <A>(self: Order<A>, collection: Iterable<Order<A>>): Order<readonly [A, ...Array<A>]> => {\n  const O = all(collection)\n  return make((x, y) => {\n    const o = self(x[0], y[0])\n    return o !== 0 ? o : O(x.slice(1), y.slice(1))\n  })\n})\n\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = <T extends ReadonlyArray<Order<any>>>(\n  ...elements: T\n): Order<Readonly<{ [I in keyof T]: [T[I]] extends [Order<infer A>] ? A : never }>> => all(elements) as any\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = <A>(O: Order<A>): Order<ReadonlyArray<A>> =>\n  make((self, that) => {\n    const aLen = self.length\n    const bLen = that.length\n    const len = Math.min(aLen, bLen)\n    for (let i = 0; i < len; i++) {\n      const o = O(self[i], that[i])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return number(aLen, bLen)\n  })\n\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = <R extends { readonly [x: string]: Order<any> }>(\n  fields: R\n): Order<{ [K in keyof R]: [R[K]] extends [Order<infer A>] ? A : never }> => {\n  const keys = Object.keys(fields)\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key])\n      if (o !== 0) {\n        return o\n      }\n    }\n    return 0\n  })\n}\n\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === -1)\n\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) === 1)\n\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== 1)\n\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = <A>(O: Order<A>): {\n  (that: A): (self: A) => boolean\n  (self: A, that: A): boolean\n} => dual(2, (self: A, that: A) => O(self, that) !== -1)\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) < 1 ? self : that)\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = <A>(O: Order<A>): {\n  (that: A): (self: A) => A\n  (self: A, that: A): A\n} => dual(2, (self: A, that: A) => self === that || O(self, that) > -1 ? self : that)\n\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n * ```\n *\n * @since 2.0.0\n */\nexport const clamp = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => A\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): A\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): A => min(O)(options.maximum, max(O)(options.minimum, self))\n  )\n\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = <A>(O: Order<A>): {\n  (options: {\n    minimum: A\n    maximum: A\n  }): (self: A) => boolean\n  (self: A, options: {\n    minimum: A\n    maximum: A\n  }): boolean\n} =>\n  dual(\n    2,\n    (self: A, options: {\n      minimum: A\n      maximum: A\n    }): boolean => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum)\n  )\n","/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"./Array.js\"\nimport type { Either } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { Option } from \"./Option.js\"\nimport * as O from \"./Option.js\"\nimport { isBoolean } from \"./Predicate.js\"\nimport type * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * Return a `Iterable` with element `i` initialized with `f(i)`.\n *\n * If the `length` is not specified, the `Iterable` will be infinite.\n *\n * **Note**. `length` is normalized to an integer >= 1.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { makeBy } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(makeBy(n => n * 2, { length: 5 })), [0, 2, 4, 6, 8])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = <A>(f: (i: number) => A, options?: {\n  readonly length?: number\n}): Iterable<A> => {\n  const max = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity\n  return {\n    [Symbol.iterator]() {\n      let i = 0\n      return {\n        next(): IteratorResult<A> {\n          if (i < max) {\n            return { value: f(i++), done: false }\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Return a `Iterable` containing a range of integers, including both endpoints.\n *\n * If `end` is omitted, the range will not have an upper bound.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { range } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(range(1, 3)), [1, 2, 3])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end?: number): Iterable<number> => {\n  if (end === undefined) {\n    return makeBy((i) => start + i)\n  }\n  return makeBy((i) => start + i, {\n    length: start <= end ? end - start + 1 : 1\n  })\n}\n\n/**\n * Return a `Iterable` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { replicate } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Return a `Iterable` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { replicate } from \"effect/Iterable\"\n   *\n   * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (n: number): <A>(a: A) => Iterable<A>\n  /**\n   * Return a `Iterable` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { replicate } from \"effect/Iterable\"\n   *\n   * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(a: A, n: number): Iterable<A>\n} = dual(2, <A>(a: A, n: number): Iterable<A> => makeBy(() => a, { length: n }))\n\n/**\n * Takes a record and returns an Iterable of tuples containing its keys and values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromRecord } from \"effect/Iterable\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.from(fromRecord(x)), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord = <K extends string, A>(self: Readonly<Record<K, A>>): Iterable<[K, A]> => ({\n  *[Symbol.iterator]() {\n    for (const key in self) {\n      if (Object.prototype.hasOwnProperty.call(self, key)) {\n        yield [key, self[key]]\n      }\n    }\n  }\n})\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(head: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, head: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): Iterable<A | B> => prependAll(self, [head]))\n\n/**\n * Prepends the specified prefix iterable to the beginning of the specified iterable.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n *   [\"a\", \"b\", 1, 2]\n * )\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix iterable to the beginning of the specified iterable.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Iterable } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Prepends the specified prefix iterable to the beginning of the specified iterable.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Iterable } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n   *   [\"a\", \"b\", 1, 2]\n   * )\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B> => appendAll(that, self)\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(last: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, last: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Iterable<A | B> => appendAll(self, [last]))\n\n/**\n * Concatenates two iterables, combining their elements.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two iterables, combining their elements.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Concatenates two iterables, combining their elements.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<A | B> => ({\n    [Symbol.iterator]() {\n      const iterA = self[Symbol.iterator]()\n      let doneA = false\n      let iterB: Iterator<B>\n      return {\n        next() {\n          if (!doneA) {\n            const r = iterA.next()\n            if (r.done) {\n              doneA = true\n              iterB = that[Symbol.iterator]()\n              return iterB.next()\n            }\n            return r\n          }\n          return iterB.next()\n        }\n      }\n    }\n  })\n)\n\n/**\n * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  /**\n   * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): Iterable<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): Iterable<B> => ({\n  [Symbol.iterator]() {\n    let acc = b\n    let iterator: Iterator<A> | undefined\n    function next() {\n      if (iterator === undefined) {\n        iterator = self[Symbol.iterator]()\n        return { done: false, value: acc }\n      }\n      const result = iterator.next()\n      if (result.done) {\n        return result\n      }\n      acc = f(acc, result.value)\n      return { done: false, value: acc }\n    }\n    return { next }\n  }\n}))\n\n/**\n * Determine if an `Iterable` is empty\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmpty } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(isEmpty([]), true);\n * assert.deepStrictEqual(isEmpty([1, 2, 3]), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmpty = <A>(self: Iterable<A>): self is Iterable<never> => {\n  const iterator = self[Symbol.iterator]()\n  return iterator.next().done === true\n}\n\n/**\n * Return the number of elements in a `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const size = <A>(self: Iterable<A>): number => {\n  const iterator = self[Symbol.iterator]()\n  let count = 0\n  while (!iterator.next().done) {\n    count++\n  }\n  return count\n}\n\n/**\n * Get the first element of a `Iterable`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head = <A>(self: Iterable<A>): Option<A> => {\n  const iterator = self[Symbol.iterator]()\n  const result = iterator.next()\n  return result.done ? O.none() : O.some(result.value)\n}\n\n/**\n * Get the first element of a `Iterable`, or throw an error if the `Iterable` is empty.\n *\n * @category getters\n * @since 3.3.0\n */\nexport const unsafeHead = <A>(self: Iterable<A>): A => {\n  const iterator = self[Symbol.iterator]()\n  const result = iterator.next()\n  if (result.done) throw new Error(\"unsafeHead: empty iterable\")\n  return result.value\n}\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<A>\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<A> => ({\n  [Symbol.iterator]() {\n    let i = 0\n    const iterator = self[Symbol.iterator]()\n    return {\n      next() {\n        if (i < n) {\n          i++\n          return iterator.next()\n        }\n        return { done: true, value: undefined }\n      }\n    }\n  }\n}))\n\n/**\n * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Iterable<B>\n  /**\n   * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done || !predicate(result.value, i++)) {\n          return { done: true, value: undefined }\n        }\n        return result\n      }\n    }\n  }\n}))\n\n/**\n * Drop a max number of elements from the start of an `Iterable`\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drop a max number of elements from the start of an `Iterable`\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<A>\n  /**\n   * Drop a max number of elements from the start of an `Iterable`\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        while (i < n) {\n          const result = iterator.next()\n          if (result.done) {\n            return { done: true, value: undefined }\n          }\n          i++\n        }\n        return iterator.next()\n      }\n    }\n  }\n}))\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    let i = 0\n    for (const a of self) {\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          return O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          return o\n        }\n      }\n      i++\n    }\n    return O.none()\n  }\n)\n\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option<B>): (self: Iterable<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option<A>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option<B>\n  /**\n   * Find the last element for which a predicate holds.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option<A>)): Option<A> => {\n    let i = 0\n    let last: Option<A> = O.none()\n    for (const a of self) {\n      const o = f(a, i)\n      if (isBoolean(o)) {\n        if (o) {\n          last = O.some(a)\n        }\n      } else {\n        if (O.isSome(o)) {\n          last = o\n        }\n      }\n      i++\n    }\n    return last\n  }\n)\n\n/**\n * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Iterable<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C> => ({\n  [Symbol.iterator]() {\n    const selfIterator = self[Symbol.iterator]()\n    const thatIterator = that[Symbol.iterator]()\n    return {\n      next() {\n        const selfResult = selfIterator.next()\n        const thatResult = thatIterator.next()\n        if (selfResult.done || thatResult.done) {\n          return { done: true, value: undefined }\n        }\n        return { done: false, value: f(selfResult.value, thatResult.value) }\n      }\n    }\n  }\n}))\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @since 2.0.0\n   */\n  <B>(middle: B): <A>(self: Iterable<A>) => Iterable<A | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, middle: B): Iterable<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Iterable<A | B> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let next = iterator.next()\n    let emitted = false\n    return {\n      next() {\n        if (next.done) {\n          return next\n        } else if (emitted) {\n          emitted = false\n          return { done: false, value: middle }\n        }\n        emitted = true\n        const result = next\n        next = iterator.next()\n        return result\n      }\n    }\n  }\n}))\n\n/**\n * Returns a function that checks if an `Iterable` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Iterable<A>) => boolean\n  /**\n   * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Iterable<Array<A>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`.\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Iterable<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Iterable<Array<A>> => {\n  const safeN = Math.max(1, Math.floor(n))\n  return ({\n    [Symbol.iterator]() {\n      let iterator: Iterator<A> | undefined = self[Symbol.iterator]()\n      return {\n        next() {\n          if (iterator === undefined) {\n            return { done: true, value: undefined }\n          }\n\n          const chunk: Array<A> = []\n          for (let i = 0; i < safeN; i++) {\n            const result = iterator.next()\n            if (result.done) {\n              iterator = undefined\n              return chunk.length === 0 ? { done: true, value: undefined } : { done: false, value: chunk }\n            }\n            chunk.push(result.value)\n          }\n\n          return { done: false, value: chunk }\n        }\n      }\n    }\n  })\n})\n\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  /**\n   * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Iterable<NonEmptyArray<A>>\n  /**\n   * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<NonEmptyArray<A>> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let nextResult: IteratorResult<A> | undefined\n      return {\n        next() {\n          let result: IteratorResult<A>\n          if (nextResult !== undefined) {\n            if (nextResult.done) {\n              return { done: true, value: undefined }\n            }\n            result = nextResult\n            nextResult = undefined\n          } else {\n            result = iterator.next()\n            if (result.done) {\n              return { done: true, value: undefined }\n            }\n          }\n          const chunk: NonEmptyArray<A> = [result.value]\n\n          while (true) {\n            const next = iterator.next()\n            if (next.done || !isEquivalent(result.value, next.value)) {\n              nextResult = next\n              return { done: false, value: chunk }\n            }\n            chunk.push(next.value)\n          }\n        }\n      }\n    }\n  })\n)\n\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: Iterable<A>) => Iterable<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(f: (a: A) => K): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(self: Iterable<A>, f: (a: A) => K): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\nconst constEmpty: Iterable<never> = {\n  [Symbol.iterator]() {\n    return constEmptyIterator\n  }\n}\nconst constEmptyIterator: Iterator<never> = {\n  next() {\n    return { done: true, value: undefined }\n  }\n}\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = <A = never>(): Iterable<A> => constEmpty\n\n/**\n * Constructs a new `Iterable<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): Iterable<A> => [a]\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: NoInfer<A>, i: number) => B): Iterable<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => B): Iterable<B> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done) {\n          return { done: true, value: undefined }\n        }\n        return { done: false, value: f(result.value, i++) }\n      }\n    }\n  }\n}))\n\n/**\n * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Iterable<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: NoInfer<A>, i: number) => Iterable<B>): Iterable<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Iterable<B>): Iterable<B> => flatten(map(self, f))\n)\n\n/**\n * Flattens an Iterable of Iterables into a single Iterable\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten = <A>(self: Iterable<Iterable<A>>): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const outerIterator = self[Symbol.iterator]()\n    let innerIterator: Iterator<A> | undefined\n    function next() {\n      if (innerIterator === undefined) {\n        const next = outerIterator.next()\n        if (next.done) {\n          return next\n        }\n        innerIterator = next.value[Symbol.iterator]()\n      }\n      const result = innerIterator.next()\n      if (result.done) {\n        innerIterator = undefined\n        return next()\n      }\n      return result\n    }\n    return { next }\n  }\n})\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let i = 0\n      return {\n        next() {\n          let result = iterator.next()\n          while (!result.done) {\n            const b = f(result.value, i++)\n            if (O.isSome(b)) {\n              return { done: false, value: b.value }\n            }\n            result = iterator.next()\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  })\n)\n\n/**\n * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  /**\n   * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option<B>): (self: Iterable<A>) => Iterable<B>\n  /**\n   * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>): Iterable<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option<B>) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let i = 0\n    return {\n      next() {\n        const result = iterator.next()\n        if (result.done) {\n          return { done: true, value: undefined }\n        }\n        const b = f(result.value, i++)\n        if (O.isSome(b)) {\n          return { done: false, value: b.value }\n        }\n        return { done: true, value: undefined }\n      }\n    }\n  }\n}))\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getSomes([Option.some(1), Option.none(), Option.some(2)])),\n *   [1, 2]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes: <A>(self: Iterable<Option<A>>) => Iterable<A> = filterMap(identity)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [\"err\"]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <R, L>(self: Iterable<Either<R, L>>): Iterable<L> => filterMap(self, E.getLeft)\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [1, 2]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <R, L>(self: Iterable<Either<R, L>>): Iterable<R> => filterMap(self, E.getRight)\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Iterable<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Iterable<A> => ({\n    [Symbol.iterator]() {\n      const iterator = self[Symbol.iterator]()\n      let i = 0\n      return {\n        next() {\n          let result = iterator.next()\n          while (!result.done) {\n            if (predicate(result.value, i++)) {\n              return { done: false, value: result.value }\n            }\n            result = iterator.next()\n          }\n          return { done: true, value: undefined }\n        }\n      }\n    }\n  })\n)\n\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: Iterable<A>) => Iterable<NonNullable<B>>\n  /**\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A) => B | null | undefined): Iterable<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A) => B | null | undefined): Iterable<NonNullable<B>> =>\n    filterMap(self, (a) => {\n      const b = f(a)\n      return b == null ? O.none() : O.some(b)\n    })\n)\n\n/**\n * Check if a predicate holds true for some `Iterable` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `Iterable` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: A, i: number) => boolean): (self: Iterable<A>) => boolean\n  /**\n   * Check if a predicate holds true for some `Iterable` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): boolean => {\n    let i = 0\n    for (const a of self) {\n      if (predicate(a, i++)) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option<readonly [A, B]>): Iterable<A> => ({\n  [Symbol.iterator]() {\n    let next = b\n    return {\n      next() {\n        const o = f(next)\n        if (O.isNone(o)) {\n          return { done: true, value: undefined }\n        }\n        const [a, b] = o.value\n        next = b\n        return { done: false, value: a }\n      }\n    }\n  }\n})\n\n/**\n * Iterate over the `Iterable` applying `f`.\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * Iterate over the `Iterable` applying `f`.\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  /**\n   * Iterate over the `Iterable` applying `f`.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => {\n  let i = 0\n  for (const a of self) {\n    f(a, i++)\n  }\n})\n\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B => {\n  if (Array.isArray(self)) {\n    return self.reduce(f, b)\n  }\n  let i = 0\n  let result = b\n  for (const n of self) {\n    result = f(result, n, i++)\n  }\n  return result\n})\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Iterable<A>\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Iterable<A> => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]()\n    let first = true\n    let last: A\n    function next(): IteratorResult<A> {\n      const result = iterator.next()\n      if (result.done) {\n        return { done: true, value: undefined }\n      }\n      if (first) {\n        first = false\n        last = result.value\n        return result\n      }\n      const current = result.value\n      if (isEquivalent(last, current)) {\n        return next()\n      }\n      last = current\n      return result\n    }\n    return { next }\n  }\n}))\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Iterable<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  /**\n   * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Iterable<C>\n  /**\n   * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C>\n} = dual(\n  3,\n  <A, B, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Iterable<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this Iterable crosswise with the specified Iterable.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  /**\n   * Zips this Iterable crosswise with the specified Iterable.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Iterable<[A, B]>\n  /**\n   * Zips this Iterable crosswise with the specified Iterable.\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Iterable<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n/**\n * Counts all the element of the given iterable that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { Iterable } from \"effect\"\n *\n * const result = Iterable.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // 2\n * ```\n *\n * @category folding\n * @since 3.16.0\n */\nexport const countBy: {\n  /**\n   * Counts all the element of the given iterable that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Iterable } from \"effect\"\n   *\n   * const result = Iterable.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => number\n  /**\n   * Counts all the element of the given iterable that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Iterable } from \"effect\"\n   *\n   * const result = Iterable.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => boolean\n  ): number => {\n    let count = 0\n    let i = 0\n    for (const a of self) {\n      if (f(a, i)) {\n        count++\n      }\n      i++\n    }\n    return count\n  }\n)\n","/**\n * This module provides utility functions for working with tuples in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as order from \"./Order.js\"\nimport type { TupleOf } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface TupleTypeLambda extends TypeLambda {\n  readonly type: [this[\"Out1\"], this[\"Target\"]]\n}\n\n/**\n * Constructs a new tuple from the provided values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { make } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(make(1, 'hello', true), [1, 'hello', true])\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <A extends ReadonlyArray<any>>(...elements: A): A => elements\n\n/**\n * Return the first element from a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getFirst([\"hello\", 42]), \"hello\")\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getFirst = <L, R>(self: readonly [L, R]): L => self[0]\n\n/**\n * Return the second element from a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { getSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(getSecond([\"hello\", 42]), 42)\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getSecond = <L, R>(self: readonly [L, R]): R => self[1]\n\n/**\n * Transforms each element of tuple using the given function, treating tuple homomorphically\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, Tuple } from \"effect\"\n *\n * const result = pipe(\n *   [\"a\", 1, false] as const,\n *   Tuple.map((el) => el.toString().toUpperCase())\n * )\n * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n * ```\n *\n * @category mapping\n * @since 3.9.0\n */\nexport const map: {\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   * ```\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <T extends ReadonlyArray<any> | [], B>(fn: (element: T[number]) => B): (self: T) => TupleOf<T[\"length\"], B>\n  /**\n   * Transforms each element of tuple using the given function, treating tuple homomorphically\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, Tuple } from \"effect\"\n   *\n   * const result = pipe(\n   *   [\"a\", 1, false] as const,\n   *   Tuple.map((el) => el.toString().toUpperCase())\n   * )\n   * assert.deepStrictEqual(result, ['A', '1', 'FALSE'])\n   * ```\n   *\n   * @category mapping\n   * @since 3.9.0\n   */\n  <B, T extends ReadonlyArray<any> | []>(self: T, fn: (element: T[number]) => B): TupleOf<T[\"length\"], B>\n} = dual(\n  2,\n  <N extends number, A, B>(\n    self: TupleOf<N, A>,\n    fn: (element: A) => B\n  ): TupleOf<N, B> => self.map((element) => fn(element)) as TupleOf<N, B>\n)\n\n/**\n * Transforms both elements of a tuple with two elements using the given functions.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapBoth } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n *   [\"HELLO\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth: {\n  /**\n   * Transforms both elements of a tuple with two elements using the given functions.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2, R1, R2>(\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): (self: readonly [L1, R1]) => [L2, R2]\n  /**\n   * Transforms both elements of a tuple with two elements using the given functions.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapBoth } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapBoth([\"hello\", 42], { onFirst: s => s.toUpperCase(), onSecond: n => n.toString() }),\n   *   [\"HELLO\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    options: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2]\n} = dual(\n  2,\n  <L1, R1, L2, R2>(\n    self: readonly [L1, R1],\n    { onFirst, onSecond }: {\n      readonly onFirst: (e: L1) => L2\n      readonly onSecond: (a: R1) => R2\n    }\n  ): [L2, R2] => [onFirst(self[0]), onSecond(self[1])]\n)\n\n/**\n * Transforms the first component of a tuple with two elements using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapFirst } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n *   [\"HELLO\", 42]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapFirst: {\n  /**\n   * Transforms the first component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, L2>(f: (left: L1) => L2): <R>(self: readonly [L1, R]) => [L2, R]\n  /**\n   * Transforms the first component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapFirst } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapFirst([\"hello\", 42], s => s.toUpperCase()),\n   *   [\"HELLO\", 42]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R]\n} = dual(2, <L1, R, L2>(self: readonly [L1, R], f: (left: L1) => L2): [L2, R] => [f(self[0]), self[1]])\n\n/**\n * Transforms the second component of a tuple with two elements using a given function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapSecond } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(\n *   mapSecond([\"hello\", 42], n => n.toString()),\n *   [\"hello\", \"42\"]\n * )\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapSecond: {\n  /**\n   * Transforms the second component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <R1, R2>(f: (right: R1) => R2): <L>(self: readonly [L, R1]) => [L, R2]\n  /**\n   * Transforms the second component of a tuple with two elements using a given function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapSecond } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(\n   *   mapSecond([\"hello\", 42], n => n.toString()),\n   *   [\"hello\", \"42\"]\n   * )\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2]\n} = dual(2, <L, R1, R2>(self: readonly [L, R1], f: (right: R1) => R2): [L, R2] => [self[0], f(self[1])])\n\n/**\n * Swaps the elements of a tuple with two elements.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { swap } from \"effect/Tuple\"\n *\n * assert.deepStrictEqual(swap([\"hello\", 42]), [42, \"hello\"])\n * ```\n *\n * @since 2.0.0\n */\nexport const swap = <L, R>(self: readonly [L, R]): [R, L] => [self[1], self[0]]\n\n/**\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getEquivalence: <T extends ReadonlyArray<Equivalence.Equivalence<any>>>(\n  ...isEquivalents: T\n) => Equivalence.Equivalence<\n  Readonly<{ [I in keyof T]: [T[I]] extends [Equivalence.Equivalence<infer A>] ? A : never }>\n> = Equivalence.tuple\n\n/**\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const getOrder: <T extends ReadonlyArray<order.Order<any>>>(\n  ...elements: T\n) => order.Order<{ [I in keyof T]: [T[I]] extends [order.Order<infer A>] ? A : never }> = order.tuple\n\n/**\n * Appends an element to the end of a tuple.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendElement: {\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(that: B): <A extends ReadonlyArray<unknown>>(self: A) => [...A, B]\n  /**\n   * Appends an element to the end of a tuple.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B]\n} = dual(2, <A extends ReadonlyArray<unknown>, B>(self: A, that: B): [...A, B] => [...self, that])\n\n/**\n * Retrieves the element at a specified index from a tuple.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Tuple } from \"effect\"\n *\n * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n * ```\n *\n * @category getters\n * @since 3.4.0\n */\nexport const at: {\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   * ```\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <N extends number>(index: N): <A extends ReadonlyArray<unknown>>(self: A) => A[N]\n  /**\n   * Retrieves the element at a specified index from a tuple.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Tuple } from \"effect\"\n   *\n   * assert.deepStrictEqual(Tuple.at([1, 'hello', true], 1), 'hello')\n   * ```\n   *\n   * @category getters\n   * @since 3.4.0\n   */\n  <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N]\n} = dual(2, <A extends ReadonlyArray<unknown>, N extends number>(self: A, index: N): A[N] => self[index])\n\nexport {\n  /**\n   * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n   *\n   * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOf } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n   * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3];\n   * if (isTupleOf(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number]\n   * }\n   *\n   * ```\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOf,\n  /**\n   * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n   *\n   * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { isTupleOfAtLeast } from \"effect/Tuple\"\n   *\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n   * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n   *\n   * const arr: number[] = [1, 2, 3, 4];\n   * if (isTupleOfAtLeast(arr, 3)) {\n   *   console.log(arr);\n   *   // ^? [number, number, number, ...number[]]\n   * }\n   *\n   * ```\n   * @category guards\n   * @since 3.3.0\n   */\n  isTupleOfAtLeast\n} from \"./Predicate.js\"\n","/**\n * This module provides utility functions and type class instances for working with the `string` type in TypeScript.\n * It includes functions for basic string manipulation, as well as type class instances for\n * `Equivalence` and `Order`.\n *\n * @since 2.0.0\n */\n\nimport type { NonEmptyArray } from \"./Array.js\"\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as readonlyArray from \"./internal/array.js\"\nimport * as number from \"./Number.js\"\nimport * as Option from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type * as Ordering from \"./Ordering.js\"\nimport type { Refinement } from \"./Predicate.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Tests if a value is a `string`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.isString(\"a\"), true)\n * assert.deepStrictEqual(String.isString(1), false)\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString: Refinement<unknown, string> = predicate.isString\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Equivalence: equivalence.Equivalence<string> = equivalence.string\n\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Order: order.Order<string> = order.string\n\n/**\n * The empty string `\"\"`.\n *\n * @since 2.0.0\n */\nexport const empty: \"\" = \"\" as const\n\n/**\n * Concatenates two strings at the type level.\n *\n * @since 2.0.0\n */\nexport type Concat<A extends string, B extends string> = `${A}${B}`\n\n/**\n * Concatenates two strings at runtime.\n *\n * @since 2.0.0\n */\nexport const concat: {\n  /**\n   * Concatenates two strings at runtime.\n   *\n   * @since 2.0.0\n   */\n  <B extends string>(that: B): <A extends string>(self: A) => Concat<A, B>\n  /**\n   * Concatenates two strings at runtime.\n   *\n   * @since 2.0.0\n   */\n  <A extends string, B extends string>(self: A, that: B): Concat<A, B>\n} = dual(2, (self: string, that: string): string => self + that)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('a', String.toUpperCase), 'A')\n * ```\n *\n * @since 2.0.0\n */\nexport const toUpperCase = <S extends string>(self: S): Uppercase<S> => self.toUpperCase() as Uppercase<S>\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('A', String.toLowerCase), 'a')\n * ```\n *\n * @since 2.0.0\n */\nexport const toLowerCase = <T extends string>(self: T): Lowercase<T> => self.toLowerCase() as Lowercase<T>\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.capitalize), 'Abc')\n * ```\n *\n * @since 2.0.0\n */\nexport const capitalize = <T extends string>(self: T): Capitalize<T> => {\n  if (self.length === 0) return self as Capitalize<T>\n\n  return (toUpperCase(self[0]) + self.slice(1)) as Capitalize<T>\n}\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('ABC', String.uncapitalize), 'aBC')\n * ```\n *\n * @since 2.0.0\n */\nexport const uncapitalize = <T extends string>(self: T): Uncapitalize<T> => {\n  if (self.length === 0) return self as Uncapitalize<T>\n\n  return (toLowerCase(self[0]) + self.slice(1)) as Uncapitalize<T>\n}\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.replace('b', 'd')), 'adc')\n * ```\n *\n * @since 2.0.0\n */\nexport const replace = (searchValue: string | RegExp, replaceValue: string) => (self: string): string =>\n  self.replace(searchValue, replaceValue)\n\n/**\n * @since 2.0.0\n */\nexport type Trim<A extends string> = TrimEnd<TrimStart<A>>\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trim(' a '), 'a')\n * ```\n *\n * @since 2.0.0\n */\nexport const trim = <A extends string>(self: A): Trim<A> => self.trim() as Trim<A>\n\n/**\n * @since 2.0.0\n */\nexport type TrimStart<A extends string> = A extends `${\" \" | \"\\n\" | \"\\t\" | \"\\r\"}${infer B}` ? TrimStart<B> : A\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trimStart(' a '), 'a ')\n * ```\n *\n * @since 2.0.0\n */\nexport const trimStart = <A extends string>(self: A): TrimStart<A> => self.trimStart() as TrimStart<A>\n\n/**\n * @since 2.0.0\n */\nexport type TrimEnd<A extends string> = A extends `${infer B}${\" \" | \"\\n\" | \"\\t\" | \"\\r\"}` ? TrimEnd<B> : A\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.trimEnd(' a '), ' a')\n * ```\n *\n * @since 2.0.0\n */\nexport const trimEnd = <A extends string>(self: A): TrimEnd<A> => self.trimEnd() as TrimEnd<A>\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abcd', String.slice(1, 3)), 'bc')\n * ```\n *\n * @since 2.0.0\n */\nexport const slice = (start?: number, end?: number) => (self: string): string => self.slice(start, end)\n\n/**\n * Test whether a `string` is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.isEmpty(''), true)\n * assert.deepStrictEqual(String.isEmpty('a'), false)\n * ```\n *\n * @since 2.0.0\n */\nexport const isEmpty = (self: string): self is \"\" => self.length === 0\n\n/**\n * Test whether a `string` is non empty.\n *\n * @since 2.0.0\n */\nexport const isNonEmpty = (self: string): boolean => self.length > 0\n\n/**\n * Calculate the number of characters in a `string`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.length('abc'), 3)\n * ```\n *\n * @since 2.0.0\n */\nexport const length = (self: string): number => self.length\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n * assert.deepStrictEqual(pipe('', String.split('')), [''])\n * ```\n *\n * @since 2.0.0\n */\nexport const split: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n   * assert.deepStrictEqual(pipe('', String.split('')), [''])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (separator: string | RegExp): (self: string) => NonEmptyArray<string>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe('abc', String.split('')), ['a', 'b', 'c'])\n   * assert.deepStrictEqual(pipe('', String.split('')), [''])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, separator: string | RegExp): NonEmptyArray<string>\n} = dual(2, (self: string, separator: string | RegExp): NonEmptyArray<string> => {\n  const out = self.split(separator)\n  return readonlyArray.isNonEmptyArray(out) ? out : [self]\n})\n\n/**\n * Returns `true` if `searchString` appears as a substring of `self`, at one or more positions that are\n * greater than or equal to `position`; otherwise, returns `false`.\n *\n * @since 2.0.0\n */\nexport const includes = (searchString: string, position?: number) => (self: string): boolean =>\n  self.includes(searchString, position)\n\n/**\n * @since 2.0.0\n */\nexport const startsWith = (searchString: string, position?: number) => (self: string): boolean =>\n  self.startsWith(searchString, position)\n\n/**\n * @since 2.0.0\n */\nexport const endsWith = (searchString: string, position?: number) => (self: string): boolean =>\n  self.endsWith(searchString, position)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const charCodeAt: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(1)), Option.some(98))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charCodeAt(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<number>\n} = dual(\n  2,\n  (self: string, index: number): Option.Option<number> =>\n    Option.filter(Option.some(self.charCodeAt(index)), (charCode) => !isNaN(charCode))\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abcd\", String.substring(1)), \"bcd\")\n * assert.deepStrictEqual(pipe(\"abcd\", String.substring(1, 3)), \"bc\")\n * ```\n *\n * @since 2.0.0\n */\nexport const substring = (start: number, end?: number) => (self: string): string => self.substring(start, end)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const at: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<string>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.at(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<string>\n} = dual(2, (self: string, index: number): Option.Option<string> => Option.fromNullable(self.at(index)))\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const charAt: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<string>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(1)), Option.some(\"b\"))\n   * assert.deepStrictEqual(pipe(\"abc\", String.charAt(4)), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<string>\n} = dual(\n  2,\n  (self: string, index: number): Option.Option<string> => Option.filter(Option.some(self.charAt(index)), isNonEmpty)\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n * ```\n *\n * @since 2.0.0\n */\nexport const codePointAt: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (index: number): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"abc\", String.codePointAt(1)), Option.some(98))\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, index: number): Option.Option<number>\n} = dual(2, (self: string, index: number): Option.Option<number> => Option.fromNullable(self.codePointAt(index)))\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abbbc\", String.indexOf(\"b\")), Option.some(1))\n * ```\n *\n * @since 2.0.0\n */\nexport const indexOf = (searchString: string) => (self: string): Option.Option<number> =>\n  Option.filter(Option.some(self.indexOf(searchString)), number.greaterThanOrEqualTo(0))\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"abbbc\", String.lastIndexOf(\"b\")), Option.some(3))\n * assert.deepStrictEqual(pipe(\"abbbc\", String.lastIndexOf(\"d\")), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const lastIndexOf = (searchString: string) => (self: string): Option.Option<number> =>\n  Option.filter(Option.some(self.lastIndexOf(searchString)), number.greaterThanOrEqualTo(0))\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.localeCompare(\"b\")), -1)\n * assert.deepStrictEqual(pipe(\"b\", String.localeCompare(\"a\")), 1)\n * assert.deepStrictEqual(pipe(\"a\", String.localeCompare(\"a\")), 0)\n * ```\n *\n * @since 2.0.0\n */\nexport const localeCompare =\n  (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions) => (self: string): Ordering.Ordering =>\n    number.sign(self.localeCompare(that, locales, options))\n\n/**\n * It is the `pipe`-able version of the native `match` method.\n *\n * @since 2.0.0\n */\nexport const match = (regexp: RegExp | string) => (self: string): Option.Option<RegExpMatchArray> =>\n  Option.fromNullable(self.match(regexp))\n\n/**\n * It is the `pipe`-able version of the native `matchAll` method.\n *\n * @since 2.0.0\n */\nexport const matchAll = (regexp: RegExp) => (self: string): IterableIterator<RegExpMatchArray> => self.matchAll(regexp)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * const str = \"\\u1E9B\\u0323\";\n * assert.deepStrictEqual(pipe(str, String.normalize()), \"\\u1E9B\\u0323\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFC\")), \"\\u1E9B\\u0323\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFD\")), \"\\u017F\\u0323\\u0307\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFKC\")), \"\\u1E69\")\n * assert.deepStrictEqual(pipe(str, String.normalize(\"NFKD\")), \"\\u0073\\u0323\\u0307\")\n * ```\n *\n * @since 2.0.0\n */\nexport const normalize = (form?: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\") => (self: string): string => self.normalize(form)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.padEnd(5)), \"a    \")\n * assert.deepStrictEqual(pipe(\"a\", String.padEnd(5, \"_\")), \"a____\")\n * ```\n *\n * @since 2.0.0\n */\nexport const padEnd = (maxLength: number, fillString?: string) => (self: string): string =>\n  self.padEnd(maxLength, fillString)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.padStart(5)), \"    a\")\n * assert.deepStrictEqual(pipe(\"a\", String.padStart(5, \"_\")), \"____a\")\n * ```\n *\n * @since 2.0.0\n */\nexport const padStart = (maxLength: number, fillString?: string) => (self: string): string =>\n  self.padStart(maxLength, fillString)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"a\", String.repeat(5)), \"aaaaa\")\n * ```\n *\n * @since 2.0.0\n */\nexport const repeat = (count: number) => (self: string): string => self.repeat(count)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"ababb\", String.replaceAll(\"b\", \"c\")), \"acacc\")\n * assert.deepStrictEqual(pipe(\"ababb\", String.replaceAll(/ba/g, \"cc\")), \"accbb\")\n * ```\n *\n * @since 2.0.0\n */\nexport const replaceAll = (searchValue: string | RegExp, replaceValue: string) => (self: string): string =>\n  self.replaceAll(searchValue, replaceValue)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const search: {\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (regexp: RegExp | string): (self: string) => Option.Option<number>\n  /**\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { pipe, String, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"b\")), Option.some(1))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(/abb/)), Option.some(2))\n   * assert.deepStrictEqual(pipe(\"ababb\", String.search(\"d\")), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, regexp: RegExp | string): Option.Option<number>\n} = dual(\n  2,\n  (self: string, regexp: RegExp | string): Option.Option<number> =>\n    Option.filter(Option.some(self.search(regexp)), number.greaterThanOrEqualTo(0))\n)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * const str = \"\\u0130\"\n * assert.deepStrictEqual(pipe(str, String.toLocaleLowerCase(\"tr\")), \"i\")\n * ```\n *\n * @since 2.0.0\n */\nexport const toLocaleLowerCase = (locale?: Intl.LocalesArgument) => (self: string): string =>\n  self.toLocaleLowerCase(locale)\n\n/**\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { pipe, String } from \"effect\"\n *\n * const str = \"i\\u0307\"\n * assert.deepStrictEqual(pipe(str, String.toLocaleUpperCase(\"lt-LT\")), \"I\")\n * ```\n *\n * @since 2.0.0\n */\nexport const toLocaleUpperCase = (locale?: Intl.LocalesArgument) => (self: string): string =>\n  self.toLocaleUpperCase(locale)\n\n/**\n * Keep the specified number of characters from the start of a string.\n *\n * If `n` is larger than the available number of characters, the string will\n * be returned whole.\n *\n * If `n` is not a positive number, an empty string will be returned.\n *\n * If `n` is a float, it will be rounded down to the nearest integer.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n * ```\n *\n * @since 2.0.0\n */\nexport const takeLeft: {\n  /**\n   * Keep the specified number of characters from the start of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (n: number): (self: string) => string\n  /**\n   * Keep the specified number of characters from the start of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeLeft(\"Hello World\", 5), \"Hello\")\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, n: number): string\n} = dual(2, (self: string, n: number): string => self.slice(0, Math.max(n, 0)))\n\n/**\n * Keep the specified number of characters from the end of a string.\n *\n * If `n` is larger than the available number of characters, the string will\n * be returned whole.\n *\n * If `n` is not a positive number, an empty string will be returned.\n *\n * If `n` is a float, it will be rounded down to the nearest integer.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { String } from \"effect\"\n *\n * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n * ```\n *\n * @since 2.0.0\n */\nexport const takeRight: {\n  /**\n   * Keep the specified number of characters from the end of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (n: number): (self: string) => string\n  /**\n   * Keep the specified number of characters from the end of a string.\n   *\n   * If `n` is larger than the available number of characters, the string will\n   * be returned whole.\n   *\n   * If `n` is not a positive number, an empty string will be returned.\n   *\n   * If `n` is a float, it will be rounded down to the nearest integer.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { String } from \"effect\"\n   *\n   * assert.deepStrictEqual(String.takeRight(\"Hello World\", 5), \"World\")\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (self: string, n: number): string\n} = dual(\n  2,\n  (self: string, n: number): string => self.slice(Math.max(0, self.length - Math.floor(n)), Infinity)\n)\n\nconst CR = 0x0d\nconst LF = 0x0a\n\n/**\n * Returns an `IterableIterator` which yields each line contained within the\n * string, trimming off the trailing newline character.\n *\n * @since 2.0.0\n */\nexport const linesIterator = (self: string): LinesIterator => linesSeparated(self, true)\n\n/**\n * Returns an `IterableIterator` which yields each line contained within the\n * string as well as the trailing newline character.\n *\n * @since 2.0.0\n */\nexport const linesWithSeparators = (s: string): LinesIterator => linesSeparated(s, false)\n\n/**\n * For every line in this string, strip a leading prefix consisting of blanks\n * or control characters followed by the character specified by `marginChar`\n * from the line.\n *\n * @since 2.0.0\n */\nexport const stripMarginWith: {\n  /**\n   * For every line in this string, strip a leading prefix consisting of blanks\n   * or control characters followed by the character specified by `marginChar`\n   * from the line.\n   *\n   * @since 2.0.0\n   */\n  (marginChar: string): (self: string) => string\n  /**\n   * For every line in this string, strip a leading prefix consisting of blanks\n   * or control characters followed by the character specified by `marginChar`\n   * from the line.\n   *\n   * @since 2.0.0\n   */\n  (self: string, marginChar: string): string\n} = dual(2, (self: string, marginChar: string): string => {\n  let out = \"\"\n\n  for (const line of linesWithSeparators(self)) {\n    let index = 0\n\n    while (index < line.length && line.charAt(index) <= \" \") {\n      index = index + 1\n    }\n\n    const stripped = index < line.length && line.charAt(index) === marginChar\n      ? line.substring(index + 1)\n      : line\n\n    out = out + stripped\n  }\n\n  return out\n})\n\n/**\n * For every line in this string, strip a leading prefix consisting of blanks\n * or control characters followed by the `\"|\"` character from the line.\n *\n * @since 2.0.0\n */\nexport const stripMargin = (self: string): string => stripMarginWith(self, \"|\")\n\n/**\n * @since 2.0.0\n */\nexport const snakeToCamel = (self: string): string => {\n  let str = self[0]\n  for (let i = 1; i < self.length; i++) {\n    str += self[i] === \"_\" ? self[++i].toUpperCase() : self[i]\n  }\n  return str\n}\n\n/**\n * @since 2.0.0\n */\nexport const snakeToPascal = (self: string): string => {\n  let str = self[0].toUpperCase()\n  for (let i = 1; i < self.length; i++) {\n    str += self[i] === \"_\" ? self[++i].toUpperCase() : self[i]\n  }\n  return str\n}\n\n/**\n * @since 2.0.0\n */\nexport const snakeToKebab = (self: string): string => self.replace(/_/g, \"-\")\n\n/**\n * @since 2.0.0\n */\nexport const camelToSnake = (self: string): string => self.replace(/([A-Z])/g, \"_$1\").toLowerCase()\n\n/**\n * @since 2.0.0\n */\nexport const pascalToSnake = (self: string): string =>\n  (self.slice(0, 1) + self.slice(1).replace(/([A-Z])/g, \"_$1\")).toLowerCase()\n\n/**\n * @since 2.0.0\n */\nexport const kebabToSnake = (self: string): string => self.replace(/-/g, \"_\")\n\nclass LinesIterator implements IterableIterator<string> {\n  private index: number\n  private readonly length: number\n\n  constructor(readonly s: string, readonly stripped: boolean = false) {\n    this.index = 0\n    this.length = s.length\n  }\n\n  next(): IteratorResult<string> {\n    if (this.done) {\n      return { done: true, value: undefined }\n    }\n    const start = this.index\n    while (!this.done && !isLineBreak(this.s[this.index]!)) {\n      this.index = this.index + 1\n    }\n    let end = this.index\n    if (!this.done) {\n      const char = this.s[this.index]!\n      this.index = this.index + 1\n      if (!this.done && isLineBreak2(char, this.s[this.index]!)) {\n        this.index = this.index + 1\n      }\n      if (!this.stripped) {\n        end = this.index\n      }\n    }\n    return { done: false, value: this.s.substring(start, end) }\n  }\n\n  [Symbol.iterator](): IterableIterator<string> {\n    return new LinesIterator(this.s, this.stripped)\n  }\n\n  private get done(): boolean {\n    return this.index >= this.length\n  }\n}\n\n/**\n * Test if the provided character is a line break character (i.e. either `\"\\r\"`\n * or `\"\\n\"`).\n */\nconst isLineBreak = (char: string): boolean => {\n  const code = char.charCodeAt(0)\n  return code === CR || code === LF\n}\n\n/**\n * Test if the provided characters combine to form a carriage return/line-feed\n * (i.e. `\"\\r\\n\"`).\n */\nconst isLineBreak2 = (char0: string, char1: string): boolean => char0.charCodeAt(0) === CR && char1.charCodeAt(0) === LF\n\nconst linesSeparated = (self: string, stripped: boolean): LinesIterator => new LinesIterator(self, stripped)\n","/**\n * # Number\n *\n * This module provides utility functions and type class instances for working\n * with the `number` type in TypeScript. It includes functions for basic\n * arithmetic operations, as well as type class instances for `Equivalence` and\n * `Order`.\n *\n * ## Operations Reference\n *\n * | Category     | Operation                                  | Description                                             | Domain                         | Co-domain             |\n * | ------------ | ------------------------------------------ | ------------------------------------------------------- | ------------------------------ | --------------------- |\n * | constructors | {@link module:Number.parse}                | Safely parses a string to a number                      | `string`                       | `Option<number>`      |\n * |              |                                            |                                                         |                                |                       |\n * | math         | {@link module:Number.sum}                  | Adds two numbers                                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.sumAll}               | Sums all numbers in a collection                        | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.subtract}             | Subtracts one number from another                       | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiply}             | Multiplies two numbers                                  | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.multiplyAll}          | Multiplies all numbers in a collection                  | `Iterable<number>`             | `number`              |\n * | math         | {@link module:Number.divide}               | Safely divides handling division by zero                | `number`, `number`             | `Option<number>`      |\n * | math         | {@link module:Number.unsafeDivide}         | Divides but misbehaves for division by zero             | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.remainder}            | Calculates remainder of division                        | `number`, `number`             | `number`              |\n * | math         | {@link module:Number.increment}            | Adds 1 to a number                                      | `number`                       | `number`              |\n * | math         | {@link module:Number.decrement}            | Subtracts 1 from a number                               | `number`                       | `number`              |\n * | math         | {@link module:Number.sign}                 | Determines the sign of a number                         | `number`                       | `Ordering`            |\n * | math         | {@link module:Number.nextPow2}             | Finds the next power of 2                               | `number`                       | `number`              |\n * | math         | {@link module:Number.round}                | Rounds a number with specified precision                | `number`, `number`             | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | predicates   | {@link module:Number.between}              | Checks if a number is in a range                        | `number`, `{minimum, maximum}` | `boolean`             |\n * | predicates   | {@link module:Number.lessThan}             | Checks if one number is less than another               | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.lessThanOrEqualTo}    | Checks if one number is less than or equal              | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThan}          | Checks if one number is greater than another            | `number`, `number`             | `boolean`             |\n * | predicates   | {@link module:Number.greaterThanOrEqualTo} | Checks if one number is greater or equal                | `number`, `number`             | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | guards       | {@link module:Number.isNumber}             | Type guard for JavaScript numbers                       | `unknown`                      | `boolean`             |\n * |              |                                            |                                                         |                                |                       |\n * | comparison   | {@link module:Number.min}                  | Returns the minimum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.max}                  | Returns the maximum of two numbers                      | `number`, `number`             | `number`              |\n * | comparison   | {@link module:Number.clamp}                | Restricts a number to a range                           | `number`, `{minimum, maximum}` | `number`              |\n * |              |                                            |                                                         |                                |                       |\n * | instances    | {@link module:Number.Equivalence}          | Equivalence instance for numbers                        |                                | `Equivalence<number>` |\n * | instances    | {@link module:Number.Order}                | Order instance for numbers                              |                                | `Order<number>`       |\n * |              |                                            |                                                         |                                |                       |\n * | errors       | {@link module:Number.DivisionByZeroError}  | Error thrown by unsafeDivide                            |                                |                       |\n *\n * ## Composition Patterns and Type Safety\n *\n * When building function pipelines, understanding how types flow through\n * operations is critical:\n *\n * ### Composing with type-preserving operations\n *\n * Most operations in this module are type-preserving (`number → number`),\n * making them easily composable in pipelines:\n *\n * ```ts\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.increment, // number → number\n *   Number.multiply(2), // number → number\n *   Number.round(1) // number → number\n * ) // Result: number (21)\n * ```\n *\n * ### Working with Option results\n *\n * Operations that might fail (like division by zero) return Option types and\n * require Option combinators:\n *\n * ```ts\n * import { pipe, Option } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * const result = pipe(\n *   10,\n *   Number.divide(0), // number → Option<number>\n *   Option.getOrElse(() => 0) // Option<number> → number\n * ) // Result: number (0)\n * ```\n *\n * ### Composition best practices\n *\n * - Chain type-preserving operations for maximum composability\n * - Use Option combinators when working with potentially failing operations\n * - Consider using Effect for operations that might fail with specific errors\n * - Remember that all operations maintain JavaScript's floating-point precision\n *   limitations\n *\n * @module Number\n * @since 2.0.0\n * @see {@link module:BigInt} for more similar operations on `bigint` types\n * @see {@link module:BigDecimal} for more similar operations on `BigDecimal` types\n */\n\nimport * as equivalence from \"./Equivalence.js\"\nimport { dual } from \"./Function.js\"\nimport * as option from \"./internal/option.js\"\nimport * as _Iterable from \"./Iterable.js\"\nimport type { Option } from \"./Option.js\"\nimport * as order from \"./Order.js\"\nimport type { Ordering } from \"./Ordering.js\"\nimport * as predicate from \"./Predicate.js\"\n\n/**\n * Type guard that tests if a value is a member of the set of JavaScript\n * numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category guards\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Regular numbers\n * assert.equal(Number.isNumber(2), true)\n * assert.equal(Number.isNumber(-3.14), true)\n * assert.equal(Number.isNumber(0), true)\n *\n * // Special numeric values\n * assert.equal(Number.isNumber(Infinity), true)\n * assert.equal(Number.isNumber(NaN), true)\n *\n * // Non-number values\n * assert.equal(Number.isNumber(\"2\"), false)\n * assert.equal(Number.isNumber(true), false)\n * assert.equal(Number.isNumber(null), false)\n * assert.equal(Number.isNumber(undefined), false)\n * assert.equal(Number.isNumber({}), false)\n * assert.equal(Number.isNumber([]), false)\n *\n * // Using as a type guard in conditionals\n * function processValue(value: unknown): string {\n *   if (Number.isNumber(value)) {\n *     // TypeScript now knows 'value' is a number\n *     return `Numeric value: ${value.toFixed(2)}`\n *   }\n *   return \"Not a number\"\n * }\n *\n * assert.strictEqual(processValue(42), \"Numeric value: 42.00\")\n * assert.strictEqual(processValue(\"hello\"), \"Not a number\")\n *\n * // Filtering for numbers in an array\n * const mixed = [1, \"two\", 3, false, 5]\n * const onlyNumbers = mixed.filter(Number.isNumber)\n * assert.equal(onlyNumbers, [1, 3, 5])\n * ```\n *\n * @param input - The value to test for membership in the set of JavaScript\n *   numbers\n *\n * @returns `true` if the input is a JavaScript number, `false` otherwise\n */\nexport const isNumber: (input: unknown) => input is number = predicate.isNumber\n\n/**\n * Returns the additive inverse of a number, effectively negating it.\n *\n * @memberof Number\n * @since 3.14.6\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * assert.equal(\n *   Number.negate(5), //\n *   -5\n * )\n *\n * assert.equal(\n *   Number.negate(-5), //\n *   5\n * )\n *\n * assert.equal(\n *   Number.negate(0), //\n *   0\n * )\n * ```\n *\n * @param n - The number value to be negated.\n *\n * @returns The negated number value.\n */\nexport const negate = (n: number): number => multiply(n, -1)\n\n/**\n * Performs addition in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.sum(2, 3), 5)\n * assert.equal(Number.sum(-10, 5), -5)\n * assert.equal(Number.sum(0.1, 0.2), 0.30000000000000004) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.sum(5) // 10 + 5 = 15\n *   ),\n *   15\n * )\n *\n * // Chaining multiple additions\n * assert.equal(\n *   pipe(\n *     1,\n *     Number.sum(2), // 1 + 2 = 3\n *     Number.sum(3), // 3 + 3 = 6\n *     Number.sum(4) // 6 + 4 = 10\n *   ),\n *   10\n * )\n *\n * // Identity property: a + 0 = a\n * assert.equal(Number.sum(42, 0), 42)\n *\n * // Commutative property: a + b = b + a\n * assert.equal(Number.sum(5, 3), Number.sum(3, 5))\n * ```\n */\nexport const sum: {\n  /**\n   * Returns a function that adds a specified number to its argument.\n   *\n   * @param that - The number to add to the input of the resulting function\n   *\n   * @returns A function that takes a number and returns the sum of that number\n   *   and `that`\n   */\n  (that: number): (self: number) => number\n\n  /**\n   * Adds two numbers together.\n   *\n   * @param self - The first addend\n   * @param that - The second addend\n   *\n   * @returns The sum of the two numbers\n   */\n  (self: number, that: number): number\n} = dual(2, (self: number, that: number): number => self + that)\n\n/**\n * Computes the sum of all elements in an iterable collection of numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Basic sums\n * assert.equal(Number.sumAll([2, 3, 4]), 9) // 2 + 3 + 4 = 9\n * assert.equal(Number.sumAll([1.1, 2.2, 3.3]), 6.6) // 1.1 + 2.2 + 3.3 = 6.6\n *\n * // Empty collection returns the additive identity (0)\n * assert.equal(Number.sumAll([]), 0)\n *\n * // Single element collection\n * assert.equal(Number.sumAll([42]), 42)\n *\n * // Sums with negative numbers\n * assert.equal(Number.sumAll([2, -3, 4]), 3) // 2 + (-3) + 4 = 3\n * assert.equal(Number.sumAll([-2, -3, -4]), -9) // (-2) + (-3) + (-4) = -9\n *\n * // Works with any iterable\n * assert.equal(Number.sumAll(new Set([2, 3, 4])), 9)\n *\n * // Using with generated sequences\n * function* range(start: number, end: number) {\n *   for (let i = start; i <= end; i++) yield i\n * }\n *\n * // Compute sum of first 5 natural numbers: 1 + 2 + 3 + 4 + 5 = 15\n * assert.equal(Number.sumAll(range(1, 5)), 15)\n *\n * // Floating point precision example\n * assert.equal(\n *   Number.sumAll([0.1, 0.2]),\n *   0.30000000000000004 // Note IEEE 754 precision limitation\n * )\n * ```\n *\n * @param collection - An `iterable` containing the `numbers` to sum\n *\n * @returns The sum of all numbers in the collection, or 0 if the collection is\n *   empty\n */\nexport const sumAll = (collection: Iterable<number>): number => _Iterable.reduce(collection, 0, sum)\n\n/**\n * Performs subtraction in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.subtract(2, 3), -1) // 2 - 3 = -1\n * assert.equal(Number.subtract(10, 5), 5) // 10 - 5 = 5\n * assert.equal(Number.subtract(0.3, 0.1), 0.19999999999999998) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.subtract(5) // 10 - 5 = 5\n *   ),\n *   5\n * )\n *\n * // Chaining multiple subtractions\n * assert.equal(\n *   pipe(\n *     20,\n *     Number.subtract(5), // 20 - 5 = 15\n *     Number.subtract(3), // 15 - 3 = 12\n *     Number.subtract(2) // 12 - 2 = 10\n *   ),\n *   10\n * )\n *\n * // Right identity property: a - 0 = a\n * assert.equal(Number.subtract(42, 0), 42)\n *\n * // Self-annihilation property: a - a = 0\n * assert.equal(Number.subtract(42, 42), 0)\n *\n * // Non-commutative property: a - b ≠ b - a\n * assert.equal(Number.subtract(5, 3), 2) // 5 - 3 = 2\n * assert.equal(Number.subtract(3, 5), -2) // 3 - 5 = -2\n *\n * // Inverse relation: a - b = -(b - a)\n * assert.equal(Number.subtract(5, 3), -Number.subtract(3, 5))\n * ```\n */\nexport const subtract: {\n  /**\n   * Returns a function that subtracts a specified number from its argument.\n   *\n   * @param subtrahend - The number to subtract from the input of the resulting\n   *   function\n   *\n   * @returns A function that takes a minuend and returns the difference of\n   *   subtracting the subtrahend from it\n   */\n  (subtrahend: number): (minuend: number) => number\n\n  /**\n   * Subtracts the subtrahend from the minuend and returns the difference.\n   *\n   * @param minuend - The number from which another number is to be subtracted\n   * @param subtrahend - The number to subtract from the minuend\n   *\n   * @returns The difference of the minuend minus the subtrahend\n   */\n  (minuend: number, subtrahend: number): number\n} = dual(\n  2,\n  (minuend: number, subtrahend: number): number => minuend - subtrahend\n)\n\n/**\n * Performs **multiplication** in the set of JavaScript numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.multiply(2, 3), 6) // 2 × 3 = 6\n * assert.equal(Number.multiply(-4, 5), -20) // (-4) × 5 = -20\n * assert.equal(Number.multiply(-3, -2), 6) // (-3) × (-2) = 6\n * assert.equal(Number.multiply(0.1, 0.2), 0.020000000000000004) // Note: floating-point precision limitation\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.multiply(5) // 10 × 5 = 50\n *   ),\n *   50\n * )\n *\n * // Chaining multiple multiplications\n * assert.equal(\n *   pipe(\n *     2,\n *     Number.multiply(3), // 2 × 3 = 6\n *     Number.multiply(4), // 6 × 4 = 24\n *     Number.multiply(0.5) // 24 × 0.5 = 12\n *   ),\n *   12\n * )\n *\n * // Identity property: a × 1 = a\n * assert.equal(Number.multiply(42, 1), 42)\n *\n * // Zero property: a × 0 = 0\n * assert.equal(Number.multiply(42, 0), 0)\n *\n * // Commutative property: a × b = b × a\n * assert.equal(Number.multiply(5, 3), Number.multiply(3, 5))\n *\n * // Associative property: (a × b) × c = a × (b × c)\n * const a = 2,\n *   b = 3,\n *   c = 4\n * assert.equal(\n *   Number.multiply(Number.multiply(a, b), c),\n *   Number.multiply(a, Number.multiply(b, c))\n * )\n * ```\n */\nexport const multiply: {\n  /**\n   * Returns a function that multiplies a specified number with its argument.\n   *\n   * @param multiplicand - The number to multiply with the input of the\n   *   resulting function\n   *\n   * @returns A function that takes a multiplier and returns the product of that\n   *   multiplier and the multiplicand\n   */\n  (multiplicand: number): (multiplier: number) => number\n\n  /**\n   * Multiplies two numbers together.\n   *\n   * @param multiplier - The first factor\n   * @param multiplicand - The second factor\n   *\n   * @returns The product of the two numbers\n   */\n  (multiplier: number, multiplicand: number): number\n} = dual(\n  2,\n  (multiplier: number, multiplicand: number): number => multiplier * multiplicand\n)\n\n/**\n * Computes the product of all elements in an iterable collection of numbers.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import * as Number from \"effect/Number\"\n *\n * // Basic products\n * assert.equal(Number.multiplyAll([2, 3, 4]), 24) // 2 × 3 × 4 = 24\n * assert.equal(Number.multiplyAll([1.5, 2, 3]), 9) // 1.5 × 2 × 3 = 9\n *\n * // Empty collection returns the multiplicative identity (1)\n * assert.equal(Number.multiplyAll([]), 1)\n *\n * // Single element collection\n * assert.equal(Number.multiplyAll([42]), 42)\n *\n * // Products with negative numbers\n * assert.equal(Number.multiplyAll([2, -3, 4]), -24) // 2 × (-3) × 4 = -24\n * assert.equal(Number.multiplyAll([-2, -3]), 6) // (-2) × (-3) = 6\n *\n * // Zero property - if any element is zero, product is zero\n * assert.equal(Number.multiplyAll([2, 0, 3]), 0)\n *\n * // Works with any iterable\n * assert.equal(Number.multiplyAll(new Set([2, 3, 4])), 24)\n *\n * // Using with generated sequences\n * function* range(start: number, end: number) {\n *   for (let i = start; i <= end; i++) yield i\n * }\n *\n * // Compute factorial: 5! = 5 × 4 × 3 × 2 × 1 = 120\n * assert.equal(Number.multiplyAll(range(1, 5)), 120)\n * ```\n *\n * @param collection - An `iterable` containing the `numbers` to multiply\n *\n * @returns The product of all numbers in the collection, or 1 if the collection\n *   is empty\n */\nexport const multiplyAll = (collection: Iterable<number>): number => {\n  let out = 1\n  for (const n of collection) {\n    if (n === 0) {\n      return 0\n    }\n    out *= n\n  }\n  return out\n}\n\n/**\n * Performs division in the set of JavaScript numbers, returning the result\n * wrapped in an `Option` to handle division by zero.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe, Option } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.divide(6, 3), Option.some(2)) // 6 ÷ 3 = 2\n * assert.equal(Number.divide(-8, 4), Option.some(-2)) // (-8) ÷ 4 = -2\n * assert.equal(Number.divide(-10, -5), Option.some(2)) // (-10) ÷ (-5) = 2\n * assert.equal(Number.divide(1, 3), Option.some(0.3333333333333333)) // Note: floating-point approximation\n *\n * // Handling division by zero\n * assert.equal(Number.divide(6, 0), Option.none()) // 6 ÷ 0 is undefined\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.divide(2) // 10 ÷ 2 = 5\n *   ),\n *   Option.some(5)\n * )\n *\n * // Chaining multiple divisions using Option combinators\n * assert.equal(\n *   pipe(\n *     Option.some(24),\n *     Option.flatMap((n) => Number.divide(n, 2)), // 24 ÷ 2 = 12\n *     Option.flatMap(Number.divide(3)), // 12 ÷ 3 = 4\n *     Option.flatMap(Number.divide(2)) // 4 ÷ 2 = 2\n *   ),\n *   Option.some(2)\n * )\n *\n * // Division-by-one property: a ÷ 1 = a\n * assert.equal(Number.divide(42, 1), Option.some(42))\n *\n * // Self-division property: a ÷ a = 1 (for a ≠ 0)\n * assert.equal(Number.divide(42, 42), Option.some(1))\n *\n * // Non-commutative property: a ÷ b ≠ b ÷ a\n * assert.notDeepStrictEqual(\n *   Number.divide(6, 3), // 6 ÷ 3 = 2\n *   Number.divide(3, 6) // 3 ÷ 6 = 0.5\n * )\n * ```\n */\nexport const divide: {\n  /**\n   * Returns a function that divides its input by a specified divisor.\n   *\n   * @param divisor - The number to divide by\n   *\n   * @returns A function that takes a dividend and returns the quotient wrapped\n   *   in an Option (Option.none() if divisor is 0)\n   */\n  (divisor: number): (dividend: number) => Option<number>\n\n  /**\n   * Divides the dividend by the divisor and returns the quotient wrapped in an\n   * Option.\n   *\n   * @param dividend - The number to be divided\n   * @param divisor - The number to divide by\n   *\n   * @returns Some(quotient) if the divisor is not 0, None otherwise\n   */\n  (dividend: number, divisor: number): Option<number>\n} = dual(2, (dividend: number, divisor: number) => divisor === 0 ? option.none : option.some(dividend / divisor))\n\n/**\n * Performs division in the set of JavaScript numbers, but misbehaves for\n * division by zero.\n *\n * Unlike {@link module:Number.divide} which returns an Option, this function\n * directly returns a number or `Infinity` or `NaN`.\n *\n * - If the `divisor` is zero, it returns `Infinity`.\n * - If both the `dividend` and the `divisor` are zero, then it returns `NaN`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { pipe } from \"effect\"\n * import * as Number from \"effect/Number\"\n *\n * // Data-first style (direct application)\n * assert.equal(Number.unsafeDivide(6, 3), 2) // 6 ÷ 3 = 2\n * assert.equal(Number.unsafeDivide(-8, 4), -2) // (-8) ÷ 4 = -2\n * assert.equal(Number.unsafeDivide(-10, -5), 2) // (-10) ÷ (-5) = 2\n * assert.equal(Number.unsafeDivide(1, 3), 0.3333333333333333)\n *\n * // Data-last style (pipeable)\n * assert.equal(\n *   pipe(\n *     10,\n *     Number.unsafeDivide(2) // 10 ÷ 2 = 5\n *   ),\n *   5\n * )\n *\n * // Chaining multiple divisions\n * assert.equal(\n *   pipe(\n *     24,\n *     Number.unsafeDivide(2), // 24 ÷ 2 = 12\n *     Number.unsafeDivide(3), // 12 ÷ 3 = 4\n *     Number.unsafeDivide(2) // 4 ÷ 2 = 2\n *   ),\n *   2\n * )\n *\n * assert.equal(Number.unsafeDivide(6, 0), Infinity)\n *\n * assert.equal(Number.unsafeDivide(0, 0), NaN)\n *\n * // Compare with safe division\n * const safeResult = Number.divide(6, 3) // Option.some(2)\n * const unsafeResult = Number.unsafeDivide(6, 3) // 2 directly\n * ```\n *\n * @throws - An {@link module:Number.DivisionByZeroError} if the divisor is zero.\n * @see {@link module:Number.divide} - Safe division returning an Option\n */\nexport const unsafeDivide: {\n  /**\n   * Returns a function that divides its input by a specified divisor.\n   *\n   * @param divisor - The number to divide by\n   *\n   * @returns A function that takes a dividend and returns the quotient\n   * @throws - An {@link module:Number.DivisionByZeroError} if the divisor is\n   *   zero\n   */\n  (divisor: number): (dividend: number) => number\n\n  /**\n   * Divides the dividend by the divisor and returns the quotient.\n   *\n   * If the divisor is zero, it returns Infinity.\n   *\n   * @param dividend - The number to be divided\n   * @param divisor - The number to divide by\n   *\n   * @returns The quotient of the division\n   */\n  (dividend: number, divisor: number): number\n} = dual(2, (dividend: number, divisor: number): number => dividend / divisor)\n\n/**\n * Returns the result of adding `1` to a given number.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { increment } from \"effect/Number\"\n *\n * assert.equal(increment(2), 3)\n * ```\n */\nexport const increment = (n: number): number => sum(n, 1)\n\n/**\n * Decrements a number by `1`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { decrement } from \"effect/Number\"\n *\n * assert.equal(decrement(3), 2)\n * ```\n */\nexport const decrement = (n: number): number => subtract(n, 1)\n\n/**\n * @memberof Number\n * @since 2.0.0\n * @category instances\n */\nexport const Equivalence: equivalence.Equivalence<number> = equivalence.number\n\n/**\n * @memberof Number\n * @since 2.0.0\n * @category instances\n */\nexport const Order: order.Order<number> = order.number\n\n/**\n * Returns `true` if the first argument is less than the second, otherwise\n * `false`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { lessThan } from \"effect/Number\"\n *\n * assert.equal(lessThan(2, 3), true)\n * assert.equal(lessThan(3, 3), false)\n * assert.equal(lessThan(4, 3), false)\n * ```\n */\nexport const lessThan: {\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.equal(lessThan(2, 3), true)\n   * assert.equal(lessThan(3, 3), false)\n   * assert.equal(lessThan(4, 3), false)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is less than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThan } from \"effect/Number\"\n   *\n   * assert.equal(lessThan(2, 3), true)\n   * assert.equal(lessThan(3, 3), false)\n   * assert.equal(lessThan(4, 3), false)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.lessThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is less than or equal to\n * the provided one.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { lessThanOrEqualTo } from \"effect/Number\"\n *\n * assert.equal(lessThanOrEqualTo(2, 3), true)\n * assert.equal(lessThanOrEqualTo(3, 3), true)\n * assert.equal(lessThanOrEqualTo(4, 3), false)\n * ```\n */\nexport const lessThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to\n   * the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(lessThanOrEqualTo(2, 3), true)\n   * assert.equal(lessThanOrEqualTo(3, 3), true)\n   * assert.equal(lessThanOrEqualTo(4, 3), false)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is less than or equal to\n   * the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { lessThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(lessThanOrEqualTo(2, 3), true)\n   * assert.equal(lessThanOrEqualTo(3, 3), true)\n   * assert.equal(lessThanOrEqualTo(4, 3), false)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.lessThanOrEqualTo(Order)\n\n/**\n * Returns `true` if the first argument is greater than the second, otherwise\n * `false`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { greaterThan } from \"effect/Number\"\n *\n * assert.equal(greaterThan(2, 3), false)\n * assert.equal(greaterThan(3, 3), false)\n * assert.equal(greaterThan(4, 3), true)\n * ```\n */\nexport const greaterThan: {\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.equal(greaterThan(2, 3), false)\n   * assert.equal(greaterThan(3, 3), false)\n   * assert.equal(greaterThan(4, 3), true)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns `true` if the first argument is greater than the second, otherwise\n   * `false`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThan } from \"effect/Number\"\n   *\n   * assert.equal(greaterThan(2, 3), false)\n   * assert.equal(greaterThan(3, 3), false)\n   * assert.equal(greaterThan(4, 3), true)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.greaterThan(Order)\n\n/**\n * Returns a function that checks if a given `number` is greater than or equal\n * to the provided one.\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { greaterThanOrEqualTo } from \"effect/Number\"\n *\n * assert.equal(greaterThanOrEqualTo(2, 3), false)\n * assert.equal(greaterThanOrEqualTo(3, 3), true)\n * assert.equal(greaterThanOrEqualTo(4, 3), true)\n * ```\n */\nexport const greaterThanOrEqualTo: {\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal\n   * to the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(greaterThanOrEqualTo(2, 3), false)\n   * assert.equal(greaterThanOrEqualTo(3, 3), true)\n   * assert.equal(greaterThanOrEqualTo(4, 3), true)\n   * ```\n   */\n  (that: number): (self: number) => boolean\n  /**\n   * Returns a function that checks if a given `number` is greater than or equal\n   * to the provided one.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { greaterThanOrEqualTo } from \"effect/Number\"\n   *\n   * assert.equal(greaterThanOrEqualTo(2, 3), false)\n   * assert.equal(greaterThanOrEqualTo(3, 3), true)\n   * assert.equal(greaterThanOrEqualTo(4, 3), true)\n   * ```\n   */\n  (self: number, that: number): boolean\n} = order.greaterThanOrEqualTo(Order)\n\n/**\n * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n *\n * @memberof Number\n * @since 2.0.0\n * @category predicates\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { Number } from \"effect\"\n *\n * const between = Number.between({ minimum: 0, maximum: 5 })\n *\n * assert.equal(between(3), true)\n * assert.equal(between(-1), false)\n * assert.equal(between(6), false)\n * ```\n */\nexport const between: {\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.equal(between(3), true)\n   * assert.equal(between(-1), false)\n   * assert.equal(between(6), false)\n   * ```\n   */\n  (options: { minimum: number; maximum: number }): (self: number) => boolean\n  /**\n   * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category predicates\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const between = Number.between({ minimum: 0, maximum: 5 })\n   *\n   * assert.equal(between(3), true)\n   * assert.equal(between(-1), false)\n   * assert.equal(between(6), false)\n   * ```\n   */\n  (\n   self: number,\n   options: {\n     minimum: number\n     maximum: number\n   }\n  ): boolean\n} = order.between(Order)\n\n/**\n * Restricts the given `number` to be within the range specified by the\n * `minimum` and `maximum` values.\n *\n * - If the `number` is less than the `minimum` value, the function returns the\n *   `minimum` value.\n * - If the `number` is greater than the `maximum` value, the function returns the\n *   `maximum` value.\n * - Otherwise, it returns the original `number`.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { Number } from \"effect\"\n *\n * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n * ```\n */\nexport const clamp: {\n  /**\n   * Restricts the given `number` to be within the range specified by the\n   * `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the\n   *   `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the\n   *   `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   * ```\n   */\n  (options: { minimum: number; maximum: number }): (self: number) => number\n  /**\n   * Restricts the given `number` to be within the range specified by the\n   * `minimum` and `maximum` values.\n   *\n   * - If the `number` is less than the `minimum` value, the function returns the\n   *   `minimum` value.\n   * - If the `number` is greater than the `maximum` value, the function returns the\n   *   `maximum` value.\n   * - Otherwise, it returns the original `number`.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { Number } from \"effect\"\n   *\n   * const clamp = Number.clamp({ minimum: 1, maximum: 5 })\n   *\n   * assert.equal(clamp(3), 3)\n   * assert.equal(clamp(0), 1)\n   * assert.equal(clamp(6), 5)\n   * ```\n   */\n  (\n   self: number,\n   options: {\n     minimum: number\n     maximum: number\n   }\n  ): number\n} = order.clamp(Order)\n\n/**\n * Returns the minimum between two `number`s.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { min } from \"effect/Number\"\n *\n * assert.equal(min(2, 3), 2)\n * ```\n */\nexport const min: {\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { min } from \"effect/Number\"\n   *\n   * assert.equal(min(2, 3), 2)\n   * ```\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the minimum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { min } from \"effect/Number\"\n   *\n   * assert.equal(min(2, 3), 2)\n   * ```\n   */\n  (self: number, that: number): number\n} = order.min(Order)\n\n/**\n * Returns the maximum between two `number`s.\n *\n * @memberof Number\n * @since 2.0.0\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { max } from \"effect/Number\"\n *\n * assert.equal(max(2, 3), 3)\n * ```\n */\nexport const max: {\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { max } from \"effect/Number\"\n   *\n   * assert.equal(max(2, 3), 3)\n   * ```\n   */\n  (that: number): (self: number) => number\n  /**\n   * Returns the maximum between two `number`s.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { max } from \"effect/Number\"\n   *\n   * assert.equal(max(2, 3), 3)\n   * ```\n   */\n  (self: number, that: number): number\n} = order.max(Order)\n\n/**\n * Determines the sign of a given `number`.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { sign } from \"effect/Number\"\n *\n * assert.equal(sign(-5), -1)\n * assert.equal(sign(0), 0)\n * assert.equal(sign(5), 1)\n * ```\n */\nexport const sign = (n: number): Ordering => Order(n, 0)\n\n/**\n * Returns the remainder left over when one operand is divided by a second\n * operand.\n *\n * It always takes the sign of the dividend.\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { remainder } from \"effect/Number\"\n *\n * assert.equal(remainder(2, 2), 0)\n * assert.equal(remainder(3, 2), 1)\n * assert.equal(remainder(-4, 2), -0)\n * ```\n */\nexport const remainder: {\n  /**\n   * Returns the remainder left over when one operand is divided by a second\n   * operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.equal(remainder(2, 2), 0)\n   * assert.equal(remainder(3, 2), 1)\n   * assert.equal(remainder(-4, 2), -0)\n   * ```\n   */\n  (divisor: number): (dividend: number) => number\n  /**\n   * Returns the remainder left over when one operand is divided by a second\n   * operand.\n   *\n   * It always takes the sign of the dividend.\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { remainder } from \"effect/Number\"\n   *\n   * assert.equal(remainder(2, 2), 0)\n   * assert.equal(remainder(3, 2), 1)\n   * assert.equal(remainder(-4, 2), -0)\n   * ```\n   */\n  (dividend: number, divisor: number): number\n} = dual(2, (dividend: number, divisor: number): number => {\n  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\n  const selfDecCount = (dividend.toString().split(\".\")[1] || \"\").length\n  const divisorDecCount = (divisor.toString().split(\".\")[1] || \"\").length\n  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount\n  const selfInt = parseInt(dividend.toFixed(decCount).replace(\".\", \"\"))\n  const divisorInt = parseInt(divisor.toFixed(decCount).replace(\".\", \"\"))\n  return (selfInt % divisorInt) / Math.pow(10, decCount)\n})\n\n/**\n * Returns the next power of 2 greater than or equal to the given number.\n *\n * - For `positive` inputs, returns the smallest power of 2 that is >= the input\n * - For `zero`, returns 2\n * - For `negative` inputs, returns NaN (as logarithms of negative numbers are\n *   undefined)\n * - For `NaN` input, returns NaN\n * - For `Infinity`, returns Infinity\n *\n * @memberof Number\n * @since 2.0.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { nextPow2 } from \"effect/Number\"\n *\n * assert.equal(nextPow2(5), 8)\n * assert.equal(nextPow2(17), 32)\n * assert.equal(nextPow2(0), 2)\n * assert.equal(Number.isNaN(nextPow2(-1)), true) // Negative inputs result in NaN\n * ```\n */\nexport const nextPow2 = (n: number): number => {\n  const nextPow = Math.ceil(Math.log(n) / Math.log(2))\n  return Math.max(Math.pow(2, nextPow), 2)\n}\n\n/**\n * Tries to parse a `number` from a `string` using the `Number()` function. The\n * following special string values are supported: \"NaN\", \"Infinity\",\n * \"-Infinity\".\n *\n * @memberof Number\n * @since 2.0.0\n * @category constructors\n */\nexport const parse: {\n  /**\n   * Tries to parse a `number` from a `string` using the `Number()` function. The\n   * following special string values are supported: \"NaN\", \"Infinity\",\n   * \"-Infinity\".\n   *\n   * @memberof Number\n   * @since 2.0.0\n   * @category constructors\n   */\n  (s: string): Option<number>\n} = (s) => {\n  if (s === \"NaN\") {\n    return option.some(NaN)\n  }\n  if (s === \"Infinity\") {\n    return option.some(Infinity)\n  }\n  if (s === \"-Infinity\") {\n    return option.some(-Infinity)\n  }\n  if (s.trim() === \"\") {\n    return option.none\n  }\n  const n = Number(s)\n  return Number.isNaN(n) ? option.none : option.some(n)\n}\n\n/**\n * Returns the number rounded with the given precision.\n *\n * @memberof Number\n * @since 3.8.0\n * @category math\n * @example\n *\n * ```ts\n * import * as assert from \"node:assert/strict\"\n * import { round } from \"effect/Number\"\n *\n * assert.equal(round(1.1234, 2), 1.12)\n * assert.equal(round(1.567, 2), 1.57)\n * ```\n */\nexport const round: {\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @memberof Number\n   * @since 3.8.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { round } from \"effect/Number\"\n   *\n   * assert.equal(round(1.1234, 2), 1.12)\n   * assert.equal(round(1.567, 2), 1.57)\n   * ```\n   */\n  (precision: number): (self: number) => number\n  /**\n   * Returns the number rounded with the given precision.\n   *\n   * @memberof Number\n   * @since 3.8.0\n   * @category math\n   * @example\n   *\n   * ```ts\n   * import * as assert from \"node:assert/strict\"\n   * import { round } from \"effect/Number\"\n   *\n   * assert.equal(round(1.1234, 2), 1.12)\n   * assert.equal(round(1.567, 2), 1.57)\n   * ```\n   */\n  (self: number, precision: number): number\n} = dual(2, (self: number, precision: number): number => {\n  const factor = Math.pow(10, precision)\n  return Math.round(self * factor) / factor\n})\n","/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport * as Either from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport * as Equivalence from \"./Equivalence.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as internalArray from \"./internal/array.js\"\nimport * as internalDoNotation from \"./internal/doNotation.js\"\nimport * as moduleIterable from \"./Iterable.js\"\nimport * as Option from \"./Option.js\"\nimport * as Order from \"./Order.js\"\nimport * as Predicate from \"./Predicate.js\"\nimport * as Record from \"./Record.js\"\nimport * as Tuple from \"./Tuple.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyArrayTypeLambda extends TypeLambda {\n  readonly type: ReadonlyArray<this[\"Target\"]>\n}\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyReadonlyArray<A> = readonly [A, ...Array<A>]\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type NonEmptyArray<A> = [A, ...Array<A>]\n\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = <Elements extends NonEmptyArray<any>>(\n  ...elements: Elements\n): NonEmptyArray<Elements[number]> => elements\n\n/**\n * Creates a new `Array` of the specified length.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * console.log(result) // [ <3 empty items> ]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = <A = never>(n: number): Array<A | undefined> => new Array(n)\n\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { makeBy } from \"effect/Array\"\n *\n * const result = makeBy(5, n => n * 2)\n * console.log(result) // [0, 2, 4, 6, 8]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy: {\n  /**\n   * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { makeBy } from \"effect/Array\"\n   *\n   * const result = makeBy(5, n => n * 2)\n   * console.log(result) // [0, 2, 4, 6, 8]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(f: (i: number) => A): (n: number) => NonEmptyArray<A>\n  /**\n   * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { makeBy } from \"effect/Array\"\n   *\n   * const result = makeBy(5, n => n * 2)\n   * console.log(result) // [0, 2, 4, 6, 8]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(n: number, f: (i: number) => A): NonEmptyArray<A>\n} = dual(2, <A>(n: number, f: (i: number) => A) => {\n  const max = Math.max(1, Math.floor(n))\n  const out = new Array(max)\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i)\n  }\n  return out as NonEmptyArray<A>\n})\n\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * **Example**\n *\n * ```ts\n * import { range } from \"effect/Array\"\n *\n * const result = range(1, 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start: number, end: number): NonEmptyArray<number> =>\n  start <= end ? makeBy(end - start + 1, (i) => start + i) : [start]\n\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replicate(\"a\", 3)\n * console.log(result) // [\"a\", \"a\", \"a\"]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate: {\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replicate(\"a\", 3)\n   * console.log(result) // [\"a\", \"a\", \"a\"]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  (n: number): <A>(a: A) => NonEmptyArray<A>\n  /**\n   * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n   *\n   * **Note**. `n` is normalized to an integer >= 1.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replicate(\"a\", 3)\n   * console.log(result) // [\"a\", \"a\", \"a\"]\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A>(a: A, n: number): NonEmptyArray<A>\n} = dual(2, <A>(a: A, n: number): NonEmptyArray<A> => makeBy(n, () => a))\n\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromIterable(new Set([1, 2, 3]))\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = <A>(collection: Iterable<A>): Array<A> =>\n  Array.isArray(collection) ? collection : Array.from(collection)\n\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.ensure(\"a\")) // [\"a\"]\n * console.log(Array.ensure([\"a\"])) // [\"a\"]\n * console.log(Array.ensure([\"a\", \"b\", \"c\"])) // [\"a\", \"b\", \"c\"]\n * ```\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = <A>(self: ReadonlyArray<A> | A): Array<A> => Array.isArray(self) ? self : [self as A]\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.fromRecord({ a: 1, b: 2, c: 3 })\n * console.log(result) // [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord: <K extends string, A>(self: Readonly<Record<K, A>>) => Array<[K, A]> = Record.toEntries\n\n/**\n * Converts an `Option` to an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * console.log(Array.fromOption(Option.some(1))) // [1]\n * console.log(Array.fromOption(Option.none())) // []\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption: <A>(self: Option.Option<A>) => Array<A> = Option.toArray\n\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(match([])) // \"empty\"\n * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match: {\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(match([])) // \"empty\"\n   * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const match = Array.match({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(match([])) // \"empty\"\n   * console.log(match([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (self: NonEmptyReadonlyArray<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())\n\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * console.log(matchLeft([])) // \"empty\"\n * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft: {\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(matchLeft([])) // \"empty\"\n   * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchLeft = Array.matchLeft({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n   * })\n   * console.log(matchLeft([])) // \"empty\"\n   * console.log(matchLeft([1, 2, 3])) // \"head: 1, tail: 2\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (head: A, tail: Array<A>) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (head: A, tail: Array<A>) => C\n  }\n): B | C => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())\n\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * console.log(matchRight([])) // \"empty\"\n * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n * ```\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight: {\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * console.log(matchRight([])) // \"empty\"\n   * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <B, A, C = B>(\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): (self: ReadonlyArray<A>) => B | C\n  /**\n   * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const matchRight = Array.matchRight({\n   *   onEmpty: () => \"empty\",\n   *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n   * })\n   * console.log(matchRight([])) // \"empty\"\n   * console.log(matchRight([1, 2, 3])) // \"init: 2, last: 3\"\n   * ```\n   *\n   * @category pattern matching\n   * @since 2.0.0\n   */\n  <A, B, C = B>(\n    self: ReadonlyArray<A>,\n    options: {\n      readonly onEmpty: LazyArg<B>\n      readonly onNonEmpty: (init: Array<A>, last: A) => C\n    }\n  ): B | C\n} = dual(2, <A, B, C = B>(\n  self: ReadonlyArray<A>,\n  { onEmpty, onNonEmpty }: {\n    readonly onEmpty: LazyArg<B>\n    readonly onNonEmpty: (init: Array<A>, last: A) => C\n  }\n): B | C =>\n  isNonEmptyReadonlyArray(self) ?\n    onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) :\n    onEmpty())\n\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prepend([2, 3, 4], 1)\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend: {\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prepend([2, 3, 4], 1)\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(head: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prepend([2, 3, 4], 1)\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, head: B): NonEmptyArray<A | B> => [head, ...self])\n\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.prependAll([2, 3], [0, 1])\n * console.log(result) // [0, 1, 2, 3]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll: {\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(that: T): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.prependAll([2, 3], [0, 1])\n   * console.log(result) // [0, 1, 2, 3]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(that).concat(fromIterable(self))\n)\n\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.append([1, 2, 3], 4);\n * console.log(result) // [1, 2, 3, 4]\n * ```\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append: {\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.append([1, 2, 3], 4);\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <B>(last: B): <A>(self: Iterable<A>) => NonEmptyArray<A | B>\n  /**\n   * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.append([1, 2, 3], 4);\n   * console.log(result) // [1, 2, 3, 4]\n   * ```\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, last: B): NonEmptyArray<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, last: B): Array<A | B> => [...self, last])\n\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll: {\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(that: T): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: Iterable<B>): NonEmptyArray<A | B>\n  /**\n   * Concatenates two arrays (or iterables), combining their elements.\n   * If either array is non-empty, the result is also a non-empty array.\n   *\n   * @category concatenating\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).concat(fromIterable(that))\n)\n\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [0, 1, 3, 6, 10]\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan: {\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [0, 1, 3, 6, 10]\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the left, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scan([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [0, 1, 3, 6, 10]\n   *\n   * // Explanation:\n   * // This function starts with the initial value (0 in this case)\n   * // and adds each element of the array to this accumulator one by one,\n   * // keeping track of the cumulative sum after each addition.\n   * // Each of these sums is captured in the resulting array.\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const out: NonEmptyArray<B> = [b]\n  let i = 0\n  for (const a of self) {\n    out[i + 1] = f(out[i], a)\n    i++\n  }\n  return out\n})\n\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n * console.log(result) // [10, 9, 7, 4, 0]\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight: {\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [10, 9, 7, 4, 0]\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A) => B): (self: Iterable<A>) => NonEmptyArray<B>\n  /**\n   * Accumulates values from an `Iterable` starting from the right, storing\n   * each intermediate result in an array. Useful for tracking the progression of\n   * a value through a series of transformations.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\";\n   *\n   * const result = Array.scanRight([1, 2, 3, 4], 0, (acc, value) => acc + value)\n   * console.log(result) // [10, 9, 7, 4, 0]\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B>\n} = dual(3, <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A) => B): NonEmptyArray<B> => {\n  const input = fromIterable(self)\n  const out: NonEmptyArray<B> = new Array(input.length + 1) as any\n  out[input.length] = b\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i])\n  }\n  return out\n})\n\n/**\n * Determine if `unknown` is an Array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isArray(null)) // false\n * console.log(Array.isArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray: {\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * console.log(Array.isArray(null)) // false\n   * console.log(Array.isArray([1, 2, 3])) // true\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  (self: unknown): self is Array<unknown>\n  /**\n   * Determine if `unknown` is an Array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * console.log(Array.isArray(null)) // false\n   * console.log(Array.isArray([1, 2, 3])) // true\n   * ```\n   *\n   * @category guards\n   * @since 2.0.0\n   */\n  <T>(self: T): self is Extract<T, ReadonlyArray<any>>\n} = Array.isArray\n\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyArray([])) // true\n * console.log(Array.isEmptyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = <A>(self: Array<A>): self is [] => self.length === 0\n\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isEmptyReadonlyArray([])) // true\n * console.log(Array.isEmptyReadonlyArray([1, 2, 3])) // false\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is readonly [] = isEmptyArray as any\n\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyArray([])) // false\n * console.log(Array.isNonEmptyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray: <A>(self: Array<A>) => self is NonEmptyArray<A> = internalArray.isNonEmptyArray\n\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * console.log(Array.isNonEmptyReadonlyArray([])) // false\n * console.log(Array.isNonEmptyReadonlyArray([1, 2, 3])) // true\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray: <A>(self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A> =\n  internalArray.isNonEmptyArray\n\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = <A>(self: ReadonlyArray<A>): number => self.length\n\nconst isOutOfBounds = <A>(i: number, as: ReadonlyArray<A>): boolean => i < 0 || i >= as.length\n\nconst clamp = <A>(i: number, as: ReadonlyArray<A>): number => Math.floor(Math.min(Math.max(0, i), as.length))\n\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => Option.Option<A>\n  /**\n   * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, index: number): Option.Option<A>\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): Option.Option<A> => {\n  const i = Math.floor(index)\n  return isOutOfBounds(i, self) ? Option.none() : Option.some(self[i])\n})\n\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet: {\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  (index: number): <A>(self: ReadonlyArray<A>) => A\n  /**\n   * Gets an element unsafely, will throw on out of bounds.\n   *\n   * @since 2.0.0\n   * @category unsafe\n   */\n  <A>(self: ReadonlyArray<A>, index: number): A\n} = dual(2, <A>(self: ReadonlyArray<A>, index: number): A => {\n  const i = Math.floor(index)\n  if (isOutOfBounds(i, self)) {\n    throw new Error(`Index ${i} out of bounds`)\n  }\n  return self[i]\n})\n\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * console.log(result) // [1, [2, 3, 4]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [firstElement: A, remainingElements: Array<A>] => [headNonEmpty(self), tailNonEmpty(self)]\n\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * console.log(result) // [[1, 2, 3], 4]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = <A>(\n  self: NonEmptyReadonlyArray<A>\n): [arrayWithoutLastElement: Array<A>, lastElement: A] => [initNonEmpty(self), lastNonEmpty(self)]\n\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head: <A>(self: ReadonlyArray<A>) => Option.Option<A> = get(0)\n\n/**\n * Get the first element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * console.log(result) // 1\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty: <A>(self: NonEmptyReadonlyArray<A>) => A = unsafeGet(0)\n\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = <A>(self: ReadonlyArray<A>): Option.Option<A> =>\n  isNonEmptyReadonlyArray(self) ? Option.some(lastNonEmpty(self)) : Option.none()\n\n/**\n * Get the last element of a non empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * console.log(result) // 4\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): A => self[self.length - 1]\n\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = <A>(self: Iterable<A>): Option.Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? Option.some(tailNonEmpty(input)) : Option.none()\n}\n\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * console.log(result) // [2, 3, 4]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(1)\n\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = <A>(self: Iterable<A>): Option.Option<Array<A>> => {\n  const input = fromIterable(self)\n  return isNonEmptyReadonlyArray(input) ? Option.some(initNonEmpty(input)) : Option.none()\n}\n\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = <A>(self: NonEmptyReadonlyArray<A>): Array<A> => self.slice(0, -1)\n\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.take([1, 2, 3, 4, 5], 3)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take: {\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.take([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.take([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, clamp(n, input))\n})\n\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight: {\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeRight([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  const i = clamp(n, input)\n  return i === 0 ? [] : input.slice(-i)\n})\n\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n * console.log(result) // [1, 3, 2]\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile: {\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.takeWhile([1, 3, 2, 4, 1, 2], x => x < 4)\n   * console.log(result) // [1, 3, 2]\n   *\n   * // Explanation:\n   * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n   * // - The next element (`3`) is also less than `4`, so it adds `3`.\n   * // - The next element (`2`) is again less than `4`, so it adds `2`.\n   * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n  let i = 0\n  const out: Array<A> = []\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    out.push(a)\n    i++\n  }\n  return out\n})\n\nconst spanIndex = <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number => {\n  let i = 0\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break\n    }\n    i++\n  }\n  return i\n}\n\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span: {\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [init: Array<A>, rest: Array<A>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): [init: Array<B>, rest: Array<Exclude<A, B>>]\n  /**\n   * Split an `Iterable` into two parts:\n   *\n   * 1. the longest initial subarray for which all elements satisfy the specified predicate\n   * 2. the remaining elements\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [init: Array<A>, rest: Array<A>] =>\n    splitAt(self, spanIndex(self, predicate))\n)\n\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.drop([1, 2, 3, 4, 5], 2)\n * console.log(result) // [3, 4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop: {\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.drop([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.drop([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [3, 4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(clamp(n, input), input.length)\n})\n\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight: {\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n   *\n   * **Note**. `n` is normalized to a non negative integer.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropRight([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  return input.slice(0, input.length - clamp(n, input))\n})\n\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n * console.log(result) // [4, 5]\n * ```\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile: {\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n   * console.log(result) // [4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dropWhile([1, 2, 3, 4, 5], x => x < 4)\n   * console.log(result) // [4, 5]\n   * ```\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> =>\n    fromIterable(self).slice(spanIndex(self, predicate))\n)\n\n/**\n * Return the first index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n * console.log(result) // Option.some(2)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex: {\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n   * console.log(result) // Option.some(2)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<number>\n  /**\n   * Return the first index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstIndex([5, 3, 8, 9], x => x > 5)\n   * console.log(result) // Option.some(2)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number> => {\n  let i = 0\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return Option.some(i)\n    }\n    i++\n  }\n  return Option.none()\n})\n\n/**\n * Return the last index for which a predicate holds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n * console.log(result) // Option.some(1)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex: {\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n   * console.log(result) // Option.some(1)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<number>\n  /**\n   * Return the last index for which a predicate holds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLastIndex([1, 3, 8, 9], x => x < 5)\n   * console.log(result) // Option.some(1)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number>\n} = dual(2, <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<number> => {\n  const input = fromIterable(self)\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return Option.some(i)\n    }\n  }\n  return Option.none()\n})\n\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<A>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<B>\n  /**\n   * Returns the first element that satisfies the specified\n   * predicate, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirst([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<A>\n} = moduleIterable.findFirst\n\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // Option.some(4)\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast: {\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<A>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<B>\n  /**\n   * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n   * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findLast([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // Option.some(4)\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<A>\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option.Option<A>)\n  ): Option.Option<A> => {\n    const input = fromIterable(self)\n    for (let i = input.length - 1; i >= 0; i--) {\n      const a = input[i]\n      const o = f(a, i)\n      if (Predicate.isBoolean(o)) {\n        if (o) {\n          return Option.some(a)\n        }\n      } else {\n        if (Option.isSome(o)) {\n          return o\n        }\n      }\n    }\n    return Option.none()\n  }\n)\n\n/**\n * Returns a tuple of the first element that satisfies the specified\n * predicate and its index, or `None` if no such element exists.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n * console.log(result) // Option.some([4, 3])\n * ```\n *\n * @category elements\n * @since 3.17.0\n */\nexport const findFirstWithIndex: {\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B>(f: (a: NoInfer<A>, i: number) => Option.Option<B>): (self: Iterable<A>) => Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Option.Option<[A, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Option.Option<[B, number]>\n  /**\n   * Returns a tuple of the first element that satisfies the specified\n   * predicate and its index, or `None` if no such element exists.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.findFirstWithIndex([1, 2, 3, 4, 5], x => x > 3)\n   * console.log(result) // Option.some([4, 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.17.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Option.Option<[A, number]>\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: ((a: A, i: number) => boolean) | ((a: A, i: number) => Option.Option<A>)\n  ): Option.Option<[A, number]> => {\n    let i = 0\n    for (const a of self) {\n      const o = f(a, i)\n      if (Predicate.isBoolean(o)) {\n        if (o) {\n          return Option.some([a, i])\n        }\n      } else {\n        if (Option.isSome(o)) {\n          return Option.some([o.value, i])\n        }\n      }\n      i++\n    }\n    return Option.none()\n  }\n)\n\n/**\n * Counts all the element of the given array that pass the given predicate\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n * console.log(result) // 2\n * ```\n *\n * @category folding\n * @since 3.16.0\n */\nexport const countBy: {\n  /**\n   * Counts all the element of the given array that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => number\n  /**\n   * Counts all the element of the given array that pass the given predicate\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.countBy([1, 2, 3, 4, 5], n => n % 2 === 0)\n   * console.log(result) // 2\n   * ```\n   *\n   * @category folding\n   * @since 3.16.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): number\n} = dual(\n  2,\n  <A>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => boolean\n  ): number => {\n    let count = 0\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const a = as[i]\n      if (f(a, i)) {\n        count++\n      }\n    }\n    return count\n  }\n)\n\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n * ```\n *\n * @since 2.0.0\n */\nexport const insertAt: {\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n   * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A>(self: Iterable<A>) => Option.Option<NonEmptyArray<A | B>>\n  /**\n   * Insert an element at the specified index, creating a new `NonEmptyArray`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.insertAt(['a', 'b', 'c', 'e'], 3, 'd')\n   * console.log(result) // Option.some(['a', 'b', 'c', 'd', 'e'])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<NonEmptyArray<A | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<NonEmptyArray<A | B>> => {\n  const out: Array<A | B> = Array.from(self)\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return Option.none()\n  }\n  out.splice(i, 0, b)\n  return Option.some(out) as any\n})\n\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n * console.log(result) // ['a', 'z', 'c', 'd']\n * ```\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n   * console.log(result) // ['a', 'z', 'c', 'd']\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A, S extends Iterable<A> = Iterable<A>>(\n    self: S\n  ) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Change the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replace(['a', 'b', 'c', 'd'], 1, 'z')\n   * console.log(result) // ['a', 'z', 'c', 'd']\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, b: B): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, b: B): Array<A | B> => modify(self, i, () => b))\n\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.replaceOption([1, 2, 3], 1, 4)\n * console.log(result) // Option.some([1, 4, 3])\n * ```\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replaceOption([1, 2, 3], 1, 4)\n   * console.log(result) // Option.some([1, 4, 3])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(i: number, b: B): <A, S extends Iterable<A> = Iterable<A>>(\n    self: S\n  ) => Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Replaces an element in an array with the given value, returning an option of the updated array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.replaceOption([1, 2, 3], 1, 4)\n   * console.log(result) // Option.some([1, 4, 3])\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, b: B): Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, b: B): Option.Option<Array<A | B>> => modifyOption(self, i, () => b)\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n * console.log(result) // [1, 2, 6, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n   * console.log(result) // [1, 2, 6, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(i: number, f: (a: ReadonlyArray.Infer<S>) => B): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modify([1, 2, 3, 4], 2, (n) => n * 2)\n   * console.log(result) // [1, 2, 6, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, f: (a: ReadonlyArray.Infer<S>) => B): ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Array<A | B> => {\n    const out: Array<A | B> = Array.from(self)\n    if (isOutOfBounds(i, out)) {\n      return out\n    }\n    const b = f(out[i] as A)\n    out[i] = b\n    return out\n  }\n)\n\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.modifyOption(input, 2, (n) => n * 2)\n * console.log(result) // Option.some([1, 2, 6, 4])\n *\n * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n * console.log(outOfBoundsResult) // Option.none()\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.modifyOption(input, 2, (n) => n * 2)\n   * console.log(result) // Option.some([1, 2, 6, 4])\n   *\n   * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n   * console.log(outOfBoundsResult) // Option.none()\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(i: number, f: (a: ReadonlyArray.Infer<S>) => B): (self: S) => Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n  /**\n   * Apply a function to the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.modifyOption(input, 2, (n) => n * 2)\n   * console.log(result) // Option.some([1, 2, 6, 4])\n   *\n   * const outOfBoundsResult = Array.modifyOption(input, 5, (n) => n * 2)\n   * console.log(outOfBoundsResult) // Option.none()\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B, S extends Iterable<A> = Iterable<A>>(self: S, i: number, f: (a: ReadonlyArray.Infer<S>) => B): Option.Option<ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>>\n} = dual(3, <A, B>(self: Iterable<A>, i: number, f: (a: A) => B): Option.Option<Array<A | B>> => {\n  const arr = fromIterable(self)\n  if (isOutOfBounds(i, arr)) {\n    return Option.none()\n  }\n  const out: Array<A | B> = Array.isArray(self) ? self.slice() : arr\n  const b = f(arr[i])\n  out[i] = b\n  return Option.some(out)\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const input = [1, 2, 3, 4]\n * const result = Array.remove(input, 2)\n * console.log(result) // [1, 2, 4]\n *\n * const outOfBoundsResult = Array.remove(input, 5)\n * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.remove(input, 2)\n   * console.log(result) // [1, 2, 4]\n   *\n   * const outOfBoundsResult = Array.remove(input, 5)\n   * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (i: number): <A>(self: Iterable<A>) => Array<A>\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return a copy of the input if the index is out of bounds.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const input = [1, 2, 3, 4]\n   * const result = Array.remove(input, 2)\n   * console.log(result) // [1, 2, 4]\n   *\n   * const outOfBoundsResult = Array.remove(input, 5)\n   * console.log(outOfBoundsResult) // [1, 2, 3, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, i: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, i: number): Array<A> => {\n  const out = Array.from(self)\n  if (isOutOfBounds(i, out)) {\n    return out\n  }\n  out.splice(i, 1)\n  return out\n})\n\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.removeOption(numbers, 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n *\n * const outOfBoundsResult = Array.removeOption(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n * ```\n *\n * @since 3.16.0\n */\nexport const removeOption: {\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.removeOption(numbers, 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n   *\n   * const outOfBoundsResult = Array.removeOption(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   * ```\n   *\n   * @since 3.16.0\n   */\n  (i: number): <A>(self: Iterable<A>) => Option.Option<Array<A>>\n  /**\n   * Delete the element at the specified index, creating a new `Array`,\n   * or return `None` if the index is out of bounds.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array, Option } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4]\n   * const result = Array.removeOption(numbers, 2)\n   * assert.deepStrictEqual(result, Option.some([1, 2, 4]))\n   *\n   * const outOfBoundsResult = Array.removeOption(numbers, 5)\n   * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n   * ```\n   *\n   * @since 3.16.0\n   */\n  <A>(self: Iterable<A>, i: number): Option.Option<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, i: number): Option.Option<Array<A>> => {\n  const arr = fromIterable(self)\n  if (isOutOfBounds(i, arr)) {\n    return Option.none()\n  }\n  const out = Array.isArray(self) ? self.slice() : arr\n  out.splice(i, 1)\n  return Option.some(out)\n})\n\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reverse([1, 2, 3, 4])\n * console.log(result) // [4, 3, 2, 1]\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = <S extends Iterable<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  Array.from(self).reverse() as any\n\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort: {\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <B>(O: Order.Order<B>): <A extends B, S extends Iterable<A>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: NonEmptyReadonlyArray<A>, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Create a new array with elements sorted in increasing order based on the specified comparator.\n   * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n   *\n   * @category sorting\n   * @since 2.0.0\n   */\n  <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A>\n} = dual(2, <A extends B, B>(self: Iterable<A>, O: Order.Order<B>): Array<A> => {\n  const out = Array.from(self)\n  out.sort(O)\n  return out\n})\n\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith: {\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <S extends Iterable<any>, B>(f: (a: ReadonlyArray.Infer<S>) => B, order: Order.Order<B>): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B, O: Order.Order<B>): NonEmptyArray<A>\n  /**\n   * Sorts an array based on a provided mapping function and order. The mapping\n   * function transforms the elements into a value that can be compared, and the\n   * order defines how those values should be sorted.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.sortWith([\"aaa\", \"b\", \"cc\"], (s) => s.length, Order.number)\n   * console.log(result) // [\"b\", \"cc\", \"aaa\"]\n   *\n   * // Explanation:\n   * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n   * // converts each string into its length, and the `Order.number` specifies that the lengths should\n   * // be sorted in ascending order.\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A>\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, f: (a: A) => B, order: Order.Order<B>): Array<A> =>\n    Array.from(self).map((a) => [a, f(a)] as const).sort(([, a], [, b]) => order(a, b)).map(([_]) => _)\n)\n\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order, pipe } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = pipe(\n *   users,\n *   Array.sortBy(\n *     Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *     Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n *   )\n * )\n *\n * console.log(result)\n * // [\n * //   { name: \"Bob\", age: 25 },\n * //   { name: \"Alice\", age: 30 },\n * //   { name: \"Charlie\", age: 30 }\n * // ]\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n * ```\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = <S extends Iterable<any>>(\n  ...orders: ReadonlyArray<Order.Order<ReadonlyArray.Infer<S>>>\n) => {\n  const sortByAll = sort(Order.combineAll(orders))\n  return (\n    self: S\n  ): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input) as any\n    }\n    return [] as any\n  }\n}\n\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zip([1, 2, 3], ['a', 'b'])\n * console.log(result) // [[1, 'a'], [2, 'b']]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip: {\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: NonEmptyReadonlyArray<B>): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<[A, B]>\n  /**\n   * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n   * If one input `Iterable` is short, excess elements of the\n   * longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zip([1, 2, 3], ['a', 'b'])\n   * console.log(result) // [[1, 'a'], [2, 'b']]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<[A, B]> => zipWith(self, that, Tuple.make)\n)\n\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n * console.log(result) // [5, 7, 9]\n * ```\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith: {\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: NonEmptyReadonlyArray<B>, f: (a: A, b: B) => C): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(that: Iterable<B>, f: (a: A, b: B) => C): (self: Iterable<A>) => Array<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <A, B, C>(\n    self: NonEmptyReadonlyArray<A>,\n    that: NonEmptyReadonlyArray<B>,\n    f: (a: A, b: B) => C\n  ): NonEmptyArray<C>\n  /**\n   * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n   * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.zipWith([1, 2, 3], [4, 5, 6], (a, b) => a + b)\n   * console.log(result) // [5, 7, 9]\n   * ```\n   *\n   * @category zipping\n   * @since 2.0.0\n   */\n  <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(3, <B, A, C>(self: Iterable<A>, that: Iterable<B>, f: (a: A, b: B) => C): Array<C> => {\n  const as = fromIterable(self)\n  const bs = fromIterable(that)\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out: NonEmptyArray<C> = [f(headNonEmpty(as), headNonEmpty(bs))]\n    const len = Math.min(as.length, bs.length)\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * console.log(result) // [[1, 2, 3], ['a', 'b', 'c']]\n * ```\n *\n * @since 2.0.0\n */\nexport const unzip: <S extends Iterable<readonly [any, any]>>(\n  self: S\n) => S extends NonEmptyReadonlyArray<readonly [infer A, infer B]> ? [NonEmptyArray<A>, NonEmptyArray<B>]\n  : S extends Iterable<readonly [infer A, infer B]> ? [Array<A>, Array<B>]\n  : never = (<A, B>(self: Iterable<readonly [A, B]>): [Array<A>, Array<B>] => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const fa: NonEmptyArray<A> = [input[0][0]]\n      const fb: NonEmptyArray<B> = [input[0][1]]\n      for (let i = 1; i < input.length; i++) {\n        fa[i] = input[i][0]\n        fb[i] = input[i][1]\n      }\n      return [fa, fb]\n    }\n    return [[], []]\n  }) as any\n\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersperse([1, 2, 3], 0)\n * console.log(result) // [1, 0, 2, 0, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersperse: {\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(middle: B): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S> | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, middle: B): NonEmptyArray<A | B>\n  /**\n   * Places an element in between members of an `Iterable`.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersperse([1, 2, 3], 0)\n   * console.log(result) // [1, 0, 2, 0, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, middle: B): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, middle: B): Array<A | B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const out: NonEmptyArray<A | B> = [headNonEmpty(input)]\n    const tail = tailNonEmpty(input)\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle)\n      }\n      out.push(tail[i])\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead: {\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A) => B\n  ): NonEmptyArray<A | B> => [f(headNonEmpty(self)), ...tailNonEmpty(self)]\n)\n\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * console.log(result) // [10, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead: {\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the head, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n   * console.log(result) // [10, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyHead(self, () => b)\n)\n\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * console.log(result) // [1, 2, 6]\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast: {\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * console.log(result) // [1, 2, 6]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n   * console.log(result) // [1, 2, 6]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, f: (a: A) => B): NonEmptyArray<A | B> =>\n    append(initNonEmpty(self), f(lastNonEmpty(self)))\n)\n\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * console.log(result) // [1, 2, 4]\n * ```\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast: {\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * console.log(result) // [1, 2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(b: B): <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<A | B>\n  /**\n   * Change the last element, creating a new `NonEmptyReadonlyArray`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n   * console.log(result) // [1, 2, 4]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B>\n} = dual(\n  2,\n  <A, B>(self: NonEmptyReadonlyArray<A>, b: B): NonEmptyArray<A | B> => modifyNonEmptyLast(self, () => b)\n)\n\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n * ```\n *\n * @since 2.0.0\n */\nexport const rotate: {\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<A>\n  /**\n   * Rotate an `Iterable` by `n` steps.\n   * If the input is a non-empty array, the result is also a non-empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.rotate(['a', 'b', 'c', 'd', 'e'], 2)\n   * console.log(result) // [ 'd', 'e', 'a', 'b', 'c' ]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<A>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<A> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length\n    const m = Math.round(n) % len\n    if (isOutOfBounds(Math.abs(m), input) || m === 0) {\n      return copy(input)\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m)\n      return appendAll(s, f)\n    } else {\n      return rotate(self, m - len)\n    }\n  }\n  return []\n})\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = pipe([1, 2, 3, 4], containsNumber(3))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (a: A): (self: Iterable<A>) => boolean\n  (self: Iterable<A>, a: A): boolean\n} =>\n  dual(2, (self: Iterable<A>, a: A): boolean => {\n    for (const i of self) {\n      if (isEquivalent(a, i)) {\n        return true\n      }\n    }\n    return false\n  })\n\nconst _equivalence = Equal.equivalence()\n\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n * console.log(result) // true\n * ```\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains: {\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n   * console.log(result) // true\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(a: A): (self: Iterable<A>) => boolean\n  /**\n   * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const result = pipe(['a', 'b', 'c', 'd'], Array.contains('c'))\n   * console.log(result) // true\n   * ```\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, a: A): boolean\n} = containsWith(_equivalence)\n\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * console.log(result) // [2, 4, 6, 8, 10]\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n * ```\n *\n * @since 2.0.0\n */\nexport const chop: {\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, B>(\n    f: (as: NonEmptyReadonlyArray<ReadonlyArray.Infer<S>>) => readonly [B, ReadonlyArray<ReadonlyArray.Infer<S>>]\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): NonEmptyArray<B>\n  /**\n   * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n   * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n   * value and the rest of the `Array`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chop([1, 2, 3, 4, 5], (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n   * console.log(result) // [2, 4, 6, 8, 10]\n   *\n   * // Explanation:\n   * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n   * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n   * // resulting in a new array `[2, 4, 6, 8, 10]`.\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n  ): Array<B>\n} = dual(2, <A, B>(\n  self: Iterable<A>,\n  f: (as: NonEmptyReadonlyArray<A>) => readonly [B, ReadonlyArray<A>]\n): Array<B> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input)\n    const out: NonEmptyArray<B> = [b]\n    let next: ReadonlyArray<A> = rest\n    while (internalArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next)\n      out.push(b)\n      next = rest\n    }\n    return out\n  }\n  return []\n})\n\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt: {\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: Iterable<A>) => [beforeIndex: Array<A>, fromIndex: Array<A>]\n  /**\n   * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` can be `0`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitAt([1, 2, 3, 4, 5], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): [beforeIndex: Array<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: Iterable<A>, n: number): [Array<A>, Array<A>] => {\n  const input = Array.from(self)\n  const _n = Math.floor(n)\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n)\n    }\n    return [[], input]\n  }\n  return [input, []]\n})\n\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt: {\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <A>(self: NonEmptyReadonlyArray<A>) => [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n  /**\n   * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n   * The value of `n` must be `>= 1`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n   * console.log(result) // [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): [beforeIndex: NonEmptyArray<A>, fromIndex: Array<A>]\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, n: number): [NonEmptyArray<A>, Array<A>] => {\n  const _n = Math.max(1, Math.floor(n))\n  return _n >= self.length ?\n    [copy(self), []] :\n    [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)]\n})\n\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n * ```\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split: {\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  /**\n   * Splits this iterable into `n` equally sized arrays.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.split([1, 2, 3, 4, 5, 6, 7, 8], 3)\n   * console.log(result) // [[1, 2, 3], [4, 5, 6], [7, 8]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category splitting\n   */\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number) => {\n  const input = fromIterable(self)\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)))\n})\n\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n * console.log(result) // [[1, 2, 3], [4, 5]]\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere: {\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [beforeMatch: Array<A>, fromMatch: Array<A>]\n  /**\n   * Splits this iterable on the first element that matches this predicate.\n   * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.splitWhere([1, 2, 3, 4, 5], n => n > 3)\n   * console.log(result) // [[1, 2, 3], [4, 5]]\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [beforeMatch: Array<A>, fromMatch: Array<A>] =>\n    span(self, (a: A, i: number) => !predicate(a, i))\n)\n\n/**\n * Copies an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.copy([1, 2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const copy: {\n  /**\n   * Copies an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.copy([1, 2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>): NonEmptyArray<A>\n  /**\n   * Copies an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.copy([1, 2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>): Array<A>\n} = (<A>(self: ReadonlyArray<A>): Array<A> => self.slice()) as any\n\n/**\n * Pads an array.\n * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n * If `n` is less than or equal to 0, the returned array will be an empty array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.pad([1, 2, 3], 6, 0)\n * console.log(result) // [1, 2, 3, 0, 0, 0]\n * ```\n *\n * @since 3.8.4\n */\nexport const pad: {\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.pad([1, 2, 3], 6, 0)\n   * console.log(result) // [1, 2, 3, 0, 0, 0]\n   * ```\n   *\n   * @since 3.8.4\n   */\n  <A, T>(n: number, fill: T): (\n    self: Array<A>\n  ) => Array<A | T>\n  /**\n   * Pads an array.\n   * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n   * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n   * If `n` is less than or equal to 0, the returned array will be an empty array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.pad([1, 2, 3], 6, 0)\n   * console.log(result) // [1, 2, 3, 0, 0, 0]\n   * ```\n   *\n   * @since 3.8.4\n   */\n  <A, T>(self: Array<A>, n: number, fill: T): Array<A | T>\n} = dual(3, <A, T>(self: Array<A>, n: number, fill: T): Array<A | T> => {\n  if (self.length >= n) {\n    return take(self, n)\n  }\n  return appendAll(\n    self,\n    makeBy(n - self.length, () => fill)\n  )\n})\n\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts skip-type-checking\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n * console.log(result) // [[1, 2], [3, 4], [5]]\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n * ```\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf: {\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  (n: number): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.With<S, NonEmptyArray<ReadonlyArray.Infer<S>>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, n: number): NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n   * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n   * definition of `chunksOf`; it satisfies the property that\n   *\n   * ```ts skip-type-checking\n   * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n   * ```\n   *\n   * whenever `n` evenly divides the length of `self`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.chunksOf([1, 2, 3, 4, 5], 2)\n   * console.log(result) // [[1, 2], [3, 4], [5]]\n   *\n   * // Explanation:\n   * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n   * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n   * // the last chunk contains the remaining elements.\n   * // The result is `[[1, 2], [3, 4], [5]]`.\n   * ```\n   *\n   * @category splitting\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<NonEmptyArray<A>> => {\n  const input = fromIterable(self)\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n))\n  }\n  return []\n})\n\n/**\n * Creates sliding windows of size `n` from an `Iterable`.\n * If the number of elements is less than `n` or if `n` is not greater than zero,\n * an empty array is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n * assert.deepStrictEqual(Array.window(numbers, 6), [])\n * ```\n *\n * @category splitting\n * @since 3.13.2\n */\nexport const window: {\n  /**\n   * Creates sliding windows of size `n` from an `Iterable`.\n   * If the number of elements is less than `n` or if `n` is not greater than zero,\n   * an empty array is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n   * assert.deepStrictEqual(Array.window(numbers, 6), [])\n   * ```\n   *\n   * @category splitting\n   * @since 3.13.2\n   */\n  (n: number): <A>(self: Iterable<A>) => Array<Array<A>>\n  /**\n   * Creates sliding windows of size `n` from an `Iterable`.\n   * If the number of elements is less than `n` or if `n` is not greater than zero,\n   * an empty array is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Array } from \"effect\"\n   *\n   * const numbers = [1, 2, 3, 4, 5]\n   * assert.deepStrictEqual(Array.window(numbers, 3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n   * assert.deepStrictEqual(Array.window(numbers, 6), [])\n   * ```\n   *\n   * @category splitting\n   * @since 3.13.2\n   */\n  <A>(self: Iterable<A>, n: number): Array<Array<A>>\n} = dual(2, <A>(self: Iterable<A>, n: number): Array<Array<A>> => {\n  const input = fromIterable(self)\n  if (n > 0 && isNonEmptyReadonlyArray(input)) {\n    return Array.from(\n      { length: input.length - (n - 1) },\n      (_, index) => input.slice(index, index + n)\n    )\n  }\n  return []\n})\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith: {\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>>\n  /**\n   * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n   * console.log(result) // [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]]\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<NonEmptyArray<A>>\n} = dual(\n  2,\n  <A>(self: NonEmptyReadonlyArray<A>, isEquivalent: (self: A, that: A) => boolean): NonEmptyArray<NonEmptyArray<A>> =>\n    chop(self, (as) => {\n      const h = headNonEmpty(as)\n      const out: NonEmptyArray<A> = [h]\n      let i = 1\n      for (; i < as.length; i++) {\n        const a = as[i]\n        if (isEquivalent(a, h)) {\n          out.push(a)\n        } else {\n          break\n        }\n      }\n      return [out, as.slice(i)]\n    })\n)\n\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * console.log(result) // [[1, 1], [2, 2, 2], [3], [1]]\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group: <A>(self: NonEmptyReadonlyArray<A>) => NonEmptyArray<NonEmptyArray<A>> = groupWith(\n  Equal.equivalence()\n)\n\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n *\n * const result = Array.groupBy(people, person => person.group)\n * console.log(result)\n * // {\n * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n * //  B: [{ name: \"Bob\", group: \"B\" }]\n * // }\n * ```\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy: {\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   *\n   * const result = Array.groupBy(people, person => person.group)\n   * console.log(result)\n   * // {\n   * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   * //  B: [{ name: \"Bob\", group: \"B\" }]\n   * // }\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(f: (a: A) => K): (self: Iterable<A>) => Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n  /**\n   * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n   * function on each element, and grouping the results according to values returned\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const people = [\n   *   { name: \"Alice\", group: \"A\" },\n   *   { name: \"Bob\", group: \"B\" },\n   *   { name: \"Charlie\", group: \"A\" }\n   * ]\n   *\n   * const result = Array.groupBy(people, person => person.group)\n   * console.log(result)\n   * // {\n   * //  A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n   * //  B: [{ name: \"Bob\", group: \"B\" }]\n   * // }\n   * ```\n   *\n   * @category grouping\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol>(self: Iterable<A>, f: (a: A) => K): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>>\n} = dual(2, <A, K extends string | symbol>(\n  self: Iterable<A>,\n  f: (a: A) => K\n): Record<Record.ReadonlyRecord.NonLiteralKey<K>, NonEmptyArray<A>> => {\n  const out: Record<string | symbol, NonEmptyArray<A>> = {}\n  for (const a of self) {\n    const k = f(a)\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a)\n    } else {\n      out[k] = [a]\n    }\n  }\n  return out\n})\n\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n * console.log(union) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const unionWith: {\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>, T extends Iterable<any>>(\n    that: T,\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<T>) => boolean\n  ): (self: S) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: NonEmptyReadonlyArray<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): NonEmptyArray<A | B>\n  /**\n   * Calculates the union of two arrays using the provided equivalence relation.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const union = Array.unionWith([1, 2], [2, 3], (a, b) => a === b)\n   * console.log(union) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: Iterable<A>,\n    that: Iterable<B>,\n    isEquivalent: (self: A, that: B) => boolean\n  ): Array<A | B>\n} = dual(3, <A>(self: Iterable<A>, that: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const a = fromIterable(self)\n  const b = fromIterable(that)\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent)\n      return dedupe(appendAll(a, b))\n    }\n    return a\n  }\n  return b\n})\n\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.union([1, 2], [2, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <T extends Iterable<any>>(that: T): <S extends Iterable<any>>(\n    self: S\n  ) => ReadonlyArray.OrNonEmpty<S, T, ReadonlyArray.Infer<S> | ReadonlyArray.Infer<T>>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: NonEmptyReadonlyArray<A>, that: ReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, that: NonEmptyReadonlyArray<B>): NonEmptyArray<A | B>\n  /**\n   * Creates a union of two arrays, removing duplicates.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.union([1, 2], [2, 3])\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B>\n} = dual(2, <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A | B> => unionWith(self, that, _equivalence))\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * console.log(result) // [{ id: 1 }, { id: 3 }]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersectionWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => has(that, a))\n  )\n}\n\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n * console.log(result) // [1, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n   * console.log(result) // [1, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <B>(that: Iterable<B>): <A>(self: Iterable<A>) => Array<A & B>\n  /**\n   * Creates an `Array` of unique values that are included in all given `Iterable`s.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.intersection([1, 2, 3], [3, 4, 1])\n   * console.log(result) // [1, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, that: Iterable<B>): Array<A & B>\n} = intersectionWith(_equivalence)\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */\nexport const differenceWith = <A>(isEquivalent: (self: A, that: A) => boolean): {\n  (that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  (self: Iterable<A>, that: Iterable<A>): Array<A>\n} => {\n  const has = containsWith(isEquivalent)\n  return dual(\n    2,\n    (self: Iterable<A>, that: Iterable<A>): Array<A> => fromIterable(self).filter((a) => !has(that, a))\n  )\n}\n\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n * console.log(difference) // [1]\n * ```\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n   * console.log(difference) // [1]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(that: Iterable<A>): (self: Iterable<A>) => Array<A>\n  /**\n   * Creates a `Array` of values not included in the other given `Iterable`.\n   * The order and references of result values are determined by the first `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const difference = Array.difference([1, 2, 3], [2, 3, 4])\n   * console.log(difference) // [1]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, that: Iterable<A>): Array<A>\n} = differenceWith(_equivalence)\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty: <A = never>() => Array<A> = () => []\n\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = <A>(a: A): NonEmptyArray<A> => [a]\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyArray {\n  /**\n   * @since 2.0.0\n   */\n  export type Infer<S extends Iterable<any>> = S extends ReadonlyArray<infer A> ? A\n    : S extends Iterable<infer A> ? A\n    : never\n\n  /**\n   * @since 2.0.0\n   */\n  export type With<S extends Iterable<any>, A> = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type OrNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type AndNonEmpty<\n    S extends Iterable<any>,\n    T extends Iterable<any>,\n    A\n  > = S extends NonEmptyReadonlyArray<any> ? T extends NonEmptyReadonlyArray<any> ? NonEmptyArray<A>\n    : Array<A>\n    : Array<A>\n\n  /**\n   * @since 2.0.0\n   */\n  export type Flatten<T extends ReadonlyArray<ReadonlyArray<any>>> = T extends\n    NonEmptyReadonlyArray<NonEmptyReadonlyArray<infer A>> ? NonEmptyArray<A>\n    : T extends ReadonlyArray<ReadonlyArray<infer A>> ? Array<A>\n    : never\n}\n\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(f: (a: ReadonlyArray.Infer<S>, i: number) => B): (self: S) => ReadonlyArray.With<S, B>\n  /**\n   * @category mapping\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, B>(self: S, f: (a: ReadonlyArray.Infer<S>, i: number) => B): ReadonlyArray.With<S, B>\n} = dual(2, <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => B): Array<B> => self.map(f))\n\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap: {\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <S extends ReadonlyArray<any>, T extends ReadonlyArray<any>>(f: (a: ReadonlyArray.Infer<S>, i: number) => T): (self: S) => ReadonlyArray.AndNonEmpty<S, T, ReadonlyArray.Infer<T>>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(\n    self: NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => NonEmptyReadonlyArray<B>\n  ): NonEmptyArray<B>\n  /**\n   * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A, i: number) => ReadonlyArray<B>): Array<B> => {\n    if (isEmptyReadonlyArray(self)) {\n      return []\n    }\n    const out: Array<B> = []\n    for (let i = 0; i < self.length; i++) {\n      const inner = f(self[i], i)\n      for (let j = 0; j < inner.length; j++) {\n        out.push(inner[j])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatten([[1, 2], [], [3, 4], [], [5, 6]])\n * console.log(result) // [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten: <S extends ReadonlyArray<ReadonlyArray<any>>>(self: S) => ReadonlyArray.Flatten<S> = flatMap(\n  identity\n) as any\n\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option.Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n   * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMap([1, 2, 3, 4, 5], evenSquares);\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B>\n} = dual(\n  2,\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B> => {\n    const as = fromIterable(self)\n    const out: Array<B> = []\n    for (let i = 0; i < as.length; i++) {\n      const o = f(as[i], i)\n      if (Option.isSome(o)) {\n        out.push(o.value)\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n *\n * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n * console.log(result) // [4, 16]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile: {\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A, i: number) => Option.Option<B>): (self: Iterable<A>) => Array<B>\n  /**\n   * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n   * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n   * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Option } from \"effect\"\n   *\n   * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none()\n   *\n   * const result = Array.filterMapWhile([2, 4, 5], toSquareTillOdd)\n   * console.log(result) // [4, 16]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>): Array<B>\n} = dual(2, <A, B>(self: Iterable<A>, f: (a: A, i: number) => Option.Option<B>) => {\n  let i = 0\n  const out: Array<B> = []\n  for (const a of self) {\n    const b = f(a, i)\n    if (Option.isSome(b)) {\n      out.push(b.value)\n    } else {\n      break\n    }\n    i++\n  }\n  return out\n})\n\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\";\n *\n * const isEven = (x: number) => x % 2 === 0\n *\n * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n * console.log(result)\n * // [\n * //   [1, 3, 5],\n * //   [2, 4]\n * // ]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Either } from \"effect\";\n   *\n   * const isEven = (x: number) => x % 2 === 0\n   *\n   * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   * console.log(result)\n   * // [\n   * //   [1, 3, 5],\n   * //   [2, 4]\n   * // ]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(f: (a: A, i: number) => Either.Either<C, B>): (self: Iterable<A>) => [left: Array<B>, right: Array<C>]\n  /**\n   * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n   * This function is particularly useful for operations where each element can result in two possible types,\n   * and you want to separate these types into different collections. For instance, separating validation results\n   * into successes and failures.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Either } from \"effect\";\n   *\n   * const isEven = (x: number) => x % 2 === 0\n   *\n   * const result = Array.partitionMap([1, 2, 3, 4, 5], x =>\n   *   isEven(x) ? Either.right(x) : Either.left(x)\n   * )\n   * console.log(result)\n   * // [\n   * //   [1, 3, 5],\n   * //   [2, 4]\n   * // ]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => Either.Either<C, B>): [left: Array<B>, right: Array<C>]\n} = dual(\n  2,\n  <A, B, C>(self: Iterable<A>, f: (a: A, i: number) => Either.Either<C, B>): [left: Array<B>, right: Array<C>] => {\n    const left: Array<B> = []\n    const right: Array<C> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      const e = f(as[i], i)\n      if (Either.isLeft(e)) {\n        left.push(e.left)\n      } else {\n        right.push(e.right)\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Option } from \"effect\"\n *\n * const result = Array.getSomes([Option.some(1), Option.none(), Option.some(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\n\nexport const getSomes: <T extends Iterable<Option.Option<X>>, X = any>(\n  self: T\n) => Array<Option.Option.Value<ReadonlyArray.Infer<T>>> = filterMap(identity as any)\n\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [\"err\"]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n): Array<Either.Either.Left<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (Either.isLeft(a)) {\n      out.push(a.left)\n    }\n  }\n\n  return out\n}\n\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const result = Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])\n * console.log(result) // [1, 2]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n): Array<Either.Either.Right<ReadonlyArray.Infer<T>>> => {\n  const out: Array<any> = []\n  for (const a of self) {\n    if (Either.isRight(a)) {\n      out.push(a.right)\n    }\n  }\n\n  return out\n}\n\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: Iterable<A>) => Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): Array<B>\n  /**\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): Array<A> => {\n    const as = fromIterable(self)\n    const out: Array<A> = []\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        out.push(as[i])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n * console.log(result) // [[1, 3], [2, 4]]\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (\n    self: Iterable<A>\n  ) => [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: Iterable<A>) => [excluded: Array<A>, satisfying: Array<A>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: Iterable<A>, refinement: (a: A, i: number) => a is B): [excluded: Array<Exclude<A, B>>, satisfying: Array<B>]\n  /**\n   * Separate elements based on a predicate that also exposes the index of the element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.partition([1, 2, 3, 4], n => n % 2 === 0)\n   * console.log(result) // [[1, 3], [2, 4]]\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>]\n} = dual(\n  2,\n  <A>(self: Iterable<A>, predicate: (a: A, i: number) => boolean): [excluded: Array<A>, satisfying: Array<A>] => {\n    const left: Array<A> = []\n    const right: Array<A> = []\n    const as = fromIterable(self)\n    for (let i = 0; i < as.length; i++) {\n      if (predicate(as[i], i)) {\n        right.push(as[i])\n      } else {\n        left.push(as[i])\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <T extends Iterable<Either.Either<any, any>>>(\n  self: T\n) => [Array<Either.Either.Left<ReadonlyArray.Infer<T>>>, Array<Either.Either.Right<ReadonlyArray.Infer<T>>>] =\n  partitionMap(identity)\n\n/**\n * Reduces an array from the left.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduces an array from the left.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the left.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduce([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <B, A>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduce((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Reduces an array from the right.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n * console.log(result) // 6\n * ```\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight: {\n  /**\n   * Reduces an array from the right.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <B, A>(b: B, f: (b: B, a: A, i: number) => B): (self: Iterable<A>) => B\n  /**\n   * Reduces an array from the right.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.reduceRight([1, 2, 3], 0, (acc, n) => acc + n)\n   * console.log(result) // 6\n   * ```\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B\n} = dual(\n  3,\n  <A, B>(self: Iterable<A>, b: B, f: (b: B, a: A, i: number) => B): B =>\n    fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b)\n)\n\n/**\n * Lifts a predicate into an array.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * console.log(to(1)) // []\n * console.log(to(2)) // [2]\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate: { // Note: I intentionally avoid using the NoInfer pattern here.\n  <A, B extends A>(refinement: Predicate.Refinement<A, B>): (a: A) => Array<B>\n  /**\n   * Lifts a predicate into an array.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const isEven = (n: number) => n % 2 === 0\n   * const to = Array.liftPredicate(isEven)\n   * console.log(to(1)) // []\n   * console.log(to(2)) // [2]\n   * ```\n   *\n   * @category lifting\n   * @since 2.0.0\n   */\n  <A>(predicate: Predicate.Predicate<A>): <B extends A>(b: B) => Array<B>\n} = <A>(predicate: Predicate.Predicate<A>) => <B extends A>(b: B): Array<B> => predicate(b) ? [b] : []\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = <A extends Array<unknown>, B>(\n  f: (...a: A) => Option.Option<B>\n) =>\n(...a: A): Array<B> => fromOption(f(...a))\n\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = <A>(a: A): Array<NonNullable<A>> => a == null ? empty() : [a as NonNullable<A>]\n\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = <A extends Array<unknown>, B>(\n  f: (...a: A) => B | null | undefined\n): (...a: A) => Array<NonNullable<B>> =>\n(...a) => fromNullable(f(...a))\n\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n * console.log(result) // [1, 3]\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n * ```\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable: {\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n   * console.log(result) // [1, 3]\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   * ```\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(f: (a: A) => B | null | undefined): (self: ReadonlyArray<A>) => Array<NonNullable<B>>\n  /**\n   * Maps over an array and flattens the result, removing null and undefined values.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.flatMapNullable([1, 2, 3], n => (n % 2 === 0 ? null : n))\n   * console.log(result) // [1, 3]\n   *\n   * // Explanation:\n   * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n   * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n   * // to remove null values, resulting in [1, 3].\n   * ```\n   *\n   * @category sequencing\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (a: A) => B | null | undefined): Array<NonNullable<B>> =>\n    flatMap(self, (a) => fromNullable(f(a)))\n)\n\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * console.log(result1) // [42]\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * console.log(result2) // []\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n * ```\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = <A extends Array<unknown>, E, B>(\n  f: (...a: A) => Either.Either<B, E>\n) =>\n(...a: A): Array<B> => {\n  const e = f(...a)\n  return Either.isLeft(e) ? [] : [e.right]\n}\n\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(refinement: (a: NoInfer<A>, i: number) => a is B): (self: ReadonlyArray<A>) => self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => boolean\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B>\n  /**\n   * Check if a predicate holds true for every `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): boolean\n} = dual(\n  2,\n  <A, B extends A>(self: ReadonlyArray<A>, refinement: (a: A, i: number) => a is B): self is ReadonlyArray<B> =>\n    self.every(refinement)\n)\n\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(predicate: (a: NoInfer<A>, i: number) => boolean): (self: ReadonlyArray<A>) => self is NonEmptyReadonlyArray<A>\n  /**\n   * Check if a predicate holds true for some `ReadonlyArray` element.\n   *\n   * @category elements\n   * @since 2.0.0\n   */\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A>\n} = dual(\n  2,\n  <A>(self: ReadonlyArray<A>, predicate: (a: A, i: number) => boolean): self is NonEmptyReadonlyArray<A> =>\n    self.some(predicate)\n)\n\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.extend([1, 2, 3], as => as.length)\n * console.log(result) // [3, 2, 1]\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n * ```\n *\n * @since 2.0.0\n */\nexport const extend: {\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.extend([1, 2, 3], as => as.length)\n   * console.log(result) // [3, 2, 1]\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(f: (as: ReadonlyArray<A>) => B): (self: ReadonlyArray<A>) => Array<B>\n  /**\n   * Extends an array with a function that maps each subarray to a value.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.extend([1, 2, 3], as => as.length)\n   * console.log(result) // [3, 2, 1]\n   *\n   * // Explanation:\n   * // The function maps each subarray starting from each element to its length.\n   * // The subarrays are: [1, 2, 3], [2, 3], [3].\n   * // The lengths are: 3, 2, 1.\n   * // Therefore, the result is [3, 2, 1].\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, f: (as: ReadonlyArray<A>) => B): Array<B> => self.map((_, i, as) => f(as.slice(i)))\n)\n\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.min([3, 1, 2], Order.number)\n * console.log(result) // 1\n * ```\n *\n * @since 2.0.0\n */\nexport const min: {\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.min([3, 1, 2], Order.number)\n   * console.log(result) // 1\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the minimum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.min([3, 1, 2], Order.number)\n   * console.log(result) // 1\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.min(O)))\n\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * **Example**\n *\n * ```ts\n * import { Array, Order } from \"effect\"\n *\n * const result = Array.max([3, 1, 2], Order.number)\n * console.log(result) // 3\n * ```\n *\n * @since 2.0.0\n */\nexport const max: {\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.max([3, 1, 2], Order.number)\n   * console.log(result) // 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(O: Order.Order<A>): (self: NonEmptyReadonlyArray<A>) => A\n  /**\n   * Finds the maximum element in an array based on a comparator.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, Order } from \"effect\"\n   *\n   * const result = Array.max([3, 1, 2], Order.number)\n   * console.log(result) // 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A\n} = dual(2, <A>(self: NonEmptyReadonlyArray<A>, O: Order.Order<A>): A => self.reduce(Order.max(O)))\n\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = <B, A>(b: B, f: (b: B) => Option.Option<readonly [A, B]>): Array<A> => {\n  const out: Array<A> = []\n  let next: B = b\n  let o: Option.Option<readonly [A, B]>\n  while (Option.isSome(o = f(next))) {\n    const [a, b] = o.value\n    out.push(a)\n    next = b\n  }\n  return out\n}\n\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder: <A>(O: Order.Order<A>) => Order.Order<ReadonlyArray<A>> = Order.array\n\n/**\n * Creates an equivalence relation for arrays.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * console.log(eq([1, 2, 3], [1, 2, 3])) // true\n * ```\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence: <A>(\n  isEquivalent: Equivalence.Equivalence<A>\n) => Equivalence.Equivalence<ReadonlyArray<A>> = Equivalence.array\n\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n * ```\n *\n * @since 2.0.0\n */\nexport const forEach: {\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(f: (a: A, i: number) => void): (self: Iterable<A>) => void\n  /**\n   * Performs a side-effect for each element of the `Iterable`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * Array.forEach([1, 2, 3], n => console.log(n)) // 1, 2, 3\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, f: (a: A, i: number) => void): void\n} = dual(2, <A>(self: Iterable<A>, f: (a: A, i: number) => void): void => fromIterable(self).forEach((a, i) => f(a, i)))\n\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeWith: {\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <S extends Iterable<any>>(\n    isEquivalent: (self: ReadonlyArray.Infer<S>, that: ReadonlyArray.Infer<S>) => boolean\n  ): (self: S) => ReadonlyArray.With<S, ReadonlyArray.Infer<S>>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(\n    self: NonEmptyReadonlyArray<A>,\n    isEquivalent: (self: A, that: A) => boolean\n  ): NonEmptyArray<A>\n  /**\n   * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n   * preserving the order of the first occurrence of each element.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeWith([1, 2, 2, 3, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(\n  2,\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n    const input = fromIterable(self)\n    if (isNonEmptyReadonlyArray(input)) {\n      const out: NonEmptyArray<A> = [headNonEmpty(input)]\n      const rest = tailNonEmpty(input)\n      for (const r of rest) {\n        if (out.every((a) => !isEquivalent(r, a))) {\n          out.push(r)\n        }\n      }\n      return out\n    }\n    return []\n  }\n)\n\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = <S extends Iterable<any>>(\n  self: S\n): S extends NonEmptyReadonlyArray<infer A> ? NonEmptyArray<A> : S extends Iterable<infer A> ? Array<A> : never =>\n  dedupeWith(self, Equal.equivalence()) as any\n\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith: {\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(isEquivalent: (self: A, that: A) => boolean): (self: Iterable<A>) => Array<A>\n  /**\n   * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.dedupeAdjacentWith([1, 1, 2, 2, 3, 3], (a, b) => a === b)\n   * console.log(result) // [1, 2, 3]\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A>\n} = dual(2, <A>(self: Iterable<A>, isEquivalent: (self: A, that: A) => boolean): Array<A> => {\n  const out: Array<A> = []\n  let lastA: Option.Option<A> = Option.none()\n  for (const a of self) {\n    if (Option.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a)\n      lastA = Option.some(a)\n    }\n  }\n  return out\n})\n\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.dedupeAdjacent([1, 1, 2, 2, 3, 3])\n * console.log(result) // [1, 2, 3]\n * ```\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent: <A>(self: Iterable<A>) => Array<A> = dedupeAdjacentWith(Equal.equivalence())\n\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * console.log(joined) // \"a-b-c\"\n * ```\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join: {\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * console.log(joined) // \"a-b-c\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (sep: string): (self: Iterable<string>) => string\n  /**\n   * Joins the elements together with \"sep\" in the middle.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const strings = [\"a\", \"b\", \"c\"]\n   * const joined = Array.join(strings, \"-\")\n   * console.log(joined) // \"a-b-c\"\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  (self: Iterable<string>, sep: string): string\n} = dual(2, (self: Iterable<string>, sep: string): string => fromIterable(self).join(sep))\n\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n * console.log(result) // [6, [1, 3, 6]]\n * ```\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum: {\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n   * console.log(result) // [6, [1, 3, 6]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(s: S, f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]): (self: I) => [state: S, mappedArray: ReadonlyArray.With<I, B>]\n  /**\n   * Statefully maps over the chunk, producing new elements of type `B`.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.mapAccum([1, 2, 3], 0, (acc, n) => [acc + n, acc + n])\n   * console.log(result) // [6, [1, 3, 6]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category folding\n   */\n  <S, A, B, I extends Iterable<A> = Iterable<A>>(\n    self: I,\n    s: S,\n    f: (s: S, a: ReadonlyArray.Infer<I>, i: number) => readonly [S, B]\n  ): [state: S, mappedArray: ReadonlyArray.With<I, B>]\n} = dual(\n  3,\n  <S, A, B>(self: Iterable<A>, s: S, f: (s: S, a: A, i: number) => [S, B]): [state: S, mappedArray: Array<B>] => {\n    let i = 0\n    let s1 = s\n    const out: Array<B> = []\n    for (const a of self) {\n      const r = f(s1, a, i)\n      s1 = r[0]\n      out.push(r[1])\n      i++\n    }\n    return [s1, out]\n  }\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith: {\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n   * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(that: ReadonlyArray<B>, f: (a: A, b: B) => C): (self: ReadonlyArray<A>) => Array<C>\n  /**\n   * Zips this chunk crosswise with the specified chunk using the specified combiner.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesianWith([1, 2], [\"a\", \"b\"], (a, b) => `${a}-${b}`)\n   * console.log(result) // [\"1-a\", \"1-b\", \"2-a\", \"2-b\"]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C>\n} = dual(\n  3,\n  <A, B, C>(self: ReadonlyArray<A>, that: ReadonlyArray<B>, f: (a: A, b: B) => C): Array<C> =>\n    flatMap(self, (a) => map(that, (b) => f(a, b)))\n)\n\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * **Example**\n *\n * ```ts\n * import { Array } from \"effect\"\n *\n * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n * ```\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian: {\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n   * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <B>(that: ReadonlyArray<B>): <A>(self: ReadonlyArray<A>) => Array<[A, B]>\n  /**\n   * Zips this chunk crosswise with the specified chunk.\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array } from \"effect\"\n   *\n   * const result = Array.cartesian([1, 2], [\"a\", \"b\"])\n   * console.log(result) // [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]]\n   * ```\n   *\n   * @since 2.0.0\n   * @category elements\n   */\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]>\n} = dual(\n  2,\n  <A, B>(self: ReadonlyArray<A>, that: ReadonlyArray<B>): Array<[A, B]> => cartesianWith(self, that, (a, b) => [a, b])\n)\n\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do: ReadonlyArray<{}> = of({})\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(tag: Exclude<N, keyof A>, f: (a: NoInfer<A>) => ReadonlyArray<B>): (\n    self: ReadonlyArray<A>\n  ) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A extends object, N extends string, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => ReadonlyArray<B>\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = internalDoNotation.bind<ReadonlyArrayTypeLambda>(map, flatMap) as any\n\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * **Example**\n *\n * ```ts\n * import { Array, pipe } from \"effect\"\n *\n * const doResult = pipe(\n *   Array.Do,\n *   Array.bind(\"x\", () => [1, 3, 5]),\n *   Array.bind(\"y\", () => [2, 4, 6]),\n *   Array.filter(({ x, y }) => x < y), // condition\n *   Array.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n * ```\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo: {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <N extends string>(tag: N): <A>(self: ReadonlyArray<A>) => Array<{ [K in N]: A }>\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link Do}\n   * @see {@link let_ let}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  <A, N extends string>(self: ReadonlyArray<A>, tag: N): Array<{ [K in N]: A }>\n} = internalDoNotation.bindTo<ReadonlyArrayTypeLambda>(map) as any\n\nconst let_: {\n  <N extends string, B, A extends object>(\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): (self: ReadonlyArray<A>) => Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n  <N extends string, A extends object, B>(\n    self: ReadonlyArray<A>,\n    tag: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Array<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }>\n} = internalDoNotation.let_<ReadonlyArrayTypeLambda>(map) as any\n\nexport {\n  /**\n   * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n   *\n   * It can be used to simulate \"array comprehension\".\n   * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n   *\n   * Here's how the do simulation works:\n   *\n   * 1. Start the do simulation using the `Do` value\n   * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n   * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n   * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n   * 5. Regular `Array` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n   *\n   * **Example**\n   *\n   * ```ts\n   * import { Array, pipe } from \"effect\"\n   *\n   * const doResult = pipe(\n   *   Array.Do,\n   *   Array.bind(\"x\", () => [1, 3, 5]),\n   *   Array.bind(\"y\", () => [2, 4, 6]),\n   *   Array.filter(({ x, y }) => x < y), // condition\n   *   Array.map(({ x, y }) => [x, y] as const) // transformation\n   * )\n   * console.log(doResult) // [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]]\n   *\n   * // equivalent\n   * const x = [1, 3, 5],\n   *       y = [2, 4, 6],\n   *       result = [];\n   * for(let i = 0; i < x.length; i++) {\n   *   for(let j = 0; j < y.length; j++) {\n   *     const _x = x[i], _y = y[j];\n   *     if(_x < _y) result.push([_x, _y] as const)\n   *   }\n   * }\n   *\n   * ```\n   *\n   * @see {@link bindTo}\n   * @see {@link bind}\n   * @see {@link Do}\n   *\n   * @category do notation\n   * @since 3.2.0\n   */\n  let_ as let\n}\n","/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\n\nimport type { Either } from \"./Either.js\"\nimport * as E from \"./Either.js\"\nimport * as Equal from \"./Equal.js\"\nimport type { Equivalence } from \"./Equivalence.js\"\nimport { dual, identity } from \"./Function.js\"\nimport type { TypeLambda } from \"./HKT.js\"\nimport * as Option from \"./Option.js\"\nimport type { NoInfer } from \"./Types.js\"\n\n/**\n * @category models\n * @since 2.0.0\n */\nexport type ReadonlyRecord<in out K extends string | symbol, out A> = {\n  readonly [P in K]: A\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ReadonlyRecord {\n  type IsFiniteString<T extends string> = T extends \"\" ? true :\n    [T] extends [`${infer Head}${infer Rest}`]\n      ? string extends Head ? false : `${number}` extends Head ? false : Rest extends \"\" ? true : IsFiniteString<Rest>\n    : false\n\n  /**\n   * @since 2.0.0\n   */\n  export type NonLiteralKey<K extends string | symbol> = K extends string ? IsFiniteString<K> extends true ? string : K\n    : symbol\n\n  /**\n   * @since 2.0.0\n   */\n  export type IntersectKeys<K1 extends string, K2 extends string> = [string] extends [K1 | K2] ?\n    NonLiteralKey<K1> & NonLiteralKey<K2>\n    : K1 & K2\n}\n\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexport interface ReadonlyRecordTypeLambda<K extends string = string> extends TypeLambda {\n  readonly type: ReadonlyRecord<K, this[\"Target\"]>\n}\n\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = <K extends string | symbol = never, V = never>(): Record<\n  ReadonlyRecord.NonLiteralKey<K>,\n  V\n> => ({} as any)\n\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyRecord = <K extends string, A>(self: Record<K, A>): self is Record<K, never> =>\n  keys(self).length === 0\n\n/**\n * Determine if a record is empty.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n * ```\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyRecord: <K extends string, A>(\n  self: ReadonlyRecord<K, A>\n) => self is ReadonlyRecord<K, never> = isEmptyRecord\n\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableWith: {\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(f: (a: A) => readonly [K, B]): (self: Iterable<A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Takes an iterable and a projection function and returns a record.\n   * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { fromIterableWith } from \"effect/Record\"\n   *\n   * const input = [1, 2, 3, 4]\n   *\n   * assert.deepStrictEqual(\n   *   fromIterableWith(input, a => [String(a), a * 2]),\n   *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n   * )\n   * ```\n   *\n   * @category constructors\n   * @since 2.0.0\n   */\n  <A, K extends string | symbol, B>(self: Iterable<A>, f: (a: A) => readonly [K, B]): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <A, K extends string, B>(\n    self: Iterable<A>,\n    f: (a: A) => readonly [K, B]\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const a of self) {\n      const [k, b] = f(a)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n * ```\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableBy = <A, K extends string | symbol>(\n  items: Iterable<A>,\n  f: (a: A) => K\n): Record<ReadonlyRecord.NonLiteralKey<K>, A> => fromIterableWith(items, (a) => [f(a), a])\n\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n * ```\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEntries: <Entry extends readonly [string | symbol, any]>(\n  entries: Iterable<Entry>\n) => Record<ReadonlyRecord.NonLiteralKey<Entry[0]>, Entry[1]> = Object.fromEntries\n\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const collect: {\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   * ```\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (key: K, a: A) => B): (self: ReadonlyRecord<K, A>) => Array<B>\n  /**\n   * Transforms the values of a record into an `Array` with a custom mapping function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { collect } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n   * ```\n   *\n   * @category conversions\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => B): Array<B> => {\n    const out: Array<B> = []\n    for (const key of keys(self)) {\n      out.push(f(key, self[key]))\n    }\n    return out\n  }\n)\n\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n * ```\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toEntries: <K extends string, A>(self: ReadonlyRecord<K, A>) => Array<[K, A]> = collect((\n  key,\n  value\n) => [key, value])\n\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n * ```\n *\n * @since 2.0.0\n */\nexport const size = <K extends string, A>(self: ReadonlyRecord<K, A>): number => keys(self).length\n\n/**\n * Check if a given `key` exists in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n * ```\n *\n * @since 2.0.0\n */\nexport const has: {\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if a given `key` exists in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { empty, has } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n   * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): boolean\n} = dual(\n  2,\n  <K extends string | symbol, A>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>\n  ): boolean => Object.prototype.hasOwnProperty.call(self, key)\n)\n\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const get: {\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol>(key: NoInfer<K>): <A>(self: ReadonlyRecord<K, A>) => Option.Option<A>\n  /**\n   * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n   *\n   * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n   * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A>\n} = dual(\n  2,\n  <K extends string | symbol, A>(self: ReadonlyRecord<K, A>, key: NoInfer<K>): Option.Option<A> =>\n    has(self, key) ? Option.some(self[key]) : Option.none()\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const modify: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(key: NoInfer<K>, f: (a: A) => B): (self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Apply a function to the element at the specified key, creating a new record.\n   * If the key does not exist, the record is returned unchanged.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 }, 'a', f),\n   *  { a: 6 }\n   * )\n   * assert.deepStrictEqual(\n   *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n   *  { a: 3 }\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Record<K, A | B> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    return { ...self, [key]: f(self[key]) }\n  }\n)\n\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n * ```\n *\n * @since 2.0.0\n */\nexport const modifyOption: {\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(key: NoInfer<K>, f: (a: A) => B): (self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Apply a function to the element at the specified key, creating a new record,\n   * or return `None` if the key doesn't exist.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * const f = (x: number) => x * 2\n   *\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 }, 'a', f),\n   *  Option.some({ a: 6 })\n   * )\n   * assert.deepStrictEqual(\n   *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n   *  Option.none()\n   * )\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, f: (a: A) => B): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    f: (a: A) => B\n  ): Option.Option<Record<K, A | B>> => {\n    if (!has(self, key)) {\n      return Option.none()\n    }\n    return Option.some({ ...self, [key]: f(self[key]) })\n  }\n)\n\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n * ```\n *\n * @since 2.0.0\n */\nexport const replaceOption: {\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(key: NoInfer<K>, b: B): <A>(self: ReadonlyRecord<K, A>) => Option.Option<Record<K, A | B>>\n  /**\n   * Replaces a value in the record with the new value passed as parameter.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(\n   *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n   *   Option.some({ a: 10, b: 2, c: 3 })\n   * )\n   * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, b: B): Option.Option<Record<K, A | B>>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(\n    self: ReadonlyRecord<K, A>,\n    key: NoInfer<K>,\n    b: B\n  ): Option.Option<Record<K, A | B>> => modifyOption(self, key, () => b)\n)\n\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n * ```\n *\n * @since 2.0.0\n */\nexport const remove: {\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(key: X): <A>(self: ReadonlyRecord<K, A>) => Record<Exclude<K, X>, A>\n  /**\n   * If the given key exists in the record, returns a new record with the key removed,\n   * otherwise returns a copy of the original record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { remove } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A>\n} = dual(\n  2,\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Record<Exclude<K, X>, A> => {\n    if (!has(self, key)) {\n      return { ...self }\n    }\n    const out = { ...self }\n    delete out[key]\n    return out\n  }\n)\n\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n * ```\n *\n * @category record\n * @since 2.0.0\n */\nexport const pop: {\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   * ```\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, X extends K>(key: X): <A>(self: ReadonlyRecord<K, A>) => Option.Option<[A, Record<Exclude<K, X>, A>]>\n  /**\n   * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n   * of a tuple with the value and the record with the removed property.\n   * If the key is not present, returns `O.none`.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record as R, Option } from \"effect\"\n   *\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n   * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n   * ```\n   *\n   * @category record\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, X extends K>(self: ReadonlyRecord<K, A>, key: X): Option.Option<[A, Record<Exclude<K, X>, A>]>\n} = dual(2, <K extends string | symbol, A, X extends K>(\n  self: ReadonlyRecord<K, A>,\n  key: X\n): Option.Option<[A, Record<Exclude<K, X>, A>]> =>\n  has(self, key) ? Option.some([self[key], remove(self, key)]) : Option.none())\n\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map: {\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (a: A, key: NoInfer<K>) => B): (self: ReadonlyRecord<K, A>) => Record<K, B>\n  /**\n   * Maps a record into another record by applying a transformation function to each of its values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { map } from \"effect/Record\"\n   *\n   * const f = (n: number) => `-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n   *\n   * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n   *\n   * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B>\n} = dual(\n  2,\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: NoInfer<K>) => B): Record<K, B> => {\n    const out: Record<K, B> = { ...self } as any\n    for (const key of keys(self)) {\n      out[key] = f(self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapKeys: {\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(f: (key: K, a: A) => K2): (self: ReadonlyRecord<K, A>) => Record<K2, A>\n  /**\n   * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapKeys } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string>(self: ReadonlyRecord<K, A>, f: (key: K, a: A) => K2): Record<K2, A>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string>(\n    self: ReadonlyRecord<K, A>,\n    f: (key: K, a: A) => K2\n  ): Record<K2, A> => {\n    const out: Record<K2, A> = {} as any\n    for (const key of keys(self)) {\n      const a = self[key]\n      out[f(key, a)] = a\n    }\n    return out\n  }\n)\n\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n * ```\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapEntries: {\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(f: (a: A, key: K) => readonly [K2, B]): (self: ReadonlyRecord<K, A>) => Record<K2, B>\n  /**\n   * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { mapEntries } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n   * ```\n   *\n   * @category mapping\n   * @since 2.0.0\n   */\n  <K extends string, A, K2 extends string, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => [K2, B]): Record<K2, B>\n} = dual(\n  2,\n  <K extends string, A, K2 extends string, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => [K2, B]\n  ): Record<K2, B> => {\n    const out = <Record<K2, B>> {}\n    for (const key of keys(self)) {\n      const [k, b] = f(self[key], key)\n      out[k] = b\n    }\n    return out\n  }\n)\n\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n * ```\n *\n * @since 2.0.0\n */\nexport const filterMap: {\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(f: (a: A, key: K) => Option.Option<B>): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n   * If the function returns `Some`, the key-value pair is included in the output record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Option } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n   * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A, B>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => Option.Option<B>): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n} = dual(\n  2,\n  <K extends string, A, B>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Option.Option<B>\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, B> => {\n    const out: Record<string, B> = empty()\n    for (const key of keys(self)) {\n      const o = f(self[key], key)\n      if (Option.isSome(o)) {\n        out[key] = o.value\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter: {\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(refinement: (a: NoInfer<A>, key: K) => a is B): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(predicate: (A: NoInfer<A>, key: K) => boolean): (self: ReadonlyRecord<K, A>) => Record<ReadonlyRecord.NonLiteralKey<K>, A>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(self: ReadonlyRecord<K, A>, refinement: (a: A, key: K) => a is B): Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  /**\n   * Selects properties from a record whose values match the given predicate.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { filter } from \"effect/Record\"\n   *\n   * const x = { a: 1, b: 2, c: 3, d: 4 }\n   * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (a: A, key: K) => boolean): Record<ReadonlyRecord.NonLiteralKey<K>, A>\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): Record<ReadonlyRecord.NonLiteralKey<K>, A> => {\n    const out: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        out[key] = self[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes: <K extends string, A>(\n  self: ReadonlyRecord<K, Option.Option<A>>\n) => Record<ReadonlyRecord.NonLiteralKey<K>, A> = filterMap(\n  identity\n)\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<ReadonlyRecord.NonLiteralKey<K>, L> => {\n  const out: Record<string, L> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isLeft(value)) {\n      out[key] = value.left\n    }\n  }\n\n  return out\n}\n\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = <K extends string, R, L>(\n  self: ReadonlyRecord<K, Either<R, L>>\n): Record<string, R> => {\n  const out: Record<string, R> = empty()\n  for (const key of keys(self)) {\n    const value = self[key]\n    if (E.isRight(value)) {\n      out[key] = value.right\n    }\n  }\n\n  return out\n}\n\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap: {\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(f: (a: A, key: K) => Either<C, B>): (\n    self: ReadonlyRecord<K, A>\n  ) => [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n  /**\n   * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record, Either } from \"effect\"\n   *\n   * const x = { a: 1, b: 2, c: 3 }\n   * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n   * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B, C>(self: ReadonlyRecord<K, A>, f: (a: A, key: K) => Either<C, B>): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>]\n} = dual(\n  2,\n  <K extends string, A, B, C>(\n    self: ReadonlyRecord<K, A>,\n    f: (a: A, key: K) => Either<C, B>\n  ): [left: Record<ReadonlyRecord.NonLiteralKey<K>, B>, right: Record<ReadonlyRecord.NonLiteralKey<K>, C>] => {\n    const left: Record<string, B> = empty()\n    const right: Record<string, C> = empty()\n    for (const key of keys(self)) {\n      const e = f(self[key], key)\n      if (E.isLeft(e)) {\n        left[key] = e.left\n      } else {\n        right[key] = e.right\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate: <K extends string, A, B>(\n  self: ReadonlyRecord<K, Either<B, A>>\n) => [Record<ReadonlyRecord.NonLiteralKey<K>, A>, Record<ReadonlyRecord.NonLiteralKey<K>, B>] = partitionMap(identity)\n\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n * ```\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition: {\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(refinement: (a: NoInfer<A>, key: K) => a is B): (\n    self: ReadonlyRecord<K, A>\n  ) => [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(predicate: (a: NoInfer<A>, key: K) => boolean): (\n    self: ReadonlyRecord<K, A>\n  ) => [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A, B extends A>(self: ReadonlyRecord<K, A>, refinement: (a: A, key: K) => a is B): [\n    excluded: Record<ReadonlyRecord.NonLiteralKey<K>, Exclude<A, B>>,\n    satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, B>\n  ]\n  /**\n   * Partitions a record into two separate records based on the result of a predicate function.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { partition } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(\n   *   partition({ a: 1, b: 3 }, (n) => n > 2),\n   *   [{ a: 1 }, { b: 3 }]\n   * )\n   * ```\n   *\n   * @category filtering\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (a: A, key: K) => boolean): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>]\n} = dual(\n  2,\n  <K extends string, A>(\n    self: ReadonlyRecord<K, A>,\n    predicate: (a: A, key: K) => boolean\n  ): [excluded: Record<ReadonlyRecord.NonLiteralKey<K>, A>, satisfying: Record<ReadonlyRecord.NonLiteralKey<K>, A>] => {\n    const left: Record<string, A> = empty()\n    const right: Record<string, A> = empty()\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        right[key] = self[key]\n      } else {\n        left[key] = self[key]\n      }\n    }\n    return [left, right]\n  }\n)\n\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @since 2.0.0\n */\nexport const keys = <K extends string | symbol, A>(self: ReadonlyRecord<K, A>): Array<K & string> =>\n  Object.keys(self) as Array<K & string>\n\n/**\n * Retrieve the values of a given record as an array.\n *\n * @since 2.0.0\n */\nexport const values = <K extends string, A>(self: ReadonlyRecord<K, A>): Array<A> => collect(self, (_, a) => a)\n\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n * ```\n *\n * @since 2.0.0\n */\nexport const set: {\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, K1 extends K | ((string | symbol) & {}), B>(key: K1, value: B): <A>(self: ReadonlyRecord<K, A>) => Record<K | K1, A | B>\n  /**\n   * Add a new key-value pair or update an existing key's value in a record.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { set } from \"effect/Record\"\n   *\n   * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n   * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(self: ReadonlyRecord<K, A>, key: K1, value: B): Record<K | K1, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, K1 extends K | ((string | symbol) & {}), B>(\n    self: ReadonlyRecord<K, A>,\n    key: K1,\n    value: B\n  ): Record<K | K1, A | B> => {\n    return { ...self, [key]: value } as any\n  }\n)\n\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @example\n * ```ts\n * import * as assert from \"node:assert\"\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n * ```\n *\n * @since 2.0.0\n */\nexport const replace: {\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, B>(key: NoInfer<K>, value: B): <A>(self: ReadonlyRecord<K, A>) => Record<K, A | B>\n  /**\n   * Replace a key's value in a record and return the updated record.\n   * If the key does not exist in the record, a copy of the original record is returned.\n   *\n   * @example\n   * ```ts\n   * import * as assert from \"node:assert\"\n   * import { Record } from \"effect\"\n   *\n   * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n   * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n   * ```\n   *\n   * @since 2.0.0\n   */\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B>\n} = dual(\n  3,\n  <K extends string | symbol, A, B>(self: ReadonlyRecord<K, A>, key: NoInfer<K>, value: B): Record<K, A | B> => {\n    if (has(self, key)) {\n      return { ...self, [key]: value }\n    }\n    return { ...self }\n  }\n)\n\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @since 2.0.0\n */\nexport const isSubrecordBy = <A>(equivalence: Equivalence<A>): {\n  <K extends string>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} =>\n  dual(2, <K extends string>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean => {\n    for (const key of keys(self)) {\n      if (!has(that, key) || !equivalence(self[key], that[key])) {\n        return false\n      }\n    }\n    return true\n  })\n\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @since 2.0.0\n */\nexport const isSubrecord: {\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(that: ReadonlyRecord<K, A>): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n   * This comparison uses default equality checks (`Equal.equivalence()`).\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, that: ReadonlyRecord<K, A>): boolean\n} = isSubrecordBy(Equal.equivalence())\n\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce: {\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <Z, V, K extends string>(zero: Z, f: (accumulator: Z, value: V, key: K) => Z): (self: ReadonlyRecord<K, V>) => Z\n  /**\n   * Reduce a record to a single value by combining its entries with a specified function.\n   *\n   * @category folding\n   * @since 2.0.0\n   */\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z\n} = dual(\n  3,\n  <K extends string, V, Z>(\n    self: ReadonlyRecord<K, V>,\n    zero: Z,\n    f: (accumulator: Z, value: V, key: K) => Z\n  ): Z => {\n    let out: Z = zero\n    for (const key of keys(self)) {\n      out = f(out, self[key], key)\n    }\n    return out\n  }\n)\n\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @since 2.0.0\n */\nexport const every: {\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(refinement: (value: A, key: K) => value is B): (self: ReadonlyRecord<K, A>) => self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string, B extends A>(self: ReadonlyRecord<K, A>, refinement: (value: A, key: K) => value is B): self is ReadonlyRecord<K, B>\n  /**\n   * Check if all entries in a record meet a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <A, K extends string, B extends A>(\n    self: ReadonlyRecord<K, A>,\n    refinement: (value: A, key: K) => value is B\n  ): self is ReadonlyRecord<K, B> => {\n    for (const key of keys(self)) {\n      if (!refinement(self[key], key)) {\n        return false\n      }\n    }\n    return true\n  }\n)\n\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @since 2.0.0\n */\nexport const some: {\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <A, K extends string>(predicate: (value: A, key: K) => boolean): (self: ReadonlyRecord<K, A>) => boolean\n  /**\n   * Check if any entry in a record meets a specific condition.\n   *\n   * @since 2.0.0\n   */\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean\n} = dual(\n  2,\n  <K extends string, A>(self: ReadonlyRecord<K, A>, predicate: (value: A, key: K) => boolean): boolean => {\n    for (const key of keys(self)) {\n      if (predicate(self[key], key)) {\n        return true\n      }\n    }\n    return false\n  }\n)\n\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @since 2.0.0\n */\nexport const union: {\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(that: ReadonlyRecord<K1, B>, combine: (selfValue: A, thatValue: B) => C): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B | C>\n  /**\n   * Merge two records, preserving entries that exist in either of the records.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<K0 | K1, A | B | C> => {\n    if (isEmptyRecord(self)) {\n      return { ...that } as any\n    }\n    if (isEmptyRecord(that)) {\n      return { ...self } as any\n    }\n    const out: Record<string, A | B | C> = empty()\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      } else {\n        out[key] = self[key]\n      }\n    }\n    for (const key of keys(that)) {\n      if (!has(out, key)) {\n        out[key] = that[key]\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @since 2.0.0\n */\nexport const intersection: {\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, A, B, C>(that: ReadonlyRecord<K1, B>, combine: (selfValue: A, thatValue: B) => C): <K0 extends string>(self: ReadonlyRecord<K0, A>) => Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n  /**\n   * Merge two records, retaining only the entries that exist in both records.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C>\n} = dual(\n  3,\n  <K0 extends string, A, K1 extends string, B, C>(\n    self: ReadonlyRecord<K0, A>,\n    that: ReadonlyRecord<K1, B>,\n    combine: (selfValue: A, thatValue: B) => C\n  ): Record<ReadonlyRecord.IntersectKeys<K0, K1>, C> => {\n    const out: Record<string, C> = empty()\n    if (isEmptyRecord(self) || isEmptyRecord(that)) {\n      return out\n    }\n    for (const key of keys(self)) {\n      if (has(that, key as any)) {\n        out[key] = combine(self[key], that[key as unknown as K1])\n      }\n    }\n    return out\n  }\n)\n\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @since 2.0.0\n */\nexport const difference: {\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @since 2.0.0\n   */\n  <K1 extends string, B>(that: ReadonlyRecord<K1, B>): <K0 extends string, A>(self: ReadonlyRecord<K0, A>) => Record<K0 | K1, A | B>\n  /**\n   * Merge two records, preserving only the entries that are unique to each record.\n   *\n   * @since 2.0.0\n   */\n  <K0 extends string, A, K1 extends string, B>(self: ReadonlyRecord<K0, A>, that: ReadonlyRecord<K1, B>): Record<K0 | K1, A | B>\n} = dual(2, <K0 extends string, A, K1 extends string, B>(\n  self: ReadonlyRecord<K0, A>,\n  that: ReadonlyRecord<K1, B>\n): Record<K0 | K1, A | B> => {\n  if (isEmptyRecord(self)) {\n    return { ...that } as any\n  }\n  if (isEmptyRecord(that)) {\n    return { ...self } as any\n  }\n  const out = <Record<K0 | K1, A | B>> {}\n  for (const key of keys(self)) {\n    if (!has(that, key as any)) {\n      out[key] = self[key]\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(self, key as any)) {\n      out[key] = that[key]\n    }\n  }\n  return out\n})\n\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence = <K extends string, A>(\n  equivalence: Equivalence<A>\n): Equivalence<ReadonlyRecord<K, A>> => {\n  const is = isSubrecordBy(equivalence)\n  return (self, that) => is(self, that) && is(that, self)\n}\n\n/**\n * Create a non-empty record from a single element.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const singleton = <K extends string | symbol, A>(key: K, value: A): Record<K, A> => ({\n  [key]: value\n} as any)\n\n/**\n * Returns the first entry that satisfies the specified\n * predicate, or `None` if no such entry exists.\n *\n * @example\n * ```ts\n * import { Record, Option } from \"effect\"\n *\n * const record = { a: 1, b: 2, c: 3 }\n * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n * console.log(result) // Option.Some([\"c\", 3])\n * ```\n *\n * @category elements\n * @since 3.14.0\n */\nexport const findFirst: {\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V, V2 extends V>(refinement: (value: NoInfer<V>, key: NoInfer<K>) => value is V2): (self: ReadonlyRecord<K, V>) => Option.Option<[K, V2]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V>(predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean): (self: ReadonlyRecord<K, V>) => Option.Option<[K, V]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V, V2 extends V>(\n    self: ReadonlyRecord<K, V>,\n    refinement: (value: NoInfer<V>, key: NoInfer<K>) => value is V2\n  ): Option.Option<[K, V2]>\n  /**\n   * Returns the first entry that satisfies the specified\n   * predicate, or `None` if no such entry exists.\n   *\n   * @example\n   * ```ts\n   * import { Record, Option } from \"effect\"\n   *\n   * const record = { a: 1, b: 2, c: 3 }\n   * const result = Record.findFirst(record, (value, key) => value > 1 && key !== \"b\")\n   * console.log(result) // Option.Some([\"c\", 3])\n   * ```\n   *\n   * @category elements\n   * @since 3.14.0\n   */\n  <K extends string | symbol, V>(\n    self: ReadonlyRecord<K, V>,\n    predicate: (value: NoInfer<V>, key: NoInfer<K>) => boolean\n  ): Option.Option<[K, V]>\n} = dual(\n  2,\n  <K extends string | symbol, V>(self: ReadonlyRecord<K, V>, f: (value: V, key: K) => boolean) => {\n    const k = keys(self)\n    for (let i = 0; i < k.length; i++) {\n      const key = k[i]\n      if (f(self[key], key)) {\n        return Option.some([key, self[key]])\n      }\n    }\n    return Option.none()\n  }\n)\n"],"names":["isFunction","input","dual","arity","body","arguments","apply","self","RangeError","a","b","length","c","d","e","args","identity","satisfies","unsafeCoerce","constant","value","constTrue","constFalse","constNull","constUndefined","undefined","constVoid","flip","f","compose","ab","bc","absurd","_","Error","tupled","untupled","pipe","cd","de","ef","fg","gh","hi","ret","i","flow","ij","hole","SK","globalValue","getBugErrorMessage","message","symbol","Symbol","for","randomHashCache","equals","WeakMap","compareBoth","globalStoreId","that","globalStore","selfType","hash","isFunction_","enabled","GenKindTypeId","isEqual","number","Hash","string","toString","isGenKind","structuralRegionState","String","u","isObject","tester","Date","toISOString","URL","GenKindImpl","href","constructor","Array","isArray","every","v","id","compute","Object","prototype","getPrototypeOf","keysSelf","keys","globalThis","keysThat","isHash","key","_F","mapInput","set","random","get","_O","has","Math","floor","Number","MAX_SAFE_INTEGER","hasProperty","_E","equivalence","combine","isTupleOf","n","iterator","optimize","SingleShotGen","called","Infinity","h","next","done","isTupleOfAtLeast","str","return","charCodeAt","throw","structureKeys","o","isTruthy","structure","makeGenKind","kind","array","arr","adapter","x","defaultIncHi","defaultIncLo","MUL_HI","cached","MUL_LO","isSet","Set","BIT_53","BIT_27","defineProperty","enumerable","PCGRandom","_state","seedHi","seedLo","incHi","incLo","isNullable","isMap","Map","Int32Array","_next","add64","isString","getState","setState","state","isNumber","integer","max","round","lo","isBoolean","oldHi","oldLo","mul64","xsHi","xsLo","xorshifted","rot","rot2","isBigInt","out","aHi","aLo","bHi","bLo","c1","c0","isSymbol","imul","isPropertyKey","YieldWrapTypeId","YieldWrap","yieldWrapGet","isNotUndefined","structuralRegion","current","currentTester","isNull","standard","effect_internal_function","forced","isNotOptimizedAway","stack","includes","isNotNull","internalCall","genConstructor","isGeneratorFunction","isNever","isUnknown","isRecordOrArray","property","isTagged","tag","isNotNullable","isError","isUint8Array","Uint8Array","isDate","isIterable","isRecord","isReadonlyRecord","isPromise","then","catch","isPromiseLike","isRegExp","RegExp","product","all","collection","as","collectionIndex","p","productMany","rest","head","tail","tuple","elements","struct","fields","not","or","and","xor","eqv","implies","antecedent","consequent","nor","nand","some","make","isEquivalent","isStrictEquivalent","y","strict","boolean","bigint","combineMany","isAlwaysEquivalent","_x","_y","combineAll","date","getTime","xa","xb","ya","yb","len","min","collectionLength","slice","item","isEq","isNonEmptyArray","NodeInspectSymbol","toJSON","map","redact","format","JSON","stringify","BaseProto","Class","toStringUnknown","whitespace","stringifyCircular","obj","cache","retVal","_key","push","redactableState","fiberRefs","isRedactable","symbolRedactable","withRedactableContext","context","prev","moduleVersion","Equal","getCurrentVersion","pipeArguments","setCurrentVersion","version","OP_COMMIT","OpCodes","OP_FAILURE","StreamTypeId","SinkTypeId","effectVariance","_R","_A","_V","sinkVariance","_In","OP_REVERT_FLAGS","_L","channelVariance","_Env","_InErr","_InElem","Prototype","_InDone","_OutErr","Base","_OutElem","PipeableBase","_OutDone","EffectPrototype","EffectTypeId","klass","ChannelTypeId","StructuralPrototype","selfKeys","thatKeys","CommitPrototype","_op","StructuralCommitPrototype","StructuralBase","TypeId","CommonProto","SomeProto","assign","create","_tag","isOption","isSome","_id","NoneHash","NoneProto","isNone","fa","none","let_","name","bindTo","bind","flatMap","option","RightProto","isEither","isRight","right","LeftProto","isLeft","left","ma","getLeft","getRight","fromOption","onNone","Equivalence","doNotation","either","option_","Gen","void_","void","fromNullable","onNullable","try_","evaluate","try","getEquivalence","mapBoth","onLeft","onRight","mapLeft","match","liftPredicate","predicate","orLeftWith","filterOrLeft","r","merge","getOrElse","getOrNull","getOrUndefined","getOrThrowWith","getOrThrow","orElse","andThen","zipWith","r2","ap","gen","Do","let","transposeOption","transposeMapOption","compare","reverse","O","a1","a2","empty","b1","b2","aLen","bLen","onSome","lessThan","greaterThan","lessThanOrEqualTo","greaterThanOrEqualTo","toRefinement","clamp","options","maximum","minimum","fromIterable","orElseSome","orElseEither","firstSomeOf","nullableValue","liftNullable","liftThrowable","asVoid","flatMapNullable","flatten","zipRight","zipLeft","tap","composeK","afb","bfc","reduceCompact","oa","toArray","partitionMap","filterMap","filter","getOrder","order","lift2","containsWith","_equivalence","contains","exists","refinement","mergeWith","o1","o2","makeBy","getFirst","getSecond","range","start","end","fn","element","onFirst","onSecond","replicate","fromRecord","mapFirst","hasOwnProperty","call","prepend","prependAll","mapSecond","appendAll","append","last","iterA","doneA","iterB","appendElement","at","index","scan","acc","result","isEmpty","size","count","unsafeHead","take","takeWhile","drop","findFirst","findLast","zip","Tuple","selfIterator","thatIterator","selfResult","thatResult","intersperse","middle","emitted","chunksOf","safeN","chunk","groupWith","nextResult","group","groupBy","k","constEmpty","constEmptyIterator","of","outerIterator","innerIterator","filterMapWhile","getSomes","getLefts","E","getRights","unfold","forEach","reduce","dedupeAdjacentWith","first","dedupeAdjacent","cartesianWith","cartesian","countBy","readonlyArray","Option","Order","concat","toUpperCase","toLowerCase","capitalize","_Iterable","uncapitalize","replace","searchValue","replaceValue","trim","trimStart","trimEnd","isNonEmpty","negate","multiply","split","separator","searchString","position","startsWith","endsWith","sum","charCode","isNaN","substring","charAt","sumAll","codePointAt","indexOf","lastIndexOf","localeCompare","locales","sign","subtract","minuend","subtrahend","regexp","matchAll","normalize","form","padEnd","maxLength","fillString","padStart","multiplier","multiplicand","repeat","replaceAll","search","toLocaleLowerCase","locale","multiplyAll","toLocaleUpperCase","takeLeft","takeRight","CR","LF","linesIterator","linesSeparated","divide","dividend","divisor","linesWithSeparators","s","stripMarginWith","marginChar","line","stripped","stripMargin","snakeToCamel","snakeToPascal","snakeToKebab","camelToSnake","unsafeDivide","pascalToSnake","kebabToSnake","LinesIterator","increment","isLineBreak","char","decrement","isLineBreak2","code","char0","char1","between","remainder","selfDecCount","divisorDecCount","decCount","selfInt","parseInt","toFixed","divisorInt","pow","nextPow2","nextPow","ceil","log","parse","NaN","precision","factor","internalDoNotation","moduleIterable","Predicate","isEmptyRecord","isEmptyReadonlyRecord","allocate","fromIterableWith","fromIterableBy","items","fromEntries","from","collect","ensure","Record","toEntries","onEmpty","onNonEmpty","isNonEmptyReadonlyArray","matchLeft","headNonEmpty","tailNonEmpty","modify","matchRight","initNonEmpty","lastNonEmpty","modifyOption","replaceOption","remove","pop","scanRight","mapKeys","isEmptyArray","mapEntries","isEmptyReadonlyArray","internalArray","isOutOfBounds","unsafeGet","unprepend","unappend","separate","init","partition","values","spanIndex","isSubrecordBy","zero","span","splitAt","union","dropRight","dropWhile","intersection","findFirstIndex","findLastIndex","is","singleton","findFirstWithIndex","insertAt","splice","removeOption","sort","sortWith","sortBy","orders","sortByAll","bs","unzip","fb","modifyNonEmptyHead","setNonEmptyHead","modifyNonEmptyLast","setNonEmptyLast","rotate","m","abs","copy","splitNonEmptyAt","chop","_n","splitWhere","pad","fill","window","unionWith","dedupe","dedupeWith","intersectionWith","differenceWith","difference","inner","j","Either","reduceRight","liftOption","liftEither","extend","lastA","join","sep","mapAccum","s1"],"mappings":"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","ignoreList":[1,2,3,4,5,6,10,11,12,13,18,19,20,21,22,23,24,25]}