{"version":3,"sources":["turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/ArrayResult.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/apps/web/src/features/visual-effect/examples/helpers.ts","turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/index.ts","turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/BasicRenderers.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/EmojiResult.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/RenderableResult.ts","turbopack:///[project]/apps/web/src/features/visual-effect/components/renderers/TemperatureResult.tsx"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ArrayResult = registerClientReference(\n    function() { throw new Error(\"Attempted to call ArrayResult() from the server but ArrayResult is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/apps/web/src/features/visual-effect/components/renderers/ArrayResult.tsx\",\n    \"ArrayResult\",\n);\n","import { Effect } from \"effect\";\nimport { EmojiResult, TemperatureResult } from \"../components/renderers\";\n\n/**\n * Generates a random delay with jitter for realistic network simulation\n * @param baseDelay - The base delay in milliseconds\n * @param jitter - The maximum jitter to add/subtract (default 300ms)\n * @returns A delay between baseDelay - jitter and baseDelay + jitter\n */\nexport function getDelay(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Simulates fetching weather/temperature data with realistic network delay\n * @param baseDelay - Base delay in milliseconds (default 800ms)\n * @param location - Optional location name for the data\n * @returns An Effect that yields a TemperatureResult after a jittered delay\n */\nexport function getWeather(location?: string): Effect.Effect<TemperatureResult, never, never> {\n  return Effect.gen(function* () {\n    // Simulate network delay with jitter\n    const delay = getDelay(500, 900);\n    yield* Effect.sleep(delay);\n\n    const temp = Math.floor(Math.random() * 30) + 60; // 60-90°F\n    return new TemperatureResult(temp, location);\n  });\n}\n\nexport enum Emoji {\n  Achilles = \"🏃‍♂️\",\n  Tortoise = \"🐢\",\n  Dog = \"🐶\",\n  Cat = \"🐱\",\n  Mouse = \"🐭\",\n  Rabbit = \"🐰\",\n  Fox = \"🦊\",\n  Bear = \"🐻\",\n  Panda = \"🐼\",\n  Koala = \"🐨\",\n  Lion = \"🦁\",\n  Tiger = \"🐯\",\n  Elephant = \"🐮\",\n}\n\n/**\n * Simulates fetching data from a CDN, returns a random animal emoji\n */\nexport function loadEmoji(emoji: Emoji) {\n  return Effect.gen(function* () {\n    const delay = getDelay(500, 900);\n    yield* Effect.sleep(delay);\n\n    return new EmojiResult(emoji);\n  });\n}\n\n/**\n * Creates a stateful counter with reset functionality\n * @param initialValue - Initial counter value (default 0)\n * @returns Object with counter, increment, and reset effect\n */\nexport function createCounter(initialValue = 0) {\n  let value = initialValue;\n\n  return {\n    get current() {\n      return value;\n    },\n    increment() {\n      value++;\n    },\n    reset: Effect.sync(() => {\n      value = initialValue;\n    }),\n  };\n}\n","export * from \"./ArrayResult\";\nexport * from \"./BasicRenderers\";\nexport * from \"./EmojiResult\";\nexport * from \"./RenderableResult\";\nexport * from \"./TemperatureResult\";\n","import type { RenderableResult } from \"./RenderableResult\";\n\n// Simple number renderer\nexport class NumberResult implements RenderableResult {\n  constructor(public value: number) {}\n\n  render() {\n    return <div className=\"text-white font-mono text-xl\">{this.value}</div>;\n  }\n}\n\n// Simple string renderer\nexport class StringResult implements RenderableResult {\n  constructor(public value: string) {}\n\n  render() {\n    return <div className=\"text-white font-mono text-xl\">{this.value}</div>;\n  }\n}\n\n// Boolean renderer\nexport class BooleanResult implements RenderableResult {\n  constructor(public value: boolean) {}\n\n  render() {\n    return <div className=\"text-white font-mono\">{this.value ? \"true\" : \"false\"}</div>;\n  }\n}\n\n// Object/JSON renderer\nexport class ObjectResult implements RenderableResult {\n  constructor(public value: unknown) {}\n\n  render() {\n    return <div className=\"text-white font-mono text-xs\">{JSON.stringify(this.value, null, 2)}</div>;\n  }\n}\n","import type { RenderableResult } from \"./RenderableResult\";\n\nexport class EmojiResult implements RenderableResult {\n  constructor(public emoji: string) {}\n\n  render() {\n    return (\n      <span key=\"emoji\" className=\"text-4xl\">\n        {this.emoji}\n      </span>\n    );\n  }\n}\n","import type { ReactNode } from \"react\";\n\n// Base interface for renderable results\nexport interface RenderableResult {\n  render(): ReactNode;\n}\n\nexport interface RenderOptions {\n  dimensions: {\n    size: number;\n  };\n}\n\n// Type guard to check if a result is renderable\nexport function isRenderableResult(value: unknown): value is RenderableResult {\n  return (\n    value !== null &&\n    typeof value === \"object\" &&\n    \"render\" in value &&\n    typeof (value as RenderableResult).render === \"function\"\n  );\n}\n\n// Helper function to render any result\nexport function renderResult(result: unknown): ReactNode {\n  if (isRenderableResult(result)) {\n    return result.render();\n  }\n\n  // Default string rendering for non-renderable results\n  return String(result);\n}\n","import type { RenderableResult } from \"./RenderableResult\";\n\nexport class TemperatureResult implements RenderableResult {\n  constructor(\n    public value: number,\n    public location?: string\n  ) {}\n\n  render() {\n    return (\n      <div key=\"temp\" className=\"text-xl\">\n        {this.value}°\n      </div>\n    );\n  }\n}\n\nexport class TemperatureArrayResult implements RenderableResult {\n  constructor(public values: Array<number>) {}\n\n  render() {\n    return (\n      <div key=\"array\" className=\"text-xl\">\n        [{this.values.map((t) => `${t}°`).join(\", \")}]\n      </div>\n    );\n  }\n}\n"],"names":[],"mappings":"uCAEO,IAAM,EAAc,CAAA,EAAA,AAD3B,EAAA,CAAA,CAAA,QAC2B,uBAAA,AAAuB,EAC9C,WAAa,MAAM,AAAI,MAAM,oOAAsO,EACnQ,yGACA,iEAHG,IAAM,EAAc,CAAA,EAD3B,AAC2B,EAD3B,CAAA,CAAA,QAC2B,uBAAuB,AAAvB,EACvB,WAAa,MAAM,AAAI,MAAM,oOAAsO,EACnQ,qFACA,8HCLJ,IA8BY,EA9BZ,EAAA,EAAA,CAAA,CAAA,QCAA,EAAA,CAAA,CAAA,yBEEO,OAAM,OACX,aAAmB,CAAa,CAAE,MAAf,KAAA,CAAA,CAAgB,CAEnC,QAAS,CACP,MACE,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAiB,UAAU,oBACzB,IAAI,CAAC,KAAK,EADH,QAId,CACF,CEVO,MAAM,gBACX,aACS,CAAa,CACb,CAAiB,CACxB,MAFO,KAAA,CAAA,OACA,QAAA,CAAA,CACN,CAEH,QAAS,CACP,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAe,UAAU,oBACvB,IAAI,CAAC,KAAK,CAAC,MADL,OAIb,CACF,CLNO,SAAS,EAAS,CAAW,CAAE,CAAW,EAC/C,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,IAAM,CAAD,CAAO,GAAM,CAAC,EAAK,CACvD,CAQO,SAAS,EAAW,CAAiB,EAC1C,OAAO,EAAA,MAAM,CAAC,GAAG,CAAC,YAEhB,IAAM,EAAQ,EAAS,IAAK,KAI5B,OAHA,MAAO,EAAA,MAAM,CAAC,KAAK,CAAC,GAGb,IAAI,EADE,KAAK,KAAK,CAAiB,GAAhB,EACK,GADA,MAAM,IAAW,GACX,CADe,CAEpD,EACF,CAEO,IAAK,EALoD,oLAKpD,GAmBL,SAAS,EAAU,CAAY,EACpC,OAAO,EAAA,MAAM,CAAC,GAAG,CAAC,YAChB,IAAM,EAAQ,EAAS,IAAK,KAG5B,OAFA,MAAO,EAAA,MAAM,CAAC,KAAK,CAAC,GAEb,IAAI,EAAY,EACzB,EACF,CAOO,SAAS,EAAc,EAAe,CAAC,EAC5C,IAAI,EAAQ,EAEZ,MAAO,CACL,IAAI,SAAU,CACZ,OAAO,CACT,EACA,YACE,GACF,EACA,MAAO,EAAA,MAAM,CAAC,IAAI,CAAC,KACjB,EAAQ,CACV,EACF,CACF","ignoreList":[0]}