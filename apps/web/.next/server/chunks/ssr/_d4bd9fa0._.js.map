{"version":3,"sources":["turbopack:///[project]/apps/web/src/features/visual-effect/examples/helpers.ts","turbopack:///[project]/apps/web/src/features/visual-effect/VisualScope.ts","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-succeed.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-die.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-fail.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-sync.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-promise.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-race.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-sleep.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-timeout.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-partition.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-eventually.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-foreach.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-orelse.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-repeat-spaced.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-raceall.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-repeat-while-output.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-retry-exponential.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-retry-recurs.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-all-short-circuit.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/ref-make.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/ref-update-and-get.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-acquire-release.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-add-finalizer.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-all.tsx","turbopack:///[project]/apps/web/src/features/visual-effect/examples/effect-validate.tsx"],"sourcesContent":["import { Effect } from \"effect\";\nimport { EmojiResult, TemperatureResult } from \"../components/renderers\";\n\n/**\n * Generates a random delay with jitter for realistic network simulation\n * @param baseDelay - The base delay in milliseconds\n * @param jitter - The maximum jitter to add/subtract (default 300ms)\n * @returns A delay between baseDelay - jitter and baseDelay + jitter\n */\nexport function getDelay(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Simulates fetching weather/temperature data with realistic network delay\n * @param baseDelay - Base delay in milliseconds (default 800ms)\n * @param location - Optional location name for the data\n * @returns An Effect that yields a TemperatureResult after a jittered delay\n */\nexport function getWeather(location?: string): Effect.Effect<TemperatureResult, never, never> {\n  return Effect.gen(function* () {\n    // Simulate network delay with jitter\n    const delay = getDelay(500, 900);\n    yield* Effect.sleep(delay);\n\n    const temp = Math.floor(Math.random() * 30) + 60; // 60-90°F\n    return new TemperatureResult(temp, location);\n  });\n}\n\nexport enum Emoji {\n  Achilles = \"🏃‍♂️\",\n  Tortoise = \"🐢\",\n  Dog = \"🐶\",\n  Cat = \"🐱\",\n  Mouse = \"🐭\",\n  Rabbit = \"🐰\",\n  Fox = \"🦊\",\n  Bear = \"🐻\",\n  Panda = \"🐼\",\n  Koala = \"🐨\",\n  Lion = \"🦁\",\n  Tiger = \"🐯\",\n  Elephant = \"🐮\",\n}\n\n/**\n * Simulates fetching data from a CDN, returns a random animal emoji\n */\nexport function loadEmoji(emoji: Emoji) {\n  return Effect.gen(function* () {\n    const delay = getDelay(500, 900);\n    yield* Effect.sleep(delay);\n\n    return new EmojiResult(emoji);\n  });\n}\n\n/**\n * Creates a stateful counter with reset functionality\n * @param initialValue - Initial counter value (default 0)\n * @returns Object with counter, increment, and reset effect\n */\nexport function createCounter(initialValue = 0) {\n  let value = initialValue;\n\n  return {\n    get current() {\n      return value;\n    },\n    increment() {\n      value++;\n    },\n    reset: Effect.sync(() => {\n      value = initialValue;\n    }),\n  };\n}\n","import { taskSounds } from \"./sounds/TaskSounds\";\n\nexport type ScopeState = \"idle\" | \"acquiring\" | \"active\" | \"releasing\" | \"released\";\n\nexport type FinalizerState = \"pending\" | \"running\" | \"completed\";\n\nexport interface Finalizer {\n  id: string;\n  name: string;\n  timestamp: number;\n  state: FinalizerState;\n}\n\nexport class VisualScope {\n  id: string;\n  state: ScopeState = \"idle\";\n  finalizers: Array<Finalizer> = [];\n  private subscribers: Set<() => void> = new Set();\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  subscribe(callback: () => void): () => void {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  private notify() {\n    this.subscribers.forEach((callback) => callback());\n  }\n\n  setState(newState: ScopeState) {\n    if (this.state === newState) return;\n\n    this.state = newState;\n    this.notify();\n  }\n\n  addFinalizer(name: string): string {\n    const id = `finalizer-${name}`;\n    const finalizer: Finalizer = {\n      id,\n      name,\n      timestamp: Date.now(),\n      state: \"pending\",\n    };\n\n    this.finalizers.push(finalizer);\n    taskSounds.playFinalizerCreated();\n\n    this.notify();\n    return id;\n  }\n\n  async runFinalizers() {\n    this.setState(\"releasing\");\n\n    // Run finalizers in reverse order (LIFO)\n    const finalizersToRun = [...this.finalizers].reverse();\n\n    for (const finalizer of finalizersToRun) {\n      // Abort if scope was reset while releasing\n      if (this.state !== \"releasing\") {\n        return;\n      }\n\n      finalizer.state = \"running\";\n      taskSounds.playFinalizerRunning();\n      this.notify();\n\n      // Simulate finalizer execution\n      await new Promise((resolve) => setTimeout(resolve, 800));\n\n      // If scope was reset during the simulated execution, abort further processing\n      if (this.state !== \"releasing\") {\n        return;\n      }\n\n      finalizer.state = \"completed\";\n      taskSounds.playFinalizerCompleted();\n      this.notify();\n    }\n\n    // Only mark as released if we weren't reset in the meantime\n    if (this.state === \"releasing\") {\n      this.setState(\"released\");\n    }\n  }\n\n  reset() {\n    this.state = \"idle\";\n    this.finalizers = [];\n    this.notify();\n  }\n}\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { NumberResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectSucceedExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const successTask = useMemo(\n    () => visualEffect(\"value\", Effect.succeed(42).pipe(Effect.map((value) => new NumberResult(value)))),\n    []\n  );\n\n  const codeSnippet = `const value = Effect.succeed(42)`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      value: {\n        text: \"Effect.succeed(42)\",\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [successTask], [successTask])}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectSucceedExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { useVisualEffectState, visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectDieExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const deathTask = useMemo(() => visualEffect(\"death\", Effect.die(new Error(\"404: Will to live not found\"))), []);\n\n  const deathState = useVisualEffectState(deathTask);\n\n  const codeSnippet = `const death = Effect.die(new Error(\"FATAL: System corrupted\"))`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      death: {\n        text: 'Effect.die(new Error(\"FATAL: System corrupted\"))',\n      },\n    }),\n    []\n  );\n\n  // Start with normal mode, transition to dark when task dies\n  const isDarkMode = deathState.type === \"death\";\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [deathTask], [deathTask])}\n      effectHighlightMap={taskHighlightMap}\n      isDarkMode={isDarkMode}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectDieExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectFailExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const failTask = useMemo(() => visualEffect(\"error\", Effect.fail(new Error(\"Kaboom!\"))), []);\n\n  const codeSnippet = `const error = Effect.fail(\"Kaboom!\")`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      error: {\n        text: 'Effect.fail(\"Kaboom!\")',\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [failTask], [failTask])}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectFailExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { NumberResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectSyncExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const syncTask = useMemo(\n    () => visualEffect(\"random\", Effect.sync(() => Math.random()).pipe(Effect.map((value) => new NumberResult(value)))),\n    []\n  );\n\n  const codeSnippet = `const random = Effect.sync(() => Math.random())`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      random: {\n        text: \"Effect.sync(() => Math.random())\",\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [syncTask], [syncTask])}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectSyncExample;\n","\"use client\";\n\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getWeather } from \"./helpers\";\n\nexport function EffectPromiseExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Simulate a weather API call with built-in jittered delay\n  const promiseTask = useMemo(() => visualEffect(\"london\", getWeather(\"London\")), []);\n\n  const codeSnippet = `function readTemperature(location) {\n  return Effect.promise(() =>\n    fetch(\\`slow.weather.com/api/\\${location}\\`)\n     .then(r => r.json())\n  )\n}\n\nconst london = readTemperature(\"London\")\n`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      london: {\n        text: 'readTemperature(\"London\")',\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [promiseTask], [promiseTask])}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectPromiseExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { Emoji, loadEmoji } from \"./helpers\";\n\nexport function EffectRaceExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Create tasks with variable delays for realistic racing\n  const tortoise = useMemo(() => visualEffect(\"tortoise\", loadEmoji(Emoji.Tortoise)), []);\n  const achilles = useMemo(() => visualEffect(\"achilles\", loadEmoji(Emoji.Achilles)), []);\n\n  // Create race task\n  const raceResult = useMemo(() => {\n    // Race Effects - returns the first one to complete\n    const raceEffect = Effect.race(tortoise.effect, achilles.effect);\n    return new VisualEffect(\"winner\", raceEffect);\n  }, [tortoise, achilles]);\n\n  // Memoize tasks array\n  const tasks = useMemo(() => [tortoise, achilles], [tortoise, achilles]);\n\n  // Code snippet\n  const codeSnippet = `const tortoise = runFast(\"tortoise\")\nconst achilles = runFast(\"achilles\")\n\nconst winner = Effect.race(tortoise, achilles)`;\n\n  // Mapping between task name and the text to highlight\n  const taskHighlightMap = useMemo(\n    () => ({\n      tortoise: {\n        text: 'runFast(\"tortoise\")',\n      },\n      achilles: {\n        text: 'runFast(\"achilles\")',\n      },\n      winner: {\n        text: \"Effect.race(tortoise, achilles)\",\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={tasks}\n      resultEffect={raceResult}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRaceExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { notify, visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectSleepExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const sleepTask = useMemo(\n    () =>\n      visualEffect(\n        \"sleep\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(\"1 second\");\n\n          // Show sleep notification during the main sleep\n          yield* notify(\"😴\", {\n            duration: 2000,\n          });\n\n          yield* Effect.sleep(\"2 seconds\");\n\n          return \"Refreshed!\";\n        })\n      ),\n    []\n  );\n\n  // Simplified code snippet without visualization implementation details\n  const codeSnippet = `const sleepEffect = Effect.gen(function* () {\n  yield* Effect.sleep(\"3 seconds\");\n  return \"Refreshed!\";\n});`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      sleep: {\n        text: 'Effect.sleep(\"3 seconds\")',\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [sleepTask], [sleepTask])}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectSleepExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo, useRef } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getDelay } from \"./helpers\";\n\nconst failureMessages = [\"TOO SLOW!\", \"SPOILED!\", \"STARVED TO DEATH!\", \"IT'S COLD!\"];\n\nexport function EffectTimeoutExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const attemptRef = useRef(0);\n\n  const pizza = useMemo(\n    () =>\n      visualEffect(\n        \"pizza\",\n        Effect.gen(function* () {\n          const attempt = attemptRef.current;\n          attemptRef.current++;\n\n          // First attempt always times out, second attempt succeeds\n          const isFirstAttempt = attempt % 2 === 0;\n          const delay = isFirstAttempt\n            ? getDelay(1500, 2000) // Will timeout (longer than 1 second)\n            : getDelay(400, 700); // Will succeed (shorter than 1 second)\n\n          yield* Effect.sleep(delay);\n\n          return new EmojiResult(\"🍕\");\n        })\n      ),\n    []\n  );\n\n  const timeoutTask = useMemo(() => {\n    const timeout = pizza.effect.pipe(\n      Effect.timeout(\"1 second\"),\n      Effect.orElseFail(() => failureMessages[attemptRef.current % failureMessages.length])\n    );\n\n    return visualEffect(\"result\", timeout, true);\n  }, [pizza]);\n\n  const codeSnippet = `\nconst pizza = orderDelivery();\nconst result = Effect.timeout(pizza, \"1 second\");`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      pizza: { text: \"orderDelivery()\" },\n      result: { text: 'Effect.timeout(pizza, \"1 second\")' },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [pizza], [pizza])}\n      resultEffect={timeoutTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectTimeoutExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\n\nexport function EffectPartitionLickTestExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const performLick = () => {\n    return Effect.gen(function* () {\n      const sleep = 500 + Math.random() * 500; // 500-1000ms\n      yield* Effect.sleep(sleep);\n\n      // Random chance to return lick emoji or demonic error\n      if (Math.random() < 0.5) {\n        const lickEmojis = [\"👅\", \"😋\", \"👄\", \"😛\"];\n        const randomLick = lickEmojis[Math.floor(Math.random() * lickEmojis.length)];\n        return new EmojiResult(`${randomLick}`);\n      }\n      return yield* Effect.fail(\"DEMONIC!\");\n    });\n  };\n\n  const iceCream = useMemo(() => visualEffect(\"iceCream\", performLick()), []);\n  const battery = useMemo(() => visualEffect(\"battery\", performLick()), []);\n  const popsicle = useMemo(() => visualEffect(\"popsicle\", performLick()), []);\n  const toad = useMemo(() => visualEffect(\"toad\", performLick()), []);\n  const lollipop = useMemo(() => visualEffect(\"lollipop\", performLick()), []);\n\n  const effects = useMemo(\n    () => [iceCream, battery, popsicle, toad, lollipop],\n    [iceCream, battery, popsicle, toad, lollipop]\n  );\n\n  // Partition task to separate failures from successes\n  const partitionTask = useMemo(() => {\n    const partitionEffect = Effect.partition(effects, (eff) => eff.effect).pipe(\n      Effect.map(([fails, successes]) => new EmojiResult(`👹 ${fails.length} 😇 ${successes.length}`))\n    );\n\n    return new VisualEffect(\"result\", partitionEffect);\n  }, [effects]);\n\n  const codeSnippet = `const result = Effect.partition(\n  [iceCream, battery, popsicle, toad, lollipop],\n  performLick\n).pipe(\n  Effect.map(([fails, successes]) =>\n\t \\`👹 \\${fails.length} 😇 \\${successes.length}\\`\n\t)\n);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      iceCream: { text: \"iceCream\" },\n      battery: { text: \"battery\" },\n      popsicle: { text: \"popsicle\" },\n      toad: { text: \"toad\" },\n      lollipop: { text: \"lollipop\" },\n      result: { text: \"Effect.partition([...])\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={effects}\n      resultEffect={partitionTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectPartitionLickTestExample;\n","\"use client\";\n\nimport { Effect, Schedule } from \"effect\";\nimport { useMemo, useRef } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getDelay } from \"./helpers\";\n\nexport function EffectRetryExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const retryCountRef = useRef(0);\n\n  const swipeCardTask = useMemo(\n    () =>\n      visualEffect(\n        \"swipeCard\",\n        Effect.gen(function* () {\n          const delay = getDelay(200, 400);\n          yield* Effect.sleep(delay);\n\n          // Determine failure based on current retry count\n          const currentRetryCount = retryCountRef.current;\n          const failureThreshold = Math.floor(Math.random() * 4) + 2; // 2-5 failures needed\n          const shouldFail = currentRetryCount < failureThreshold;\n\n          if (shouldFail) {\n            retryCountRef.current += 1;\n            // Randomly select from different error messages\n            const errors = [\"Card Read Error!\", \"Too Fast!\", \"Too Slow!\", \"Overdraft Fee!\", \"Insufficient Funds!\"];\n            const randomError = errors[Math.floor(Math.random() * errors.length)];\n            return yield* Effect.fail(randomError);\n          }\n\n          // Success! Reset the counter and return result\n          retryCountRef.current = 0;\n          return new EmojiResult(\"💰\");\n        })\n      ),\n    [retryCountRef]\n  );\n\n  const retryTask = useMemo(() => {\n    const retry = swipeCardTask.effect.pipe(Effect.retry(Schedule.forever.pipe(Schedule.addDelay(() => \"1 second\"))));\n\n    return visualEffect(\"result\", retry);\n  }, [swipeCardTask]);\n\n  const codeSnippet = `\nconst swipeCard = swipeCard();\nconst result = Effect.eventually(swipeCard);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      swipeCard: { text: \"swipeCard()\" },\n      result: { text: \"Effect.eventually(swipeCard)\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [swipeCardTask], [swipeCardTask])}\n      resultEffect={retryTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRetryExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { TemperatureArrayResult } from \"@/features/visual-effect/components/renderers/TemperatureResult\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getWeather } from \"./helpers\";\n\nconst locations = [\"New York\", \"London\", \"Tokyo\"];\n\nexport function EffectForEachExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Create tasks at the top level\n  const newYorkTask = useMemo(() => visualEffect(\"newYork\", getWeather(\"New York\")), []);\n  const londonTask = useMemo(() => visualEffect(\"london\", getWeather(\"London\")), []);\n  const tokyoTask = useMemo(() => visualEffect(\"tokyo\", getWeather(\"Tokyo\")), []);\n\n  const locationTasks = useMemo(() => [newYorkTask, londonTask, tokyoTask], [newYorkTask, londonTask, tokyoTask]);\n\n  const forEachTask = useMemo(() => {\n    const forEach = Effect.forEach(locations, (_, i) => {\n      const task = locationTasks[i];\n      return task ? task.effect : Effect.fail(\"Task not found\");\n    }).pipe(Effect.map((results) => new TemperatureArrayResult(results.map((r) => r.value))));\n\n    return visualEffect(\"result\", forEach);\n  }, [locationTasks]);\n\n  const codeSnippet = `const locations = [\"New York\", \"London\", \"Tokyo\"];\n\nconst result = Effect.forEach(locations, getWeather);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      newYork: { text: \"New York\" },\n      london: { text: \"London\" },\n      tokyo: { text: \"Tokyo\" },\n      result: { text: \"Effect.forEach(locations, getWeather)\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={locationTasks}\n      resultEffect={forEachTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectForEachExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo, useRef } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getDelay } from \"./helpers\";\n\nexport function EffectOrElseExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const attemptCountRef = useRef(0);\n\n  const shoot = useMemo(\n    () =>\n      visualEffect(\n        \"shoot\",\n        Effect.gen(function* () {\n          const delay = getDelay(300, 600);\n          yield* Effect.sleep(delay);\n\n          const currentAttempt = attemptCountRef.current;\n          attemptCountRef.current++;\n          const cyclePosition = currentAttempt % 3;\n\n          // Cycle: 0 = fail, 1 = succeed, 2 = fail\n          if (cyclePosition === 0 || cyclePosition === 2) {\n            return yield* Effect.fail(\"Out of Ammo!\");\n          }\n          return new EmojiResult(\"🔫\");\n        })\n      ),\n    []\n  );\n\n  const question = useMemo(\n    () =>\n      visualEffect(\n        \"question\",\n        Effect.gen(function* () {\n          const delay = getDelay(400, 700);\n          yield* Effect.sleep(delay);\n\n          const currentAttempt = attemptCountRef.current - 1; // Use -1 because shoot already incremented\n          const cyclePosition = currentAttempt % 3;\n\n          // Fail only on the third attempt of each cycle (position 2)\n          if (cyclePosition === 2) {\n            return yield* Effect.fail(\"Brain Fart!\");\n          }\n          return new EmojiResult(\"💬\");\n        })\n      ),\n    [attemptCountRef]\n  );\n\n  const orElseTask = useMemo(() => {\n    const orElse = Effect.orElse(shoot.effect, () => question.effect);\n    return new VisualEffect(\"result\", orElse);\n  }, [shoot, question]);\n\n  const codeSnippet = `\nconst shoot = shootFirst();\nconst question = askQuestions();\nconst result = Effect.orElse(shoot, () => question);\n  `;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      shoot: { text: \"shootFirst()\" },\n      question: { text: \"askQuestions()\" },\n      result: { text: \"Effect.orElse(shoot, () => question)\" },\n    }),\n    []\n  );\n\n  const tasks = useMemo(() => [shoot, question], [shoot, question]);\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={tasks}\n      resultEffect={orElseTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectOrElseExample;\n","\"use client\";\n\nimport { Effect, Schedule } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { StringResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { createCounter } from \"./helpers\";\n\nconst notificationCount = createCounter(0);\n\nconst notifications = [\n  \"📞 Unknown Caller\",\n  \"📧 Cellphone Bill\",\n  \"🔔 0 New Messages!\",\n  \"💬 We have to talk...\",\n  \"📅 Dinner Cancelled\",\n  \"📰 War!\",\n  \"😴 Nothing...\",\n  \"😴 Still nothing\",\n  \"🕳️ Doomscrolling\",\n  \"🪫 Battery Low\",\n  \"💔 Swiped Left\",\n  \"🏠 Rent Overdue\",\n  \"💸 Account Overdrawn\",\n  \"🚕 Driver Cancelled\",\n  \"🚫 Friend Request Denied\",\n  \"📅 Meeting Moved to 4am\",\n  \"🌧️ Rain All Week\",\n  \"📉 Stocks Down 20%\",\n  \"🥀 Plant Died\",\n];\n\n/**\n * Simulates checking phone notifications - the classic compulsive behavior\n * Returns random notification types with realistic timing\n */\nfunction checkNotifications(): Effect.Effect<StringResult, string, never> {\n  return Effect.gen(function* () {\n    if (notificationCount.current >= notifications.length) {\n      return yield* Effect.fail(\"☠️ Phone Died!\");\n    }\n\n    const notification = notifications[notificationCount.current];\n    notificationCount.increment();\n    yield* Effect.sleep(500);\n\n    return new StringResult(notification!);\n  });\n}\n\nexport function EffectRepeatSpacedExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const baseTask = useMemo(() => visualEffect(\"phone\", checkNotifications()), []);\n\n  const repeatedTask = useMemo(\n    () =>\n      visualEffect(\n        \"checking\",\n        baseTask.effect.pipe(Effect.repeat(Schedule.spaced(\"2 seconds\")), Effect.ensuring(notificationCount.reset))\n      ),\n    [baseTask]\n  );\n\n  const codeSnippet = `const phone = checkNotifications();\nconst checking = Effect.repeat(phone, Schedule.spaced(\"2 seconds\"));`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      phone: { text: \"checkNotifications()\" },\n      checking: { text: 'Effect.repeat(phone, Schedule.spaced(\"2 seconds\"))' },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [baseTask], [baseTask])}\n      resultEffect={repeatedTask}\n      effectHighlightMap={taskHighlightMap}\n      showScheduleTimeline={true}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRepeatSpacedExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { Emoji, loadEmoji } from \"./helpers\";\n\nexport function EffectRaceAllExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Create tasks with variable delays to simulate real CDN conditions\n  const dog = useMemo(() => visualEffect(\"dog\", loadEmoji(Emoji.Dog)), []);\n  const cat = useMemo(() => visualEffect(\"cat\", loadEmoji(Emoji.Cat)), []);\n  const rabbit = useMemo(() => visualEffect(\"rabbit\", loadEmoji(Emoji.Rabbit)), []);\n  const mouse = useMemo(() => visualEffect(\"mouse\", loadEmoji(Emoji.Mouse)), []);\n\n  // Create race task\n  const winner = useMemo(() => {\n    // Race all effects - returns the first one to complete\n    const raceEffect = Effect.raceAll([cat.effect, dog.effect, mouse.effect, rabbit.effect]);\n\n    return new VisualEffect(\"winner\", raceEffect);\n  }, [cat, dog, mouse, rabbit]);\n\n  // Code snippet\n  const codeSnippet = `\nconst cat = runFast(\"cat\")\nconst dog = runFast(\"dog\")\nconst mouse = runFast(\"mouse\")\nconst rabbit = runFast(\"rabbit\")\n\nconst winner = Effect.raceAll([cat, dog, mouse, rabbit])`;\n\n  // Mapping between task name and the text to highlight\n  const taskHighlightMap = useMemo(\n    () => ({\n      cat: {\n        text: 'runFast(\"cat\")',\n      },\n      dog: {\n        text: 'runFast(\"dog\")',\n      },\n      mouse: {\n        text: 'runFast(\"mouse\")',\n      },\n      rabbit: {\n        text: 'runFast(\"rabbit\")',\n      },\n      winner: {\n        text: \"Effect.raceAll([cat, dog, mouse, rabbit])\",\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [cat, dog, mouse, rabbit], [cat, dog, mouse, rabbit])}\n      resultEffect={winner}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRaceAllExample;\n","\"use client\";\n\nimport { Duration, Effect, Schedule } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult, StringResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { createCounter } from \"./helpers\";\n\nconst hotdogCount = createCounter(0);\n\n/**\n * Simulates eating a hotdog in a competitive eating contest\n */\nfunction eatHotdog(): Effect.Effect<EmojiResult, never, never> {\n  return Effect.gen(function* () {\n    hotdogCount.increment();\n    yield* Effect.sleep(400 + Math.random() * 500); // Variable eating speed\n    return new EmojiResult(`${\"🌭\".repeat(hotdogCount.current)}`);\n  });\n}\n\nexport function EffectRepeatWhileOutputExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const baseTask = useMemo(() => visualEffect(\"hotdog\", eatHotdog()), []);\n\n  const repeatedTask = useMemo(\n    () =>\n      visualEffect(\n        \"contest\",\n        baseTask.effect.pipe(\n          Effect.repeat(\n            Schedule.intersect(\n              Schedule.spaced(\"400 millis\"),\n              Schedule.whileOutput(Schedule.elapsed, (elapsed) => Duration.lessThan(elapsed, Duration.seconds(10)))\n            )\n          ),\n          Effect.ensuring(hotdogCount.reset),\n          Effect.map(([result]) => new StringResult(`🤢 ${result.toString()} Hotdogs!`))\n        )\n      ),\n    [baseTask]\n  );\n\n  const codeSnippet = `const hotdog = eatHotdog()\nconst contest = Effect.repeat(hotdog,\n    Schedule.intersect(\n      Schedule.spaced(\"400 millis\"),\n      Schedule.whileOutput(\n        Schedule.elapsed,\n        (elapsed) => Duration.lessThan(elapsed, Duration.seconds(10))\n      )\n    )\n  )\n)`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      hotdog: { text: \"eatHotdog()\" },\n      contest: {\n        text: 'Effect.repeat(hotdog, Schedule.intersect(Schedule.spaced(\"350 millis\"), Schedule.whileOutput(Schedule.elapsed, elapsed => Duration.toMillis(elapsed) < 10000)))',\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [baseTask], [baseTask])}\n      resultEffect={repeatedTask}\n      effectHighlightMap={taskHighlightMap}\n      showScheduleTimeline={true}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRepeatWhileOutputExample;\n","\"use client\";\n\nimport { Effect, Schedule } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { createCounter, getDelay } from \"./helpers\";\n\nconst parkingAttempt = createCounter(0);\n\nconst attempts = [\"😤 Too Close!\", \"😡 Too Far!\", \"🤬 Neutral!\", \"😑 Focus.\"];\n\nfunction attemptParallelPark(): Effect.Effect<void, string, never> {\n  return Effect.gen(function* () {\n    const delay = getDelay(400, 800);\n    yield* Effect.sleep(delay);\n\n    const message = attempts[Math.min(parkingAttempt.current, attempts.length - 1)]!;\n\n    parkingAttempt.increment();\n\n    // Reset counter after giving up\n    if (parkingAttempt.current > attempts.length) {\n      return \"🚗 Parked!\";\n    }\n\n    return yield* Effect.fail(message);\n  });\n}\n\nexport function EffectRetryExponentialExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const baseTask = useMemo(() => visualEffect(\"park\", attemptParallelPark()), []);\n\n  const repeatedTask = useMemo(\n    () =>\n      visualEffect(\n        \"result\",\n        Effect.retry(baseTask.effect, Schedule.exponential(\"700 millis\")).pipe(Effect.ensuring(parkingAttempt.reset))\n      ),\n    [baseTask]\n  );\n\n  const codeSnippet = `const park = attemptParallelPark();\nconst result = Effect.retry(park, Schedule.exponential(\"700 millis\"));`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      park: { text: \"attemptParallelPark()\" },\n      result: { text: 'Effect.retry(park, Schedule.exponential(\"700 millis\"))' },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [baseTask], [baseTask])}\n      resultEffect={repeatedTask}\n      effectHighlightMap={taskHighlightMap}\n      showScheduleTimeline={true}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRetryExponentialExample;\n","\"use client\";\n\nimport { Effect, Schedule } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { StringResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { createCounter } from \"./helpers\";\n\nconst snoozeCount = createCounter(0);\nconst scenarioCount = createCounter(0);\n\nconst snoozeMessages = [\"😴 Snooze #1\", \"😪 Snooze #2\", \"🥱 Snooze #3\", \"😵 Snooze #4\", \"💀 Asleep Forever\"];\n\nfunction hitSnooze(): Effect.Effect<StringResult | undefined, string | undefined, never> {\n  return Effect.gen(function* () {\n    yield* Effect.sleep(500);\n\n    const messageIndex = Math.min(snoozeCount.current, snoozeMessages.length - 1);\n    const message = snoozeMessages[messageIndex];\n    snoozeCount.increment();\n\n    // Cycle through 3 scenarios: Death (0), Wake at Snooze 2 (1), Wake at Snooze 4 (2)\n    const scenario = scenarioCount.current % 3;\n\n    if (scenario === 1 && snoozeCount.current >= 3) {\n      // Scenario 1: Wake up after snooze #2\n      return new StringResult(\"👀 I'M UP!\");\n    }\n    if (scenario === 2 && snoozeCount.current >= 5) {\n      // Scenario 2: Wake up after snooze #4\n      return new StringResult(\"👀 I'M UP!\");\n    }\n\n    // Always fail - either building up to success or going to death\n    return yield* Effect.fail(message);\n  });\n}\n\nconst snoozeSchedule = Schedule.intersect(Schedule.spaced(\"2 seconds\"), Schedule.recurs(4));\n\nexport function EffectRetryRecursExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const baseTask = useMemo(() => visualEffect(\"wakeUp\", hitSnooze()), []);\n\n  const repeatedTask = useMemo(\n    () =>\n      visualEffect(\n        \"result\",\n        baseTask.effect.pipe(\n          Effect.retry(snoozeSchedule),\n          Effect.ensuring(Effect.all([snoozeCount.reset, Effect.sync(() => scenarioCount.increment())]))\n        )\n      ),\n    [baseTask]\n  );\n\n  const codeSnippet = `const wakeUp = attemptToWakeUp();\nconst snoozeSchedule = Schedule.intersect(\n  Schedule.spaced(\"2 seconds\"),\n  Schedule.recurs(4)\n);\nconst result = Effect.retry(wakeUp, snoozeSchedule);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      wakeUp: { text: \"attemptToWakeUp()\" },\n      result: {\n        text: `\n  Effect.retry(wakeUp, snoozeSchedule)`.trim(),\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [baseTask], [baseTask])}\n      resultEffect={repeatedTask}\n      effectHighlightMap={taskHighlightMap}\n      showScheduleTimeline={true}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRetryRecursExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useMemo, useRef } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getDelay } from \"./helpers\";\n\nexport function EffectAllShortCircuitExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Cycle counter to determine which effect should fail\n  const cycleRef = useRef(0);\n\n  // Three bank operations with different delays and cycling failure pattern\n  const balance = useMemo(\n    () =>\n      visualEffect(\n        \"balance\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(400, 800));\n\n          // Fail on cycle 3 (first effect fails)\n          if (cycleRef.current % 4 === 3) {\n            return yield* Effect.fail(\"Account Locked!\");\n          }\n\n          return \"$58\";\n        })\n      ),\n    []\n  );\n\n  const credit = useMemo(\n    () =>\n      visualEffect(\n        \"credit\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(400, 800));\n\n          // Fail on cycle 0 (second effect fails)\n          if (cycleRef.current % 4 === 0) {\n            return yield* Effect.fail(\"Too Low!\");\n          }\n\n          return \"Approved\";\n        })\n      ),\n    []\n  );\n\n  const payment = useMemo(\n    () =>\n      visualEffect(\n        \"payment\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(400, 800));\n\n          // Fail on cycle 1 (third effect fails)\n          if (cycleRef.current % 4 === 1) {\n            return yield* Effect.fail(\"Gateway Error!\");\n          }\n\n          return \"Ka-ching!\";\n        })\n      ),\n    []\n  );\n\n  // Effect.all task that runs sequentially and stops on first failure\n  const bankOperationTask = useMemo(() => {\n    const allOperations = Effect.all([balance.effect, credit.effect, payment.effect]).pipe(\n      Effect.map(() => \"Pizza Acquired!\"),\n      Effect.ensuring(\n        Effect.sync(() => {\n          // Increment cycle counter after each attempt\n          cycleRef.current = (cycleRef.current + 1) % 4;\n        })\n      )\n    );\n\n    return new VisualEffect(\"result\", allOperations);\n  }, [balance, credit, payment]);\n\n  const codeSnippet = `const balance = readAccountBalance();\nconst credit = checkCreditScore();\nconst payment = chargeCreditCard();\n\nconst result = Effect.all([balance, credit, payment]);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      balance: { text: \"readAccountBalance()\" },\n      credit: { text: \"checkCreditScore()\" },\n      payment: { text: \"chargeCreditCard()\" },\n      result: { text: \"Effect.all([balance, credit, payment])\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [balance, credit, payment], [balance, credit, payment])}\n      resultEffect={bankOperationTask}\n      effectHighlightMap={taskHighlightMap}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectAllShortCircuitExample;\n","\"use client\";\n\nimport { Duration, Effect, Ref, Schedule } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult, StringResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { type VisualRef, visualRef } from \"@/features/visual-effect/VisualRef\";\n\nexport function EffectRefExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Create a visual ref for the counter\n  const counterRef = useMemo(() => visualRef(\"counter\", 0), []);\n\n  // Create a task that increments the counter\n  const incrementTask = useMemo(\n    () =>\n      visualEffect(\n        \"increment\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(400);\n          const newValue = yield* counterRef.updateAndGet((n) => n + 1);\n          yield* Effect.sleep(150);\n          return new StringResult(`${newValue}`);\n        })\n      ),\n    [counterRef]\n  );\n\n  // Create a task that repeats the increment 5 times\n  const repeatTask = useMemo(\n    () =>\n      visualEffect(\n        \"repeat\",\n        Effect.gen(function* () {\n          // Reset the counter\n          const ref = yield* counterRef.ref;\n          yield* Ref.set(ref, 0);\n          counterRef.updateValue(0);\n\n          // Repeat the increment task 5 times with a schedule\n          yield* incrementTask.effect.pipe(\n            Effect.repeat(Schedule.recurs(4).pipe(Schedule.compose(Schedule.spaced(Duration.millis(400))))) // 4 repeats + 1 initial = 5 total\n          );\n\n          return new EmojiResult(\"✅\");\n        })\n      ),\n    [counterRef, incrementTask]\n  );\n\n  const codeSnippet = `\nconst increment = (counter: Ref<number>) =>\n  Ref.updateAndGet(counter, n => n + 1)\n\nconst repeat = Effect.gen(function* () {\n  const counter = yield* Ref.make(0)\n  yield* Effect.repeat(increment(counter), Schedule.recurs(4))\n})`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      increment: { text: \"Ref.updateAndGet(counter, n => n + 1)\" },\n      repeat: { text: \"Effect.repeat(increment, Schedule.recurs(4))\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [incrementTask], [incrementTask])}\n      resultEffect={repeatTask}\n      effectHighlightMap={taskHighlightMap}\n      refs={useMemo(() => [counterRef as VisualRef<unknown>], [counterRef])}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRefExample;\n","\"use client\";\n\nimport { Duration, Effect, Ref } from \"effect\";\nimport { useMemo } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult, StringResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { type VisualRef, visualRef } from \"@/features/visual-effect/VisualRef\";\n\nexport function EffectRefConcurrentExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Create a visual ref for the counter\n  const counterRef = useMemo(() => visualRef(\"counter\", 0), []);\n\n  const updateAndGetRef = useMemo(\n    () =>\n      Effect.gen(function* () {\n        yield* Effect.sleep(Duration.millis(Math.random() * 1000 + 500)); // Random delay 500-1500ms\n        const newValue = yield* counterRef.updateAndGet((n) => n + 1);\n        yield* Effect.sleep(Duration.millis(50)); // Random delay 500-1500ms\n        return new StringResult(`${newValue}`);\n      }),\n    [counterRef]\n  );\n\n  // Create 5 individual increment tasks that each increment the ref by 1\n  const incrementTask1 = useMemo(() => visualEffect(\"increment1\", updateAndGetRef), [updateAndGetRef]);\n\n  const incrementTask2 = useMemo(() => visualEffect(\"increment2\", updateAndGetRef), [updateAndGetRef]);\n\n  const incrementTask3 = useMemo(() => visualEffect(\"increment3\", updateAndGetRef), [updateAndGetRef]);\n\n  const incrementTask4 = useMemo(() => visualEffect(\"increment4\", updateAndGetRef), [updateAndGetRef]);\n\n  const incrementTask5 = useMemo(() => visualEffect(\"increment5\", updateAndGetRef), [updateAndGetRef]);\n\n  // Create a task that runs all 5 increment tasks concurrently\n  const concurrentTask = useMemo(\n    () =>\n      visualEffect(\n        \"concurrent\",\n        Effect.gen(function* () {\n          // Reset the counter\n          const ref = yield* counterRef.ref;\n          yield* Ref.set(ref, 0);\n          counterRef.updateValue(0);\n\n          // Run all 5 increment tasks concurrently with unbounded concurrency\n          yield* Effect.all(\n            [\n              incrementTask1.effect,\n              incrementTask2.effect,\n              incrementTask3.effect,\n              incrementTask4.effect,\n              incrementTask5.effect,\n            ],\n            { concurrency: \"unbounded\" }\n          );\n\n          return new EmojiResult(\"✅\");\n        })\n      ),\n    [counterRef, incrementTask1, incrementTask2, incrementTask3, incrementTask4, incrementTask5]\n  );\n\n  const codeSnippet = `const increment = (counter: Ref<number>) => Effect.gen(function* () {\n  yield* Effect.sleep(Duration.millis(Math.random() * 1000 + 500))\n  return yield* Ref.updateAndGet(counter, n => n + 1)\n})\n\nconst concurrent = Effect.gen(function* () {\n  const counter = yield* Ref.make(0)\n  return yield* Effect.all(\n    Array.from({ length: 5 }, () => increment(counter)),\n    { concurrency: \"unbounded\" }\n  )\n})`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      increment1: { text: \"Ref.updateAndGet(counterRef, n => n + 1)\" },\n      increment2: { text: \"Ref.updateAndGet(counterRef, n => n + 1)\" },\n      increment3: { text: \"Ref.updateAndGet(counterRef, n => n + 1)\" },\n      increment4: { text: \"Ref.updateAndGet(counterRef, n => n + 1)\" },\n      increment5: { text: \"Ref.updateAndGet(counterRef, n => n + 1)\" },\n      concurrent: {\n        text: 'Effect.all([...], { concurrency: \"unbounded\" })',\n      },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(\n        () => [incrementTask1, incrementTask2, incrementTask3, incrementTask4, incrementTask5],\n        [incrementTask1, incrementTask2, incrementTask3, incrementTask4, incrementTask5]\n      )}\n      resultEffect={concurrentTask}\n      effectHighlightMap={taskHighlightMap}\n      refs={useMemo(() => [counterRef as VisualRef<unknown>], [counterRef])}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectRefConcurrentExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { StringResult } from \"@/features/visual-effect/components/renderers\";\nimport { useVisualScope } from \"@/features/visual-effect/hooks/useVisualScope\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { useVisualEffectState, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { VisualScope } from \"@/features/visual-effect/VisualScope\";\nimport { getDelay } from \"./helpers\";\n\n// Simulate resource acquisition with cleanup\nfunction acquireDatabase() {\n  return Effect.gen(function* () {\n    yield* Effect.sleep(getDelay(600, 900));\n    return {\n      connection: \"DATABASE\",\n      close: () => console.log(\"Database connection closed\"),\n    };\n  });\n}\n\nfunction acquireCache() {\n  return Effect.gen(function* () {\n    yield* Effect.sleep(getDelay(600, 900));\n    return {\n      connection: \"CACHE\",\n      close: () => console.log(\"Cache connection closed\"),\n    };\n  });\n}\n\nfunction acquireLogger() {\n  return Effect.gen(function* () {\n    yield* Effect.sleep(getDelay(600, 900));\n    return {\n      file: \"LOGGER\",\n      close: () => console.log(\"Logger file closed\"),\n    };\n  });\n}\n\nexport function EffectAcquireReleaseExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const scope = useMemo(() => new VisualScope(\"resourceScope\"), []);\n  const runCountRef = useRef(0);\n  useVisualScope(scope);\n\n  // Individual resource tasks\n  const dbTask = useMemo(\n    () =>\n      visualEffect(\n        \"database\",\n        acquireDatabase().pipe(\n          Effect.map((db) => new StringResult(db.connection)),\n          Effect.tap(() => scope.addFinalizer(\"Close database\")),\n          Effect.tap(() => Effect.sleep(200))\n        )\n      ),\n    [scope]\n  );\n\n  const cacheTask = useMemo(\n    () =>\n      visualEffect(\n        \"cache\",\n        acquireCache().pipe(\n          Effect.map((cache) => new StringResult(cache.connection)),\n          Effect.tap(() => scope.addFinalizer(\"Flush cache\")),\n          Effect.tap(() => Effect.sleep(200))\n        )\n      ),\n    [scope]\n  );\n\n  const loggerTask = useMemo(\n    () =>\n      visualEffect(\n        \"logger\",\n        acquireLogger().pipe(\n          Effect.map((logger) => new StringResult(logger.file)),\n          Effect.tap(() => scope.addFinalizer(\"Close log file\")),\n          Effect.tap(() => Effect.sleep(200))\n        )\n      ),\n    [scope]\n  );\n\n  // Main effect that uses scoped resources\n  const mainTask = useMemo(() => {\n    const scopedEffect = Effect.gen(function* () {\n      // Increment run count\n      runCountRef.current += 1;\n      const currentRun = runCountRef.current;\n\n      // Simulate scope acquisition\n      scope.setState(\"acquiring\");\n\n      // Acquire resources in order\n      yield* dbTask.effect;\n\n      yield* cacheTask.effect;\n\n      yield* loggerTask.effect;\n\n      scope.setState(\"active\");\n\n      // Do some work with resources\n      yield* Effect.sleep(getDelay(1000, 1500));\n\n      // Cycle through success, failure, and death\n      const cyclePosition = (currentRun - 1) % 3;\n\n      if (cyclePosition === 0) {\n        // First run: succeed\n        return new StringResult(\"Work completed!\");\n      }\n      if (cyclePosition === 1) {\n        // Second run: fail\n        return yield* Effect.fail(\"Oops.\");\n      }\n      // Third run: die\n      return yield* Effect.die(\"BANG!\");\n    });\n\n    return visualEffect(\"result\", scopedEffect);\n  }, [dbTask, cacheTask, loggerTask, scope]);\n\n  // Handle scope cleanup when main task completes\n  useEffect(() => {\n    const unsubscribe = mainTask.subscribe(() => {\n      if (\n        (mainTask.state.type === \"completed\" ||\n          mainTask.state.type === \"interrupted\" ||\n          mainTask.state.type === \"failed\" ||\n          mainTask.state.type === \"death\") &&\n        scope.state !== \"released\"\n      ) {\n        // Run finalizers (guaranteed cleanup!)\n        scope.runFinalizers();\n      } else if (mainTask.state.type === \"idle\") {\n        // Reset scope when task resets\n        scope.reset();\n      }\n    });\n\n    return unsubscribe;\n  }, [mainTask, scope]);\n\n  const codeSnippet = `\nconst makeDatabase = Effect.acquireRelease(\n  connectDatabase(),\n  (db) => Effect.sync(() => db.close())\n);\n\nconst makeCache = Effect.acquireRelease(\n  connectCache(),\n  (cache) => Effect.sync(() => cache.flush())\n);\n\nconst makeLogger = Effect.acquireRelease(\n  openLogFile(),\n  (file) => Effect.sync(() => file.close())\n);\n\nconst result = Effect.gen(function* () {\n  const db = yield* makeDatabase\n  const cache = yield* makeCache\n  const logger = yield* makeLogger\n  return yield* doWork(db, cache, logger)\n})\n.pipe(Effect.scoped)`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      database: { text: \"makeDatabase\" },\n      cache: { text: \"makeCache\" },\n      logger: { text: \"makeLogger\" },\n      result: { text: \"result\" },\n    }),\n    []\n  );\n\n  // Subscribe to main task state changes\n  const mainTaskState = useVisualEffectState(mainTask);\n\n  // Set dark mode when the main task dies\n  const isDarkMode = mainTaskState.type === \"death\";\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [dbTask, cacheTask, loggerTask], [dbTask, cacheTask, loggerTask])}\n      resultEffect={mainTask}\n      effectHighlightMap={taskHighlightMap}\n      scope={scope}\n      isDarkMode={isDarkMode}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectAcquireReleaseExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { memo, useEffect, useMemo, useState } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { StringResult } from \"@/features/visual-effect/components/renderers\";\nimport { SegmentedControl } from \"@/features/visual-effect/components/ui\";\nimport { useVisualScope } from \"@/features/visual-effect/hooks/useVisualScope\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { taskSounds } from \"@/features/visual-effect/sounds/TaskSounds\";\nimport type { VisualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { VisualScope } from \"@/features/visual-effect/VisualScope\";\nimport { getDelay } from \"./helpers\";\n\ntype Outcome = \"succeed\" | \"fail\" | \"die\" | \"interrupt\";\n\n// Configuration panel component\nconst ConfigurationPanel = memo(\n  ({\n    exampleIndex,\n    outcome,\n    setOutcome,\n  }: {\n    outcome: Outcome;\n    setOutcome: (o: Outcome) => void;\n    exampleIndex?: number;\n  }) => (\n    <div className=\"overflow-hidden relative from-neutral-800/40 to-neutral-800/20 bg-gradient-to-t \">\n      <div className=\"p-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-6\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-sm font-mono text-neutral-500 select-none tracking-wider\">OUTCOME</span>\n            <SegmentedControl\n              value={outcome}\n              onChange={(o) => {\n                setOutcome(o);\n                taskSounds.playConfigurationChange().catch(() => {});\n                // No need to call resetEffect here - useEffect handles it\n              }}\n              options={[\"succeed\", \"fail\", \"die\", \"interrupt\"] as const}\n              backgroundClassName=\"bg-neutral-700/80\"\n              enableKeyboard={true}\n              {...(exampleIndex !== undefined && { exampleIndex })}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n);\n\nConfigurationPanel.displayName = \"ConfigurationPanel\";\n\nexport function EffectFinalizerExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const [outcome, setOutcome] = useState<Outcome>(\"succeed\");\n\n  // Visual scope for finalizers\n  const scope = useMemo(() => new VisualScope(\"simpleFinalizer\"), []);\n  useVisualScope(scope);\n\n  // Effect task that changes based on outcome\n  const task = useMemo<VisualEffect<StringResult, string>>(() => {\n    const effect = Effect.gen(function* () {\n      // Acquire phase\n      scope.setState(\"acquiring\");\n\n      yield* Effect.sleep(getDelay(300, 400));\n\n      // Register finalizer\n      yield* Effect.sync(() => scope.addFinalizer(\"🧹 Clean up\"));\n\n      // Active phase\n      scope.setState(\"active\");\n\n      // Simulate some work\n      yield* Effect.sleep(getDelay(600, 900));\n\n      // Produce outcome\n      switch (outcome) {\n        case \"succeed\":\n          return new StringResult(\"Done\");\n        case \"fail\":\n          return yield* Effect.fail(\"💥 Fail\");\n        case \"die\":\n          return yield* Effect.die(\"☠️ Die\");\n        case \"interrupt\":\n          // Long-running effect to allow manual interruption\n          yield* Effect.sleep(60 * 60 * 1000);\n          return new StringResult(\"Interrupted\"); // Won't reach if interrupted\n      }\n    });\n\n    return visualEffect(\"effect\", effect);\n  }, [outcome, scope]);\n\n  // Cleanup function to interrupt old task when outcome changes\n  useEffect(() => {\n    // Capture the current task in the closure\n    const currentTask = task;\n    const currentScope = scope;\n\n    return () => {\n      // When outcome changes, interrupt and reset the OLD task\n      currentTask.interrupt();\n      currentTask.reset();\n      currentScope.reset();\n    };\n  }, [task]); // Re-run when task changes (which happens when outcome changes)\n\n  // Ensure finalizers run when task ends\n  useEffect(() => {\n    const unsub = task.subscribe(() => {\n      if (\n        (task.state.type === \"completed\" ||\n          task.state.type === \"interrupted\" ||\n          task.state.type === \"failed\" ||\n          task.state.type === \"death\") &&\n        scope.state !== \"released\"\n      ) {\n        scope.runFinalizers();\n      } else if (task.state.type === \"idle\") {\n        scope.reset();\n      }\n    });\n    return unsub;\n  }, [task, scope]);\n\n  // Dynamic code snippet based on outcome\n  const codeSnippet = (() => {\n    const lines = [\n      \"const effect = Effect.gen(function* () {\",\n      \"  // Register finalizer first\",\n      '  yield* Effect.addFinalizer(() => console.log(\"cleanup\"))',\n    ];\n\n    switch (outcome) {\n      case \"succeed\":\n        lines.push(\"  // Succeed\", '  return \"Done\"');\n        break;\n      case \"fail\":\n        lines.push(\"  // Fail\", '  return yield* Effect.fail(\"Boom\")');\n        break;\n      case \"die\":\n        lines.push(\"  // Die\", '  return yield* Effect.die(\"Defect\")');\n        break;\n      case \"interrupt\":\n        lines.push(\"  // Keep running until interrupted\", \"  yield* Effect.sleep(60 * 60 * 1000)\");\n        break;\n    }\n    lines.push(\"}).pipe(Effect.scoped)\");\n    return lines.join(\"\\n\");\n  })();\n\n  // Dark mode when effect dies\n  const isDarkMode = task.state.type === \"death\";\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      effect: { text: \"effect\" },\n    }),\n    []\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={codeSnippet}\n      effects={useMemo(() => [task], [task])}\n      effectHighlightMap={taskHighlightMap}\n      scope={scope}\n      configurationPanel={\n        <ConfigurationPanel\n          outcome={outcome}\n          setOutcome={setOutcome}\n          {...(index !== undefined && { exampleIndex: index })}\n        />\n      }\n      isDarkMode={isDarkMode}\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectFinalizerExample;\n","\"use client\";\n\nimport { Effect } from \"effect\";\nimport { memo, useCallback, useMemo, useState } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { TemperatureArrayResult } from \"@/features/visual-effect/components/renderers\";\nimport { SegmentedControl } from \"@/features/visual-effect/components/ui\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { taskSounds } from \"@/features/visual-effect/sounds/TaskSounds\";\nimport { VisualEffect, visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getWeather } from \"./helpers\";\n\ntype ConcurrencyMode = \"sequential\" | \"unbounded\" | \"numbered\";\n\n// Enhanced configuration component with integrated styling\nconst ConfigurationPanel = memo(\n  ({\n    concurrencyMode,\n    exampleIndex,\n    resetEffect,\n    setConcurrencyMode,\n  }: {\n    concurrencyMode: ConcurrencyMode;\n    setConcurrencyMode: (mode: ConcurrencyMode) => void;\n    exampleIndex?: number;\n    resetEffect: () => void;\n  }) => (\n    <div className=\"overflow-hidden relative from-neutral-800/40 to-neutral-800/20 bg-gradient-to-t \">\n      <div className=\"p-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-6\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-sm font-mono text-neutral-500 select-none tracking-wider\">CONCURRENCY</span>\n            <SegmentedControl\n              value={concurrencyMode}\n              onChange={(mode) => {\n                setConcurrencyMode(mode);\n                resetEffect();\n                taskSounds.playConfigurationChange().catch(() => {});\n              }}\n              options={[\"sequential\", \"numbered\", \"unbounded\"] as const}\n              backgroundClassName=\"bg-neutral-700/80\"\n              enableKeyboard={true}\n              {...(exampleIndex !== undefined && { exampleIndex })}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n);\n\nConfigurationPanel.displayName = \"ConfigurationPanel\";\n\nexport function EffectAllExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  const [concurrencyMode, setConcurrencyMode] = useState<ConcurrencyMode>(\"sequential\");\n\n  // Spring animations for smooth transitions (removed to prevent re-animation)\n\n  // Create tasks with built-in jittered delays\n  const nyc = useMemo(() => visualEffect(\"nyc\", getWeather(\"New York\")), []);\n  const berlin = useMemo(() => visualEffect(\"berlin\", getWeather(\"Berlin\")), []);\n  const tokyo = useMemo(() => visualEffect(\"tokyo\", getWeather(\"Tokyo\")), []);\n  const london = useMemo(() => visualEffect(\"london\", getWeather(\"London\")), []);\n\n  // Create composed task with dynamic concurrency\n  const allTemps = useMemo(() => {\n    let concurrencyOption: { concurrency?: \"unbounded\" | number } = {};\n\n    switch (concurrencyMode) {\n      case \"sequential\":\n        // Default behavior - no concurrency option needed\n        break;\n      case \"unbounded\":\n        concurrencyOption = { concurrency: \"unbounded\" };\n        break;\n      case \"numbered\":\n        concurrencyOption = { concurrency: 2 };\n        break;\n    }\n\n    const allTempsEffect = Effect.all([nyc.effect, berlin.effect, tokyo.effect, london.effect], concurrencyOption).pipe(\n      Effect.map((temps) => new TemperatureArrayResult(temps.map((t) => t.value)))\n    );\n\n    return new VisualEffect(\"result\", allTempsEffect);\n  }, [nyc, berlin, tokyo, london, concurrencyMode]);\n\n  const resetEffect = useCallback(() => {\n    allTemps.reset();\n  }, [allTemps]);\n\n  // Memoize tasks array\n  const tasks = useMemo(() => [nyc, berlin, tokyo, london], [nyc, berlin, tokyo, london]);\n\n  // Dynamic code snippet based on concurrency mode\n  const getCodeSnippet = () => {\n    const baseCode = `const nyc = readTemperature(\"New York\")\nconst berlin = readTemperature(\"Berlin\")\nconst tokyo = readTemperature(\"Tokyo\")\nconst london = readTemperature(\"London\")\n\nconst result = Effect.all([nyc, berlin, tokyo, london]`;\n\n    switch (concurrencyMode) {\n      case \"sequential\":\n        return `${baseCode})`;\n      case \"unbounded\":\n        return (\n          baseCode +\n          `, {\n  concurrency: \"unbounded\",\n})`\n        );\n      case \"numbered\":\n        return (\n          baseCode +\n          `, {\n  concurrency: 2,\n})`\n        );\n    }\n  };\n\n  // Mapping between task name and the text to highlight\n  const taskHighlightMap = useMemo(\n    () => ({\n      nyc: {\n        text: 'readTemperature(\"New York\")',\n      },\n      berlin: {\n        text: 'readTemperature(\"Berlin\")',\n      },\n      tokyo: {\n        text: 'readTemperature(\"Tokyo\")',\n      },\n      london: {\n        text: 'readTemperature(\"London\")',\n      },\n      result: {\n        text:\n          concurrencyMode === \"sequential\"\n            ? \"Effect.all([nyc, berlin, tokyo, london])\"\n            : concurrencyMode === \"unbounded\"\n              ? 'concurrency: \"unbounded\"'\n              : `concurrency: 2`,\n      },\n    }),\n    [concurrencyMode]\n  );\n\n  return (\n    <EffectExample\n      name={metadata.name}\n      {...(metadata.variant && { variant: metadata.variant })}\n      description={metadata.description}\n      code={getCodeSnippet()}\n      effects={tasks}\n      resultEffect={allTemps}\n      effectHighlightMap={taskHighlightMap}\n      configurationPanel={\n        <ConfigurationPanel\n          concurrencyMode={concurrencyMode}\n          setConcurrencyMode={setConcurrencyMode}\n          {...(index !== undefined && { exampleIndex: index })}\n          resetEffect={resetEffect}\n        />\n      }\n      {...(index !== undefined && { index })}\n      exampleId={exampleId}\n    />\n  );\n}\n\nexport default EffectAllExample;\n","\"use client\";\n\nimport { Cause, Effect } from \"effect\";\nimport { AnimatePresence, m } from \"motion/react\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { EffectExample } from \"@/features/visual-effect/components/display\";\nimport { EmojiResult } from \"@/features/visual-effect/components/renderers\";\nimport type { ExampleComponentProps } from \"@/features/visual-effect/lib/example-types\";\nimport { visualEffect } from \"@/features/visual-effect/VisualEffect\";\nimport { getDelay } from \"./helpers\";\n\n// Password generator\nfunction generatePassword(): string {\n  const passwords = [\n    \"password123\",\n    \"12345678\",\n    \"SuperSecret2024!\",\n    \"p@ssw0rd\",\n    \"admin\",\n    \"correcthorsebatterystaple\",\n    \"ThisIsWayTooLongForAnyReasonablePasswordManagerToHandle2024!\",\n    \"abc\",\n    \"P@ssw0rd123!\",\n    \"hunter2\",\n    \"qwerty\",\n    \"letmein\",\n    \"iloveyou\",\n    \"monkey123\",\n    \"dragon\",\n  ];\n  return passwords[Math.floor(Math.random() * passwords.length)]!;\n}\n\nexport function EffectValidateExample({ exampleId, index, metadata }: ExampleComponentProps) {\n  // Use state to track current password and trigger re-renders\n  const password = useRef(generatePassword());\n  const [, setState] = useState(0);\n\n  // Individual validation tasks with random errors\n  const length = useMemo(\n    () =>\n      visualEffect(\n        \"length\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(600, 900));\n\n          const len = password.current.length;\n\n          // Real length validation - tuned to fail ~50% of passwords\n          if (len < 8) {\n            return yield* Effect.fail(\"Too Short!\");\n          }\n          if (len > 20) {\n            return yield* Effect.fail(\"Too Long!\");\n          }\n          // Add some randomness to make borderline cases sometimes fail\n          if (len === 8 && Math.random() < 0.3) {\n            return yield* Effect.fail(\"Too Weak!\");\n          }\n\n          return new EmojiResult(\"👌\");\n        })\n      ),\n    []\n  );\n\n  const complexity = useMemo(\n    () =>\n      visualEffect(\n        \"complexity\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(400, 600));\n\n          const hasLower = /[a-z]/.test(password.current);\n          const hasUpper = /[A-Z]/.test(password.current);\n          const hasNumbers = /[0-9]/.test(password.current);\n          const hasSpecial = /[^a-zA-Z0-9]/.test(password.current);\n\n          const complexity = [hasLower, hasUpper, hasNumbers, hasSpecial].filter(Boolean).length;\n\n          // Real complexity validation - tuned to fail ~50% of passwords\n          if (complexity < 2) {\n            return yield* Effect.fail(\"Too Simple!\");\n          }\n\n          // Check for obviously weak patterns\n          if (password.current.toLowerCase() === password.current && !hasNumbers && !hasSpecial) {\n            return yield* Effect.fail(\"Weak!\");\n          }\n\n          if (/^\\d+$/.test(password.current)) {\n            return yield* Effect.fail(\"Only #s!\");\n          }\n\n          // Sometimes fail even decent passwords to hit ~50% rate\n          if (complexity === 2 && Math.random() < 0.3) {\n            return yield* Effect.fail(\"Meh!\");\n          }\n\n          return new EmojiResult(\"👌\");\n        })\n      ),\n    []\n  );\n\n  const vibes = useMemo(\n    () =>\n      visualEffect(\n        \"vibes\",\n        Effect.gen(function* () {\n          yield* Effect.sleep(getDelay(350, 550));\n\n          // Only fail 40% of the time\n          if (Math.random() > 0.4) {\n            return new EmojiResult(\"👌\");\n          }\n\n          // Special failure message for each specific password\n          const currentPassword = password.current;\n          const vibeFailures: Record<string, string> = {\n            password123: \"Basic!\",\n            \"12345678\": \"Boring!\",\n            \"SuperSecret2024!\": \"Try Hard!\",\n            \"p@ssw0rd\": \"Cringe!\",\n            admin: \"Sus!\",\n            correcthorsebatterystaple: \"Too XKCD!\",\n            \"ThisIsWayTooLongForAnyReasonablePasswordManagerToHandle2024!\": \"Extra!\",\n            abc: \"Lazy!\",\n            \"P@ssw0rd123!\": \"Obvious!\",\n            hunter2: \"Meme!\",\n            qwerty: \"NO, DVORAK!\",\n            letmein: \"Desperate!\",\n            iloveyou: \"Cheesy!\",\n            monkey123: \"Random!\",\n            dragon: \"Fantasy!\",\n          };\n\n          const vibeError = vibeFailures[currentPassword];\n          if (vibeError) {\n            return yield* Effect.fail(vibeError);\n          }\n\n          // Fallback for any password not in the list\n          return yield* Effect.fail(\"Off!\");\n        })\n      ),\n    []\n  );\n\n  // Subscribe to task state changes to generate new password and trigger re-render when reset\n  useEffect(\n    () =>\n      length.subscribe(() => {\n        if (length.state.type === \"idle\") {\n          password.current = generatePassword();\n          // Invalidate the view by updating the state\n          setState((prev) => prev + 1); // Assuming setState is a state updater function\n        }\n      }),\n    [length]\n  );\n\n  // Validation task that accumulates all errors\n  const validationTask = useMemo(() => {\n    const validateAll = length.effect.pipe(\n      Effect.validate(complexity.effect),\n      Effect.validate(vibes.effect),\n      Effect.map(() => \"Password Accepted!\"),\n      Effect.mapErrorCause((cause) => {\n        // Extract all failure messages from the accumulated cause\n        const failures = Cause.failures(cause);\n        return Cause.fail(`${failures.length} error${failures.length === 1 ? \"\" : \"s\"}`);\n      })\n    );\n\n    return visualEffect(\"result\", validateAll);\n  }, [length, complexity, vibes]);\n\n  const codeSnippet = `const length = checkLength(password);\nconst complexity = checkComplexity(password);\nconst vibes = checkVibes(password);\n\nconst result = length.pipe(\n  Effect.validate(complexity),\n  Effect.validate(vibes)\n);`;\n\n  const taskHighlightMap = useMemo(\n    () => ({\n      length: { text: \"checkLength(password)\" },\n      complexity: { text: \"checkComplexity(password)\" },\n      vibes: { text: \"checkVibes(password)\" },\n      result: { text: \"length.pipe(Effect.validate(...))\" },\n    }),\n    []\n  );\n\n  return (\n    <>\n      <div className=\"text-neutral-400 text-sm mb-2 font-mono\">\n        Testing password:{\" \"}\n        <AnimatePresence mode=\"wait\">\n          <m.span\n            key={password.current}\n            initial={{ scale: 0.8, opacity: 0, filter: \"blur(4px)\" }}\n            animate={{ scale: 1, opacity: 1, filter: \"blur(0px)\" }}\n            exit={{ scale: 0.8, opacity: 0, filter: \"blur(4px)\" }}\n            transition={{ duration: 0.3, ease: \"easeInOut\" }}\n            className=\"text-white\"\n          >\n            {password.current}\n          </m.span>\n        </AnimatePresence>\n      </div>\n      <EffectExample\n        name={metadata.name}\n        {...(metadata.variant && { variant: metadata.variant })}\n        description={metadata.description}\n        code={codeSnippet}\n        effects={useMemo(() => [length, complexity, vibes], [length, complexity, vibes])}\n        resultEffect={validationTask}\n        effectHighlightMap={taskHighlightMap}\n        {...(index !== undefined && { index })}\n        exampleId={exampleId}\n      />\n    </>\n  );\n}\n\nexport default EffectValidateExample;\n"],"names":[],"mappings":"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"}