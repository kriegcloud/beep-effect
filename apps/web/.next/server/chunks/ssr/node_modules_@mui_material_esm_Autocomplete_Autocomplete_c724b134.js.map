{"version":3,"sources":["turbopack:///[project]/node_modules/@mui/material/esm/Autocomplete/Autocomplete.js","turbopack:///[project]/node_modules/@mui/material/esm/useAutocomplete/useAutocomplete.js"],"sourcesContent":["'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\nimport Popper from \"../Popper/index.js\";\nimport ListSubheader from \"../ListSubheader/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Chip from \"../Chip/index.js\";\nimport inputClasses from \"../Input/inputClasses.js\";\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];\n  }\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n})));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n})));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteListbox = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(memoTheme(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, (theme.vars || theme).palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, `${(theme.vars || theme).palette.action.selectedOpacity} + ${(theme.vars || theme).palette.action.hoverOpacity}`),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, `${(theme.vars || theme).palette.action.selectedOpacity} + ${(theme.vars || theme).palette.action.focusOpacity}`)\n      }\n    }\n  }\n})));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(memoTheme(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n})));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps: ChipPropsProp,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp,\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent: ListboxComponentProp,\n    ListboxProps: ListboxPropsProp,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent: PaperComponentProp,\n    PopperComponent: PopperComponentProp,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slots = {},\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getItemProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedItem,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: listboxRef,\n    ...otherListboxProps\n  } = getListboxProps();\n  const defaultGetOptionLabel = option => option.label ?? option;\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedItem === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: {\n      paper: PaperComponentProp,\n      popper: PopperComponentProp,\n      ...slots\n    },\n    slotProps: {\n      chip: ChipPropsProp,\n      listbox: ListboxPropsProp,\n      ...componentsProps,\n      ...slotProps\n    }\n  };\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\n    elementType: AutocompleteListbox,\n    externalForwardedProps,\n    ownerState,\n    className: classes.listbox,\n    additionalProps: otherListboxProps,\n    ref: listboxRef\n  });\n  const [PaperSlot, paperProps] = useSlot('paper', {\n    elementType: Paper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.paper\n  });\n  const [PopperSlot, popperProps] = useSlot('popper', {\n    elementType: Popper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.popper,\n    additionalProps: {\n      disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      role: 'presentation',\n      anchorEl,\n      open: popupOpen\n    }\n  });\n  let startAdornment;\n  const getCustomizedItemProps = params => ({\n    className: classes.tag,\n    disabled,\n    ...getItemProps(params)\n  });\n  if (multiple) {\n    if (value.length > 0) {\n      if (renderTags) {\n        startAdornment = renderTags(value, getCustomizedItemProps, ownerState);\n      } else if (renderValue) {\n        startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n      } else {\n        startAdornment = value.map((option, index) => {\n          const {\n            key,\n            ...customItemProps\n          } = getCustomizedItemProps({\n            index\n          });\n          return /*#__PURE__*/_jsx(Chip, {\n            label: getOptionLabel(option),\n            size: size,\n            ...customItemProps,\n            ...externalForwardedProps.slotProps.chip\n          }, key);\n        });\n      }\n    }\n  } else if (renderValue && value != null) {\n    startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n      key,\n      ...otherProps\n    } = props2;\n    return /*#__PURE__*/_jsx(\"li\", {\n      ...otherProps,\n      children: getOptionLabel(option)\n    }, key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onMouseDown: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps?.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps?.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperSlot,\n      ...popperProps,\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        as: PaperSlot,\n        ...paperProps,\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(ListboxSlot, {\n          as: ListboxComponentProp,\n          ...listboxProps,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        }) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\n   * @deprecated Use `slotProps.chip` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @template Value The option shape. Will be the same shape as an item of the options.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} option The Autocomplete option.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * A list of options that will be shown in the Autocomplete.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   * @deprecated Use `slots.paper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   * @deprecated Use `slots.popper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * **Note:** The `renderInput` prop must return a `TextField` component or a compatible custom component\n   * that correctly forwards `InputProps.ref` and spreads `inputProps`. This ensures proper integration\n   * with the Autocomplete's internal logic (e.g., focus management and keyboard navigation).\n   *\n   * Avoid using components like `DatePicker` or `Select` directly, as they may not forward the required props,\n   * leading to runtime errors or unexpected behavior.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value when doing multiple selections.\n   *\n   * @deprecated Use `renderValue` prop instead\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\n   *\n   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\n   * @param {function} getItemProps The value item props.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    popper: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","'use client';\n\nimport * as React from 'react';\nimport setRef from '@mui/utils/setRef';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useControlled from '@mui/utils/useControlled';\nimport useId from '@mui/utils/useId';\nimport usePreviousProps from '@mui/utils/usePreviousProps';\nfunction areArraysSame({\n  array1,\n  array2,\n  parser = value => value\n}) {\n  return array1 && array2 && array1.length === array2.length && array1.every((prevOption, index) => parser(prevOption) === parser(array2[index]));\n}\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction getInputValue(value, multiple, getOptionLabel, renderValue) {\n  if (multiple || value == null || renderValue) {\n    return '';\n  }\n  const optionLabel = getOptionLabel(value);\n  return typeof optionLabel === 'string' ? optionLabel : '';\n}\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    renderValue,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedItem, setFocusedItem] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n\n  // Calculate the initial inputValue on mount only.\n  // useRef ensures it doesn't update dynamically with defaultValue or value props.\n  const initialInputValue = React.useRef(getInputValue(defaultValue ?? valueProp, multiple, getOptionLabel)).current;\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: initialInputValue,\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    const newInputValue = getInputValue(newValue, multiple, getOptionLabel, renderValue);\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value, renderValue]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusItem = useEventCallback(itemToFocus => {\n    if (itemToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is gone.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      anchorEl.querySelector(`[${indexType}=\"${itemToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedItem is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedItem > value.length - 1) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n  }, [value, multiple, focusedItem, focusItem]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange && ['mouse', 'keyboard', 'touch'].includes(reason)) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const filteredOptionsChanged = !areArraysSame({\n    array1: previousProps.filteredOptions,\n    array2: filteredOptions,\n    parser: getOptionLabel\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && !areArraysSame({\n      array1: previousProps.filteredOptions,\n      array2: filteredOptions,\n      parser: getOptionLabel\n    }) && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    if (filteredOptionsChanged || popupOpen) {\n      syncHighlightedIndex();\n    }\n  }, [syncHighlightedIndex, filteredOptionsChanged, popupOpen]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validItemIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n\n      // Using `data-tag-index` for deprecated `renderTags`. Remove when `renderTags` is removed.\n      const indexType = renderValue ? 'data-item-index' : 'data-tag-index';\n      const option = anchorEl.querySelector(`[${indexType}=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusItem = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextItem = focusedItem;\n    if (focusedItem === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextItem = value.length - 1;\n      }\n    } else {\n      nextItem += direction === 'next' ? 1 : -1;\n      if (nextItem < 0) {\n        nextItem = 0;\n      }\n      if (nextItem === value.length) {\n        nextItem = -1;\n      }\n    }\n    nextItem = validItemIndex(nextItem, direction);\n    setFocusedItem(nextItem);\n    focusItem(nextItem);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedItem !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedItem(-1);\n      focusItem(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          if (!multiple && renderValue) {\n            focusItem(0);\n          } else {\n            handleFocusItem(event, 'previous');\n          }\n          break;\n        case 'ArrowRight':\n          if (!multiple && renderValue) {\n            focusItem(-1);\n          } else {\n            handleFocusItem(event, 'next');\n          }\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0 || renderValue)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedItem === -1 ? value.length - 1 : focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedItem !== -1) {\n            const index = focusedItem;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          if (!multiple && renderValue && !readOnly) {\n            setValueState(null);\n            focusItem(-1);\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleItemDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handleSingleItemDelete = event => {\n    handleValue(event, null, 'removeOption', {\n      option: value\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getItemProps: ({\n      index = 0\n    } = {}) => ({\n      ...(multiple && {\n        key: index\n      }),\n      ...(renderValue ? {\n        'data-item-index': index\n      } : {\n        'data-tag-index': index\n      }),\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: multiple ? handleItemDelete(index) : handleSingleItemDelete\n      })\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    // deprecated\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleItemDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedItem !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedItem,\n    // deprecated\n    focusedTag: focusedItem,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;"],"names":[],"mappings":"wCAGA,IADI,EAAY,EAChB,EAAA,EAAA,CAAA,CAAA,QAEA,EAAA,EAAA,CAAA,CAAA,QAGA,EAAA,EAAA,CAAA,CAAA,QCLA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,SAAS,EAAc,QACrB,CAAM,QACN,CAAM,QACN,EAAS,GAAS,CAAK,CACxB,EACC,OAAO,GAAU,GAAU,EAAO,MAAM,GAAK,EAAO,MAAM,EAAI,EAAO,KAAK,CAAC,CAAC,EAAY,IAAU,EAAO,KAAgB,EAAO,CAAM,CAAC,EAAM,EAC/I,CAGA,SAAS,EAAgB,CAAM,EAC7B,OAAO,EAAO,SAAS,CAAC,OAAO,OAAO,CAAC,mBAAoB,GAC7D,CAkCA,IAAM,EAjCC,AAiCsB,SAjCb,AAAoB,EAAS,CAAC,CAAC,EAC7C,GAAM,CACJ,iBAAgB,CAAI,YACpB,GAAa,CAAI,OACjB,CAAK,WACL,EAAY,KAAK,WACjB,CAAS,CACT,QAAO,CAAK,CACb,CAAG,EACJ,MAAO,CAAC,EAAS,YACf,CAAU,gBACV,CAAc,CACf,IACC,IAAI,EAAQ,EAAO,EAAW,IAAI,GAAK,EACnC,GACF,GAAQ,EAAM,IADA,OACW,EAAA,EAEvB,IACF,EAAQ,EAAgB,EAAA,EAE1B,GAHmB,CAGb,EAAkB,AAAC,EAAkB,EAAQ,MAAM,CAAC,IACxD,IAAI,EAAY,CAAC,GAAa,CAAA,CAAc,CAAE,GAO9C,OANI,IACF,EAAY,EAAU,IADR,OACmB,EAAA,EAE/B,IACF,EAAY,EAAgB,EAAA,EAET,GAHF,OAGZ,EAAwB,EAAU,UAAU,CAAC,GAAS,EAAU,QAAQ,CAAC,EAClF,GATiC,EAUjC,MAAwB,UAAjB,OAAO,EAAqB,EAAgB,KAAK,CAAC,EAAG,GAAS,CACvE,CACF,IAKM,EAAkC,GAAqC,OAAvB,EAAW,OAAO,EAAa,EAAW,OAAO,CAAC,aAAa,EAAE,SAAS,SAAS,aAAa,EAChJ,EAAyB,EAAE,CACjC,SAAS,EAAc,CAAK,CAAE,CAAQ,CAAE,CAAc,CAAE,CAAW,EACjE,GAAI,GAAqB,MAAT,GAAiB,EAC/B,MAAO,GAET,EAH8C,EAGxC,EAAc,EAAe,GACnC,MAAO,AAAuB,iBAAhB,EAA2B,EAAc,EACzD,OACA,SAAS,AAAgB,CAAK,EAC5B,GAAM,EACJ,cA28BW,mBA18BX,EAAoC,CAA+B,CAEnE,CADA,0BAC2B,AAHqC,KAGhC,cAChC,EAAe,EAAK,eAF4C,AAGhE,GAAgB,CAAK,CACrB,cAAa,CAAK,cAClB,GAAe,CAAK,aACpB,EAAc,CAAC,EAAM,QAAQ,eAC7B,GAAgB,CAAK,eACrB,EAAgB,iBAAiB,cACjC,EAAe,EAAM,QAAQ,CAAG,EAAyB,IAAI,kBAC7D,EAAmB,EAAK,sBACxB,GAAuB,CAAK,CAC5B,SAAU,CAAY,wBACtB,GAAyB,CAAK,iBAC9B,GAAkB,CAAK,eACvB,EAAgB,CAAoB,uBACpC,GAAwB,CAAK,UAC7B,GAAW,CAAK,mBAChB,CAAiB,cACjB,CAAY,CACZ,eAAgB,EAAqB,GAAU,EAAO,KAAK,EAAI,CAAM,CACrE,SAAO,CACP,oBAAoB,CAAC,EAAM,QAAQ,CACnC,GAAI,CAAM,oBACV,GAAqB,CAAK,CAC1B,WAAY,CAAc,sBAC1B,EAAuB,CAAC,EAAQ,IAAU,IAAW,CAAK,UAC1D,GAAW,CAAK,UAChB,CAAQ,SACR,CAAO,mBACP,CAAiB,eACjB,CAAa,QACb,CAAM,CACN,KAAM,CAAQ,CACd,eAAc,CAAK,SACnB,CAAO,UACP,GAAW,CAAK,aAChB,CAAW,eACX,EAAgB,CAAC,EAAM,QAAQ,CAC/B,MAAO,CAAS,CACjB,CAAG,EACE,EAAK,CAAA,EAAA,EAAA,OAAA,AAAK,EAAC,GACb,EAAiB,EACrB,EAAiB,IACf,IAAM,EAAc,EAAmB,SACvC,AAA2B,UAAvB,AAAiC,OAA1B,EAKF,OAAO,GAET,CACT,EACA,IAAM,GAAc,EAAA,MAAY,EAAC,GAC3B,GAAa,EAAA,MAAY,EAAC,GAC1B,GAAW,EAAA,MAAY,CAAC,MACxB,GAAa,EAAA,MAAY,CAAC,MAC1B,CAAC,GAAU,GAAY,CAAG,EAAA,QAAc,CAAC,MACzC,CAAC,GAAa,GAAe,CAAG,EAAA,QAAc,CAAC,CAAC,GAChD,GAAqB,EAAgB,EAAI,CAAC,EAC1C,GAAsB,EAAA,MAAY,CAAC,IAInC,GAAoB,EAAA,MAAY,CAAC,EAAc,GAAgB,EAAW,EAAU,IAAiB,OAAO,CAC5G,CAAC,GAAO,GAAc,CAAG,CAAA,EAAA,EAAA,OAAA,AAAa,EAAC,CAC3C,WAAY,EACZ,QAAS,EACT,KAAM,CACR,GACM,CAAC,GAAY,GAAmB,CAAG,CAAA,EAAA,EAAA,OAAA,AAAa,EAAC,CACrD,WAAY,EACZ,QAAS,GACT,KAAM,EACN,MAAO,YACT,GACM,CAAC,GAAS,GAAW,CAAG,EAAA,QAAc,EAAC,GACvC,GAAkB,EAAA,WAAiB,CAAC,CAAC,EAAO,EAAU,KAI1D,GAAI,CAAC,CADoB,EAAW,GAAM,MAAM,CAAG,EAAS,MAAM,CAAgB,AAAb,QAAa,GACzD,CAAC,EACxB,OAEF,IAHuC,AAGjC,EAAgB,EAAc,EAAU,EAAU,EAAgB,GACpE,KAAe,IAGnB,GAAmB,GACf,GACF,EALgC,AAKlB,EAAO,EAAe,GAExC,EAAG,CAAC,AAHiB,EAGD,GAAY,EAAU,EAAe,GAAoB,EAAa,GAAO,EAAY,EACvG,CAAC,GAAM,GAAa,CAAG,CAAA,EAAA,EAAA,OAAA,AAAa,EAAC,CACzC,WAAY,EACZ,SAAS,EACT,KAAM,EACN,MAAO,MACT,GACM,CAAC,GAAe,GAAiB,CAAG,EAAA,QAAc,EAAC,GACnD,GAA4B,CAAC,GAAqB,MAAT,IAAiB,KAAe,EAAe,IACxF,GAAY,IAAQ,CAAC,EACrB,GAAkB,GAAY,EAAc,EAAQ,MAAM,CAAC,KAC3D,GAAyB,CAAC,EAAW,GAAQ,CAAC,GAAM,EAAE,IAAI,CAAC,GAAqB,OAAX,GAAmB,EAAqB,EAAQ,GAAA,GAAU,AAOrI,CACE,WAAY,IAA6B,GAAgB,GAAK,kBAC9D,CACF,GAAK,EAAE,CACD,GAAgB,CAAA,EAAA,EAAA,OAAA,AAAgB,EAAC,iBACrC,SACA,cACA,EACF,GACA,EAAA,SAAe,CAAC,KACd,IAAM,EAAc,KAAU,GAAc,KAAK,AACjD,CAAI,IAAW,CAAC,KAKZ,GAAa,CAAA,GAAa,AAG9B,CAR6B,EAQb,EAHA,GAGM,GAAO,QAC/B,EAAG,CAAC,GAAO,GAAiB,GAAS,GAAc,KAAK,CAAE,EAAS,EACnE,IAAM,GAAmB,IAAQ,GAAgB,MAAM,CAAG,GAAK,CAAC,EAC1D,GAAY,CAAA,EAAA,EAAA,OAAA,AAAgB,EAAC,IACjC,GAAoB,CAAC,GAAG,CAApB,EACF,GAAS,OAAO,CAAC,KAAK,OACjB,CAEL,IAAM,EAAY,EAAc,kBAAoB,iBACpD,GAAS,aAAa,CAAC,CAAC,CAAC,EAAE,EAAU,EAAE,EAAE,EAAY,EAAE,CAAC,EAAE,KAAK,EACjE,CACF,GAGA,EAAA,SAAe,CAAC,KACV,GAAY,GAAc,GAAM,MAAM,CAAG,GAAG,CAC9C,GAAe,CAAC,GAChB,GAAU,CAAC,GAEf,EAAG,CAAC,GAAO,EAAU,GAAa,GAAU,EA+B5C,IAAM,GAAsB,CAAA,EAAA,EAAA,OAAA,AAAgB,EAAC,CAAC,OAC5C,CAAK,OACL,CAAK,QACL,CAAM,CACP,IAYC,GAXA,GAAoB,OAAO,CAAG,EAGhB,CAAC,GAAG,CAAd,EACF,GAAS,OAAO,CAAC,eAAe,CAAC,yBAEjC,GAAS,OAAO,CAAC,YAAY,CAAC,wBAAyB,CAAA,EAAG,EAAG,QAAQ,EAAE,EAAA,CAAO,EAE5E,GAAqB,CAAC,QAAS,WAAY,QAAQ,CAAC,QAAQ,CAAC,IAC/D,EAAkB,EAAiB,CADqC,AACpC,IAAX,EAAe,KAAO,EAAe,CAAC,EAAM,CAAE,GAErE,CAAC,GAAW,OAAO,CACrB,CADuB,MAGzB,IAAM,EAAO,GAAW,OAAO,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,EAAyB,QAAQ,CAAC,EAC/F,IACF,EAAK,AADG,SACM,CAAC,MAAM,CAAC,CAAA,EAAG,EAAyB,QAAQ,CAAC,EAC3D,EAAK,SAAS,CAAC,MAAM,CAAC,CAAA,EAAG,EAAyB,aAAa,CAAC,GAElE,IAAI,EAAc,GAAW,OAAO,CAMpC,GALgD,WAAW,CAAvD,GAAW,OAAO,CAAC,YAAY,CAAC,UAClC,EAAc,GAAW,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAA,EAI3D,CAAC,EACH,OAEF,GAAc,CAHI,AAGH,IAAX,EAAc,CAChB,EAAY,SAAS,CAAG,EACxB,MACF,CACA,IAAM,EAAS,GAAW,OAAO,CAAC,aAAa,CAAC,CAAC,oBAAoB,EAAE,EAAM,EAAE,CAAC,EAChF,GAAK,CAAD,GAGJ,EAAO,EAHM,OAGG,CAAC,GAAG,CAAC,CAAA,EAAG,EAAyB,QAAQ,CAAC,EACtD,AAAW,YAAY,IACzB,EAAO,SAAS,CAAC,GAAG,CAAC,CAAA,EAAG,EAAyB,aAAa,CAAC,EAQ7D,EAAY,YAAY,CAAG,EAAY,YAAY,EAAe,UAAX,GAAsB,AAAW,aAAS,CAEnG,IAAM,EAAe,EAAY,YAAY,CAAG,EAAY,SAAS,CAC/D,EAAgB,EAAQ,SAAS,CAFvB,AAE0B,EAAQ,YAAY,CAC1D,EAAgB,EAClB,EAAY,SAAS,CADW,AACR,EAAgB,EAAY,YAAY,CACvD,EAAQ,SAAS,CAAG,EAAQ,YAAY,EAAc,CAAX,KAAC,CAAgB,CAAC,CAAI,EAAY,SAAS,EAAE,CACjG,EAAY,SAAS,CAAG,EAAQ,SAAS,CAAG,EAAQ,YAAY,EAAI,AAAU,CAAX,MAAiB,CAAC,CAEzF,CACF,GACM,GAAyB,CAAA,EAAA,EAAA,OAAA,AAAgB,EAAC,CAAC,OAC/C,CAAK,CACL,MAAI,CACJ,YAAY,MAAM,QAClB,CAAM,CACP,IACC,GAAI,CAAC,GACH,OAkCF,CAnCgB,GAmCV,EAAY,AArIpB,SAAS,AAAiB,CAAK,CAAE,CAAS,EACxC,GAAI,CAAC,GAAW,OAAO,EAAI,EAAQ,GAAK,GAAS,GAAgB,MAAM,CACrE,CADuE,MAChE,CAAC,EAEV,IAAI,EAAY,EAChB,MAAO,CAAM,CACX,IAAM,EAAS,GAAW,OAAO,CAAC,aAAa,CAAC,CAAC,oBAAoB,EAAE,EAAU,EAAE,CAAC,EAG9E,GAAoB,IAAiC,CAAC,GAAU,EAAO,QAAQ,EAA6C,KAA/E,IAAsC,EAAO,YAAY,CAAC,gBAAqB,EAClI,GAAI,GAAU,EAAO,YAAY,CAAC,aAAe,CAAC,EAEhD,OAAO,EAaT,GAAI,CAPF,EADgB,EAPmD,MAO3C,CAAtB,EACU,CAAC,GAAY,CAAC,CAAI,GAAgB,MAAM,CAExC,CAAC,EAAY,EAAI,GAAgB,MAAA,AAAM,EAAI,GAAgB,MAAM,IAK7D,EAChB,KADuB,EAChB,CAAC,CAEZ,CACF,EAwGqC,CAhCd,KACnB,IAAM,EAAW,GAAgB,MAAM,CAAG,EAC1C,GAAa,AAAT,SAAkB,GACpB,OAAO,GAET,GAAa,SAAS,CAAlB,EACF,OAAO,EAET,GAAa,OAAO,CAAhB,EACF,OAAO,EAET,IAAM,EAAW,GAAoB,OAAO,CAAG,SAC3C,AAAJ,EAAe,EACb,AAAiB,CADD,AACE,IAAd,GAAmB,EACd,CAAC,EAEN,GAAmD,CAAC,IAAjC,GAAoB,IAHA,GAGO,EAAW,KAAK,GAAG,CAAC,GAAQ,EACrE,CADwE,CAG1E,EAEL,EAAW,EACT,AAAJ,IAAiB,EAAW,EADL,CACU,EACxB,CAAC,EAEN,GAAmB,KAAK,GAAG,CAAC,GAAQ,AAHa,EAI5C,CADkC,CAGpC,EAEF,EACT,IACmD,GAQnD,GAPA,GAAoB,CAClB,MAAO,EACP,eACA,CACF,GAGI,GAAyB,SAAS,CAAlB,EAClB,GAAkB,CAAC,GAAG,CAAlB,EACF,GAAS,OAAO,CAAC,KAAK,CAAG,OACpB,CACL,IAAM,EAAS,EAAe,EAAe,CAAC,EAAU,EACxD,GAAS,OAAO,CAAC,KAAK,CAAG,EAKrB,AAAU,IADA,EAAO,WAAW,GAAG,OAAO,CAAC,GAAW,WAAW,KAC9C,GAAW,MAAM,CAAG,GAAG,AACxC,GAAS,OAAO,CAAC,iBAAiB,CAAC,GAAW,MAAM,CAAE,EAAO,MAAM,CAEvE,CAEJ,GACM,GAAyB,CAAC,EAAc,CAC5C,OAAQ,GAAc,eAAe,CACrC,OAAQ,GACR,OAAQ,CACV,GAqBM,GAAuB,EAAA,WAAiB,CAAC,KAC7C,GAAI,CAAC,GACH,OAKF,CANgB,GAMV,EAAiC,CA3BC,WAMxC,GAAoC,CAAC,IAAjC,GAAoB,OAAO,EAAW,CAAC,EAAc,CACvD,OAAQ,GAAc,eAAe,CACrC,OAAQ,GACR,OAAQ,CACV,IAAM,GAAc,UAAU,GAAK,KAAe,EAAW,GAAM,IAAlB,EAAwB,GAAK,GAAc,KAAK,CAAC,MAAM,EAAI,GAAc,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK,IAAM,EAAe,EAAK,CAAC,EAAE,IAAM,EAAe,KATzK,EAS6L,CAAZ,EAA0B,GATnM,EASwM,CAN5N,CAFQ,EAAS,EAAe,GAAU,EAAA,CAE/B,IADH,GAAS,EAO6M,IAPpL,EAAA,EAOoL,CAAM,CAAG,CAC9O,EARuC,EAQjC,EAA4B,GAAc,eAAe,CAAC,GAAoB,OAAO,CAAC,CAC5F,GAAI,EACF,OAAO,GAAgB,SAAS,CAAC,GACxB,EAFoB,AAEL,KAAY,EAAe,GAGvD,CACA,OAAO,CAAC,EACV,IASE,GAAuC,CAAC,IAApC,EAAuC,CACzC,GAAoB,OAAO,CAAG,EAC9B,MACF,CACA,IAAM,EAAY,EAAW,EAAK,CAAC,EAAE,CAAG,GAGxC,GAA+B,IAA3B,GAAgB,MAAM,EAAuB,MAAb,EAAmB,YACrD,GAAuB,CACrB,KAAM,OACR,GAGF,GAAK,CAAD,EAAY,OAAO,EAAE,AAKzB,GAAI,AAAa,QAAM,CACrB,IAAM,EAAgB,EAAe,CAAC,GAAoB,OAAO,CAAC,CAGlE,GAAI,GAAY,GAAsF,CAAC,GAAG,CAAzE,GAAM,SAAS,CAAC,GAAO,EAAqB,EAAe,IAC1F,OAEF,IAAM,EAAY,GAAgB,SAAS,CAAC,GAAc,EAAqB,EAAY,IACzE,CAAC,GAAG,CAAlB,EACF,GAAuB,CACrB,KAAM,OACR,GAEA,GAAoB,CAClB,MAAO,CACT,GAEF,MACF,CAGA,GAAI,GAAoB,OAAO,EAAI,GAAgB,MAAM,CAAG,EAAG,YAC7D,GAAoB,CAClB,MAAO,GAAgB,MAAM,CAAG,CAClC,GAKF,GAAoB,CAClB,MAAO,GAAoB,OAC7B,AADoC,GAItC,EAAG,CAEH,GAAgB,MAAM,CAGtB,IAAmB,GAAO,EAAuB,EAAtC,CAA8D,GAAqB,GAAW,GAAY,EAAS,EACxH,GAAmB,CAAA,EAAA,EAAA,OAAA,AAAgB,EAAC,IACxC,CAAA,EAAA,EAAA,OAAA,AAAM,EAAC,GAAY,GACd,GAGL,GAHW,CAIb,GAaA,EAAA,SAAe,CAAC,MACV,IAA0B,EAAA,GAAW,AACvC,IAEJ,EAAG,CAAC,GAAsB,GAAwB,GAAU,EAC5D,IAAM,GAAa,KACb,KAGJ,CAHU,GAGG,GACb,IAAiB,GACb,GACF,EAAO,GADG,AAGd,EACM,GAAc,CAAC,EAAO,KACrB,KAGL,CAHW,GAGE,GACT,GACF,EAAQ,EAAO,EADJ,CAGf,EACM,GAAc,CAAC,EAAO,EAAU,EAAQ,KAC5C,GAAI,EACF,IAAI,GAAM,CADE,KACI,GAAK,EAAS,MAAM,EAAI,GAAM,KAAK,CAAC,CAAC,EAAK,IAAM,IAAQ,CAAQ,CAAC,EAAE,EACjF,CADoF,KAEtF,MACK,GAAI,KAAU,EACnB,OAEE,CAH2B,EAI7B,EAAS,EAAO,EAAU,CADd,CACsB,GAEpC,GAAc,EAChB,EACM,GAAU,EAAA,MAAY,EAAC,GACvB,GAAiB,CAAC,EAAO,EAAQ,EAAa,cAAc,CAAE,EAAS,SAAS,IACpF,IAAI,EAAS,EACT,EAAW,EACf,GAAI,EAAU,CAQZ,IAAM,EAPN,AAOkB,GAPP,MAAM,OAAO,CAAC,IAAS,GAAM,KAAK,GAAK,EAAE,AAAF,EAOvB,SAAS,CAAC,GAAa,EAAqB,EAAQ,IAC7D,CAAC,GAAG,CAAlB,EACF,EAAS,IAAI,CAAC,GACM,YAAY,CAAvB,IACT,EAAS,MAAM,CAAC,EAAW,GAC3B,EAAS,eAEb,CACA,GAAgB,EAAO,EAAU,GACjC,GAAY,EAAO,EAAU,EAAQ,CACnC,QACF,GACI,AAAC,GAAyB,AAAC,GAAS,CAAC,EAAM,OAAO,EAAK,EAAD,AAAO,IAApC,GAAoC,AAAO,GAAG,AACzE,GAAY,EAAO,KAEA,IAAjB,GAA0C,UAAjB,GAA4B,GAAQ,OAAO,EAAqB,UAAjB,GAA4B,CAAC,GAAQ,OAAA,AAAO,EAAE,CACxH,GAAS,OAAO,CAAC,IAAI,EAEzB,EAwBM,GAAkB,CAAC,EAAO,KAC9B,GAAI,CAAC,EACH,OAEiB,CAHJ,GAGQ,CAAnB,IACF,GAAY,EAAO,eAErB,IAAI,EAAW,GACK,CAAC,GAAG,CAApB,GACiB,KAAf,IAAmC,YAAY,CAA1B,IACvB,EAAW,GAAM,MAAM,CAAG,IAG5B,AACI,IADsB,SAAd,EAAuB,EAAI,EAAC,EACzB,GAAG,CAChB,GAAW,EAET,IAAa,GAAM,MAAM,EAAE,CAC7B,EAAW,EAAC,GAIhB,GADA,EA5CF,AA4Ca,SA5CJ,AAAe,CA6CP,AA7CY,CAAE,CAAS,EACtC,GAAc,CAAC,GAAG,CAAd,EACF,OAAO,CAAC,EAEV,IAAI,EAAY,EAChB,MAAO,CAAM,CAEX,GAAkB,SAAd,GAAwB,IAAc,GAAM,MAAM,EAAkB,aAAd,GAA0C,CAAC,GAAG,CAAlB,EACpF,OAAO,CAAC,EAIV,IAAM,EAAY,EAAc,kBAAoB,iBAC9C,EAAS,GAAS,aAAa,CAAC,CAAC,CAAC,EAAE,EAAU,EAAE,EAAE,EAAU,EAAE,CAAC,EAGrE,GAAI,AAAC,GAAW,EAAO,KAAR,OAAoB,CAAC,cAAe,EAAO,QAAQ,EAA6C,QAAQ,CAAjD,EAAO,YAAY,CAAC,iBAGxF,OAAO,EAFP,GAA2B,SAAd,EAAuB,EAAI,CAAC,CAI7C,CACF,EAsB4B,EAAU,IAEpC,GAAU,EACZ,EACM,GAAc,IAClB,GAAY,OAAO,EAAG,EACtB,GAAmB,IACf,GACF,EAAc,EAAO,GAAI,KADR,IAGnB,GAAY,EAAO,EAAW,EAAE,CAAG,KAAM,QAC3C,EA2KM,GAAc,IAClB,IAAW,GACP,GAAe,CAAC,GAAY,OAAO,EAAE,AACvC,GAAW,EAEf,EACM,GAAa,IAEjB,AAAI,EAAkC,IACpC,GAAS,MADwC,CACjC,CAAC,KAAK,IAGxB,IAAW,GACX,GAAW,OAAO,EAAG,EACrB,GAAY,OAAO,EAAG,EAClB,GAA8C,CAAC,IAAjC,GAAoB,OAAO,EAAW,GACtD,GAAe,EAAO,EAAe,CAD4B,AAC3B,GAAoB,OAAO,CAAC,CAAE,QAC3D,GAAc,GAA2B,IAAI,CAAnB,GACnC,GAAe,EAAO,GAAY,OAAQ,YACjC,GACT,GAAgB,EAAO,GAAO,EADR,MAGxB,GAAY,EAAO,QACrB,EACM,GAAoB,IACxB,IAAM,EAAW,EAAM,MAAM,CAAC,KAAK,CAC/B,KAAe,IACjB,GAAmB,GADQ,AAE3B,IAAiB,GACb,GACF,EAAc,EAAO,EAAU,MADd,IAIJ,IAAI,CAAjB,EACE,AAAC,GAAqB,GACxB,GAAY,EAAO,EADe,GACT,IADF,KAIzB,GAAW,EAEf,EACM,GAAwB,IAC5B,IAAM,EAAQ,OAAO,EAAM,aAAa,CAAC,YAAY,CAAC,qBAClD,IAAoB,OAAO,GAAK,GAClC,GAAoB,CADqB,MAEvC,QACA,EACA,OAAQ,OACV,EAEJ,EACM,GAAyB,IAC7B,GAAoB,OAClB,EACA,MAAO,OAAO,EAAM,aAAa,CAAC,YAAY,CAAC,sBAC/C,OAAQ,OACV,GACA,GAAQ,OAAO,EAAG,CACpB,EACM,GAAoB,IACxB,IAAM,EAAQ,OAAO,EAAM,aAAa,CAAC,YAAY,CAAC,sBACtD,GAAe,EAAO,EAAe,CAAC,EAAM,CAAE,gBAC9C,GAAQ,OAAO,EAAG,CACpB,EACM,GAAmB,GAAS,IAChC,IAAM,EAAW,GAAM,KAAK,GAC5B,EAAS,MAAM,CAAC,EAAO,GACvB,GAAY,EAAO,EAAU,eAAgB,CAC3C,OAAQ,EAAK,CAAC,EAAM,AACtB,EACF,EACM,GAAyB,IAC7B,GAAY,EAAO,KAAM,eAAgB,CACvC,OAAQ,EACV,EACF,EACM,GAAuB,IACvB,GACF,GADQ,AACI,EAAO,eAEnB,GAAW,EAEf,EAGM,GAAkB,IAEjB,EAAM,aAAa,CAAC,QAAQ,CAAC,EAAM,MAAM,GAAG,AAG7C,EAAM,MAAM,CAAC,YAAY,CAAC,QAAU,GACtC,CAD0C,CACpC,cAAc,EAExB,EAGM,GAAc,IAEb,EAAM,aAAa,CAAC,QAAQ,CAAC,EAAM,MAAM,GAAG,CAGjD,GAAS,OAAO,CAAC,KAAK,GAClB,GAAiB,GAAW,OAAO,EAAI,GAAS,OAAO,CAAC,YAAY,CAAG,GAAS,OAAO,CAAC,cAAc,EAAK,GAAG,AAChH,GAAS,OAAO,CAAC,MAAM,GAEzB,GAAW,OAAO,EAAG,EACvB,EACM,GAAuB,IACvB,AAAC,GAAgC,KAAf,CAAqB,GAAC,IAAvB,AAA2B,AAC9C,GADiD,AAC5B,EAEzB,EACI,GAAQ,GAAY,GAAW,MAAM,CAAG,EAC5C,GAAQ,KAAU,EAAW,EAAZ,CAAkB,MAAM,CAAG,EAAc,OAAV,EAAU,CAAI,CAC9D,IAAI,GAAiB,GA8BrB,OA7BI,GAIF,IAAiB,EAJN,CAIsB,MAAM,CAAC,CAAC,EAAK,EAAQ,KACpD,IAAM,EAAQ,EAAQ,GAkBtB,OAjBI,EAAI,MAAM,CAAG,GAAK,CAAG,CAAC,EAAI,MAAM,CAAG,EAAE,CAAC,KAAK,GAAK,EAClD,CAAG,CAAC,EAAI,CADiD,KAC3C,CAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GASjC,EAAI,IAAI,CAAC,CACP,IAAK,QACL,EACA,QACA,QAAS,CAAC,EAAO,AACnB,GAEK,CACT,EAAG,GAAE,EAEH,GAAgB,IAClB,KAD2B,AAGtB,CACL,aAAc,CAAC,EAAQ,CAAC,CAAC,GAAK,CAAC,CAC7B,GAAG,CAAK,CACR,UA7T2B,CA6ThB,GAzTb,GAyT2B,AA5TvB,EAAM,SAAS,EACjB,AADmB,EACb,SAAS,CAAC,IAEd,EAAM,mBAAmB,EAAE,CAGX,CAAC,IAAjB,CAAsB,GAAC,CAAC,YAAa,aAAa,CAAC,QAAQ,CAAC,EAAM,GAAG,GAAG,CAC1E,GAAe,CAAC,GAChB,GAAU,CAAC,IAIO,KAAK,CAArB,EAAM,KAAK,EACb,OAAQ,EAAM,GAAG,EACf,IAAK,OACC,IAAa,IAEf,EAAM,aAF4B,CAEd,GACpB,GAAuB,CACrB,KAAM,QACN,UAAW,OACX,OAAQ,iBACR,CACF,IAEF,KACF,KAAK,MACC,IAAa,IAEf,EAAM,aAF4B,CAEd,GACpB,GAAuB,CACrB,KAAM,MACN,UAAW,WACX,OAAQ,iBACR,CACF,IAEF,KACF,KAAK,SAEH,EAAM,cAAc,GACpB,GAAuB,CACrB,KAAM,CAAC,EACP,UAAW,WACX,OAAQ,iBACR,CACF,GACA,GAAW,GACX,KACF,KAAK,WAEH,EAAM,cAAc,GACpB,GAAuB,CACrB,KAjmBK,CAimBC,CACN,UAAW,OACX,OAAQ,iBACR,CACF,GACA,GAAW,GACX,KACF,KAAK,YAEH,EAAM,cAAc,GACpB,GAAuB,CACrB,KAAM,EACN,UAAW,OACX,OAAQ,iBACR,CACF,GACA,GAAW,GACX,KACF,KAAK,UAEH,EAAM,cAAc,GACpB,GAAuB,CACrB,KAAM,CAAC,EACP,UAAW,WACX,OAAQ,iBACR,CACF,GACA,GAAW,GACX,KACF,KAAK,YACC,CAAC,GAAY,EACf,GAAU,GAEV,GAAgB,EAHY,AAGL,YAEzB,KACF,KAAK,aACC,CAAC,GAAY,EACf,GAAU,CAAC,GAEX,GAAgB,CAHY,CAGL,QAEzB,KACF,KAAK,QACH,GAAoC,CAAC,IAAjC,GAAoB,OAAO,EAAW,GAAW,CACnD,IAAM,EAAS,EAAe,CAAC,GAAoB,OAAO,CAAC,CACrD,IAAW,GAAoB,EAAkB,GAIvD,GADA,EAAM,EAH2D,YAG7C,GAChB,EACF,OAEF,CAHc,EAGC,EAAO,EAAQ,gBAG1B,GACF,GAAS,OAAO,CADA,AACC,iBAAiB,CAAC,GAAS,OAAO,CAAC,KAAK,CAAC,MAAM,CAAE,GAAS,OAAO,CAAC,KAAK,CAAC,MAAM,CAEnG,MAAW,CAAJ,EAA+B,KAAf,KAAmD,IAA9B,GAAqC,EAC3E,GAEF,EAAM,KAFM,SAEQ,GAEtB,GAAe,EAAO,GAAY,eAAgB,aAEpD,KACF,KAAK,SACC,IAEF,EAAM,KAFO,SAEO,GAEpB,EAAM,eAAe,GACrB,GAAY,EAAO,WACV,IAAiC,KAAf,IAAqB,GAAY,CAAlC,EAAwC,MAAM,CAAG,GAAK,CAAA,CAAW,GAAG,AAE9F,EAAM,cAAc,GAEpB,EAAM,eAAe,GACrB,GAAY,IAEd,KACF,KAAK,YAEH,GAAI,GAAY,CAAC,GAA2B,KAAf,IAAqB,GAAM,MAAM,CAAG,EAAG,CAClE,IAAM,EAAwB,CAAC,IAAjB,GAAqB,GAAM,MAAM,CAAG,EAAI,GAChD,EAAW,GAAM,KAAK,GAC5B,EAAS,MAAM,CAAC,EAAO,GACvB,GAAY,EAAO,EAAU,eAAgB,CAC3C,OAAQ,EAAK,CAAC,EAChB,AADsB,EAExB,CACK,IAAY,GAAgB,IAC/B,GAAc,GAD2B,EAAX,CAE9B,GAAU,CAAC,IAEb,KACF,KAAK,SAEH,GAAI,GAAY,CAAC,GAA2B,KAAf,IAAqB,GAAM,MAAM,CAAG,GAAqB,CAAC,IAAjB,GAAoB,CAExF,IAAM,EAAW,GAAM,KAAK,GAC5B,EAAS,MAAM,CAAC,GAAO,GACvB,GAAY,EAAO,EAAU,eAAgB,CAC3C,OAAQ,EAAK,CAAC,AAJF,GAIQ,AACtB,EACF,CACK,IAAY,GAAgB,IAC/B,GAAc,GAD2B,EAAX,CAE9B,GAAU,CAAC,GAIjB,CAEJ,EAqJI,YAAa,GACb,QAAS,GACX,CAAC,CACD,mBAAoB,IAAM,CAAC,CACzB,GAAI,CAAA,EAAG,EAAG,MAAM,CAAC,CACjB,QAAS,EACX,CAAC,CACD,cAAe,IAAM,AAAC,KACpB,EACA,MAAO,GACP,OAAQ,GACR,QAAS,GACT,SAAU,GACV,YAAa,GAGb,wBAAyB,GAAY,GAAK,KAC1C,oBAAqB,EAAe,OAAS,OAC7C,gBAAiB,GAAmB,CAAA,EAAG,EAAG,QAAQ,CAAC,MAAG,EACtD,gBAAiB,GAGjB,aAAc,MACd,IAAK,GACL,eAAgB,OAChB,WAAY,QACZ,KAAM,WACN,SAAU,EACZ,CAAC,CACD,cAAe,IAAM,CAAC,CACpB,SAAU,CAAC,EACX,KAAM,SACN,QAAS,GACX,CAAC,CACD,aAAc,CAAC,CACb,QAAQ,CAAC,CACV,CAAG,CAAC,CAAC,GAAK,CAAC,CACV,GAAI,GAAY,CACd,IAAK,CACP,CAAC,CACD,GAAI,EAAc,CAChB,kBAAmB,CACrB,EAAI,CACF,iBAAkB,CACpB,CAAC,CACD,SAAU,CAAC,EACX,GAAI,CAAC,GAAY,CACf,SAAU,EAAW,GAAiB,GAAS,EACjD,CACF,AADG,CACF,EACD,uBAAwB,IAAM,CAAC,CAC7B,SAAU,CAAC,EACX,KAAM,SACN,QAAS,GACX,CAAC,CAED,YAAa,CAAC,CACZ,OAAK,CACN,GAAK,CAAC,CACL,IAAK,EACL,iBAAkB,EAClB,SAAU,CAAC,EACX,GAAI,CAAC,GAAY,CACf,SAAU,GAAiB,EAC7B,CAAC,CACH,CAAC,CACD,gBAAiB,IAAO,AAAD,EACrB,KAAM,UACN,GAAI,CAAA,EAAG,EAAG,QAAQ,CAAC,CACnB,kBAAmB,CAAA,EAAG,EAAG,MAAM,CAAC,CAChC,IAAK,GACL,YAAa,IAEX,EAAM,cAAc,EACtB,EACF,CAAC,CACD,eAAgB,CAAC,OACf,CAAK,QACL,CAAM,CACP,IACC,IAAM,EAAW,CAAC,EAAW,GAAQ,CAAC,GAAM,EAAE,IAAI,CAAC,GAAU,AAAU,SAAQ,EAAqB,EAAQ,IACtG,IAAW,GAAoB,EAAkB,GACvD,MAAO,CAD0D,AAE/D,IAAK,IAAe,IAAW,EAAe,GAC9C,SAAU,CAAC,EACX,KAAM,SACN,GAAI,CAAA,EAAG,EAAG,QAAQ,EAAE,EAAA,CAAO,CAC3B,YAAa,GACb,QAAS,GACT,aAAc,GACd,oBAAqB,EACrB,gBAAiB,EACjB,gBAAiB,CACnB,CACF,KACA,aACA,SACA,SACA,GACA,SAAU,IAAa,aACvB,GACA,QAAS,IAA2B,CAAC,IAAjB,YACpB,eACA,eACA,GAEA,WAAY,kBACZ,EACF,CACF,EDpgCA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,QAiCA,IAAM,EAAmB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,MAAO,CACrC,KAAM,kBACN,KAAM,OACN,kBAAmB,CAAC,EAAO,KACzB,GAAM,YACJ,CAAU,CACX,CAAG,EACE,WACJ,CAAS,cACT,CAAY,cACZ,CAAY,cACZ,CAAY,MACZ,CAAI,CACL,CAAG,EACJ,MAAO,CAAC,CACN,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,GAAG,CAAA,CAAE,CAAC,CAAE,EAAO,GAAG,AAC/C,EAAG,CACD,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,GAAG,CAAA,CAAE,CAAC,CAAE,CAAM,CAAC,CAAC,OAAO,EAAE,CAAA,EAAA,EAAA,OAAA,AAAU,EAAC,GAAA,CAAO,CAAC,AACzE,EAAG,CACD,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,EAAO,SAAS,AAC3D,EAAG,CACD,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,EAAO,KAAK,AACnD,EAAG,CACD,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,GAAgB,EAAO,YAAY,AAC1E,EAAG,EAAO,IAAI,CAAE,GAAa,EAAO,SAAS,CAAE,GAAgB,EAAO,YAAY,CAAE,GAAgB,EAAO,YAAY,CAAC,AAC1H,CACF,GAAG,CACD,CAAC,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,OAAO,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,cAAc,CAAA,CAAE,CAAC,CAAE,CAC3E,WAAY,SACd,EAEA,yBAA0B,CACxB,CAAC,CAAC,SAAS,EAAE,EAAA,OAAmB,CAAC,cAAc,CAAA,CAAE,CAAC,CAAE,CAClD,WAAY,SACd,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,GAAG,CAAA,CAAE,CAAC,CAAE,CACjC,OAAQ,EACR,SAAU,kBACZ,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CACvC,CAAC,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAChF,aAAc,EAChB,EACA,CAFqB,AAEpB,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAC7E,aAAc,EAChB,EACA,CAAC,AAFoB,CAEnB,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,MAAO,EACP,SAAU,EACZ,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAY,CAAC,IAAI,CAAA,CAAE,CAAC,CAAE,CAC3B,cAAe,EACf,oBAAqB,CACnB,QAAS,iBACX,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CACzD,CAAC,CAAC,GAAG,EAAE,EAAA,OAAY,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CAC5B,QAAS,eACX,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAoB,CAAC,IAAI,CAAA,CAAE,CAAC,CAAE,CACnC,QAAS,EACT,CAAC,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAChF,aAAc,EAChB,EACA,CAFqB,AAEpB,CAAC,CAAC,EAFsB,AAEpB,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAC7E,aAAc,EAChB,EACA,CAFqB,AAEpB,CAAC,GAFuB,AAEpB,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,QAAS,qBACX,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAA,CAAE,CAAC,CAAE,CAC1C,MAAO,CACT,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CAGjE,WAAY,EACZ,cAAe,EACf,YAAa,EACb,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,QAAS,qBACX,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAkB,CAAC,IAAI,CAAA,CAAE,CAAC,CAAE,CACjC,WAAY,GACZ,YAAa,EACb,CAAC,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,IAAI,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAChF,aAAc,EAChB,EACA,CAFqB,AAEpB,CAAC,CAAC,EAFsB,AAEpB,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAE,CAC7E,aAAc,EAChB,EACA,CAAC,AAFoB,CAEnB,GAAG,AAFoB,EAElB,EAAA,OAAkB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CAClC,QAAS,SACX,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAA,CAAE,CAAC,CAAE,CAC1C,MAAO,CACT,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CAC/D,cAAe,EACf,CAAC,CAAC,GAAG,EAAE,EAAA,OAAkB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CAClC,QAAS,WACX,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,CAAE,CACtC,WAAY,CACd,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,WAAW,CAAA,CAAE,CAAC,CAAE,CACjE,WAAY,EACZ,cAAe,EACf,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,WAAY,GACZ,cAAe,EACjB,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,WAAW,CAAC,CAAC,EAAE,EAAA,OAAgB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CAC/F,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,WAAY,EACZ,cAAe,CACjB,CACF,EACA,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,SAAU,EACV,aAAc,WACd,QAAS,CACX,EACA,SAAU,CAAC,CACT,MAAO,CACL,WAAW,CACb,EACA,MAAO,CACL,MAAO,MACT,CACF,EAAG,CACD,MAAO,CACL,KAAM,OACR,EACA,MAAO,CACL,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,GAAG,CAAA,CAAE,CAAC,CAAE,CACjC,OAAQ,EACR,SAAU,kBACZ,CACF,CACF,EAAG,CACD,MAAO,CACL,cAAc,CAChB,EACA,MAAO,CACL,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,KAAK,CAAA,CAAE,CAAC,CAAE,CACnC,QAAS,CACX,CACF,CACF,EAAG,CACD,MAAO,CACL,UAAU,CACZ,EACA,MAAO,CACL,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,SAAS,CAAA,CAAE,CAAC,CAAE,CACvC,SAAU,MACZ,CACF,CACF,EAAE,AACJ,GACM,EAA2B,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,MAAO,CAC7C,KAAM,kBACN,KAAM,cACR,GAAG,CAED,SAAU,WACV,MAAO,EACP,IAAK,MACL,UAAW,oBACb,GACM,EAA6B,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAA,OAAU,CAAE,CACpD,KAAM,kBACN,KAAM,gBACR,GAAG,CACD,YAAa,CAAC,EACd,QAAS,EACT,WAAY,QACd,GACM,EAA6B,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAA,OAAU,CAAE,CACpD,KAAM,kBACN,KAAM,iBACN,kBAAmB,CAAC,EAAO,KACzB,GAAM,YACJ,CAAU,CACX,CAAG,EACJ,MAAO,CAAC,EAAO,cAAc,CAAE,EAAW,SAAS,EAAI,EAAO,kBAAkB,CAAC,AACnF,CACF,GAAG,CACD,QAAS,EACT,YAAa,CAAC,EACd,SAAU,CAAC,CACT,MAAO,CACL,WAAW,CACb,EACA,MAAO,CACL,UAAW,gBACb,CACF,EAAE,AACJ,GACM,EAAqB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAA,OAAM,CAAE,CACxC,KAAM,kBACN,KAAM,SACN,kBAAmB,CAAC,EAAO,KACzB,GAAM,YACJ,CAAU,CACX,CAAG,EACJ,MAAO,CAAC,CACN,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,MAAM,CAAA,CAAE,CAAC,CAAE,EAAO,MAAM,AACrD,EAAG,EAAO,MAAM,CAAE,EAAW,aAAa,EAAI,EAAO,mBAAmB,CAAC,AAC3E,CACF,GAAG,CAAA,EAAA,EAAA,OAAA,AAAS,EAAC,CAAC,OACZ,CAAK,CACN,GAAK,CAAC,CACL,OAAQ,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,MAAM,CAAC,KAAK,CAC1C,SAAU,CAAC,CACT,MAAO,CACL,eAAe,CACjB,EACA,MAAO,CACL,SAAU,UACZ,CACF,EAAE,CACJ,CAAC,GACK,EAAoB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAA,OAAK,CAAE,CACtC,KAAM,kBACN,KAAM,OACR,GAAG,CAAA,EAAA,EAAA,OAAS,AAAT,EAAU,CAAC,OACZ,CAAK,CACN,GAAK,CAAC,CACL,GAAG,EAAM,UAAU,CAAC,KAAK,CACzB,SAAU,MACZ,CAAC,IACK,EAAsB,CAAA,EAAA,EAAA,MAAM,AAAN,EAAO,MAAO,CACxC,KAAM,kBACN,KAAM,SACR,GAAG,CAAA,EAAA,EAAA,OAAA,AAAS,EAAC,CAAC,OACZ,CAAK,CACN,GAAK,CAAC,CACL,MAAO,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,IAAI,CAAC,SAAS,CACnD,QAAS,YACX,CAAC,GACK,EAAwB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,MAAO,CAC1C,KAAM,kBACN,KAAM,WACR,GAAG,CAAA,EAAA,EAAA,OAAS,AAAT,EAAU,CAAC,OACZ,CAAK,CACN,GAAK,CAAC,CACL,MAAO,AAAC,GAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,IAAI,CAAC,SAAS,CACnD,QAAS,YACX,CAAC,GACK,EAAsB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,KAAM,CACvC,KAAM,kBACN,KAAM,SACR,GAAG,CAAA,EAAA,EAAA,OAAA,AAAS,EAAC,CAAC,OACZ,CAAK,CACN,GAAK,CAAC,CACL,UAAW,OACX,OAAQ,EACR,QAAS,QACT,UAAW,OACX,SAAU,OACV,SAAU,WACV,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,MAAM,CAAA,CAAE,CAAC,CAAE,CACpC,UAAW,GACX,QAAS,OACT,SAAU,SACV,eAAgB,aAChB,WAAY,SACZ,OAAQ,UACR,WAAY,EACZ,UAAW,aACX,QAAS,IACT,wBAAyB,cACzB,cAAe,EACf,YAAa,GACb,aAAc,GACd,CAAC,EAAM,WAAW,CAAC,EAAE,CAAC,MAAM,CAAE,CAC5B,UAAW,MACb,EACA,CAAC,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,OAAO,CAAA,CAAE,CAAC,CAAE,CACpC,gBAAiB,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAE3D,uBAAwB,CACtB,gBAAiB,aACnB,CACF,EACA,0BAA2B,CACzB,QAAS,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,eAAe,CAC7D,cAAe,MACjB,EACA,CAAC,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAA,CAAE,CAAC,CAAE,CACzC,gBAAiB,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,KAAK,AAC7D,EACA,0BAA2B,CACzB,gBAAiB,EAAM,KAAK,CAAC,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,eAAe,EAC7H,CAAC,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,OAAO,CAAA,CAAE,CAAC,CAAE,CACpC,gBAAiB,EAAM,KAAK,CAAC,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,CAAA,EAAG,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,YAAY,CAAA,CAAE,EAEzL,uBAAwB,CACtB,gBAAiB,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,QAAQ,AAChE,CACF,EACA,CAAC,CAAC,EAAE,EAAE,EAAA,OAAmB,CAAC,YAAY,CAAA,CAAE,CAAC,CAAE,CACzC,gBAAiB,EAAM,KAAK,CAAC,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAE,CAAA,EAAG,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,MAAM,CAAC,YAAY,CAAA,CAAE,CAC3L,CACF,CACF,EACF,CAAC,GACK,EAAyB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAA,OAAa,CAAE,CACnD,KAAM,kBACN,KAAM,YACR,GAAG,CAAA,EAAA,EAAA,OAAA,AAAS,EAAC,CAAC,OACZ,CAAK,CACN,GAAK,AAAC,EACL,gBAAiB,CAAC,EAAM,IAAI,EAAI,CAAA,CAAK,CAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAC/D,IAAK,CAAC,CACR,CAAC,IACK,EAAsB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,KAAM,CACvC,KAAM,kBACN,KAAM,SACR,GAAG,CACD,QAAS,EACT,CAAC,CAAC,GAAG,EAAE,EAAA,OAAmB,CAAC,MAAM,CAAA,CAAE,CAAC,CAAE,CACpC,YAAa,EACf,CACF,GAEM,EAA4B,EAAA,UAAgB,CAA7B,AAA8B,SAAS,AAAa,CAAO,CAAhD,AAAkD,CAAG,EACnF,IA0KI,EA1KE,EAAQ,CAAA,EAAA,EAAA,eAAA,AAAe,EAAC,CAC5B,MAAO,EACP,KAAM,iBACR,GAGM,cACJ,GAAe,CAAK,eACpB,GAAgB,CAAK,YACrB,GAAa,CAAK,cAClB,GAAe,CAAK,CACpB,UAAW,CAAa,WACxB,CAAS,WACT,EAAY,IAAe,EAA0B,CAAA,EAAA,EAAA,GAAA,AAAI,AAA/B,EAAgC,CAAlB,CAAkB,OAAS,CAAE,CACnE,CADiD,QACvC,OACZ,EAAA,CAAE,AAAC,aACH,EAAc,CAAC,EAAM,QAAQ,eAC7B,GAAgB,CAAK,WACrB,EAAY,OAAO,WACnB,EAAY,OAAO,iBACnB,CAAe,cACf,EAAe,EAAM,QAAQ,CAAG,EAAE,CAAG,IAAI,kBACzC,GAAmB,CAAK,sBACxB,GAAuB,CAAK,CAC5B,YAAW,CAAK,wBAChB,GAAyB,CAAK,CAC9B,kBAAkB,EAAK,eACvB,GAAgB,CAAK,eACrB,CAAa,uBACb,EAAwB,EAAK,gBAC7B,EAAiB,MAAM,UACvB,GAAW,CAAK,WAChB,IAAY,CAAK,kBACjB,GAAmB,GAAQ,CAAC,CAAC,EAAE,EAAA,CAAM,mBACrC,EAAiB,cACjB,EAAY,CACZ,eAAgB,EAAkB,CAClC,uBAAoB,SACpB,EAAO,mBACP,GAAoB,CAAC,EAAM,QAAQ,CACnC,GAAI,EAAM,oBACV,GAAqB,EAAK,CAC1B,WAAY,EAAc,WAC1B,GAAY,CAAC,CAAC,CACd,iBAAkB,EAAoB,CACtC,aAAc,EAAgB,CAC9B,YAAU,CAAK,aACf,GAAc,UAAU,UACxB,IAAW,CAAK,eAChB,GAAgB,YAAY,UAC5B,EAAQ,CACR,UAAO,mBACP,EAAiB,eACjB,EAAa,QACb,EAAM,MACN,EAAI,aACJ,IAAc,CAAK,UACnB,GAAW,MAAM,SACjB,EAAO,CACP,eAAgB,EAAkB,CAClC,gBAAiB,EAAmB,WACpC,GAAY,IAAuB,EAAkC,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,EAAA,IAAxC,GAAsB,AAAmC,CAAE,CAAC,EAAA,CAAE,AAAC,MAA9B,IACnE,IAAW,CAAK,CAChB,YAAa,EAAe,aAC5B,EAAW,CACX,aAAc,EAAgB,YAC9B,EAAU,aACV,EAAW,CACX,iBAAgB,CAAC,EAAM,QAAQ,MAC/B,GAAO,QAAQ,OACf,GAAQ,CAAC,CAAC,CACV,aAAY,CAAC,CAAC,CACd,MAAO,EAAS,CAChB,GAAG,GACJ,CAAG,EAGE,cACJ,EAAY,eACZ,EAAa,CACb,qBAAkB,wBAClB,EAAsB,eACtB,EAAa,cACb,EAAY,iBACZ,EAAe,gBACf,EAAc,OACd,EAAK,CACL,QAAK,UACL,EAAQ,IACR,EAAE,WACF,EAAS,SACT,EAAO,CACP,cAAW,UACX,EAAQ,aACR,EAAW,YACX,EAAU,gBACV,EAAc,CACf,CAAG,EAAgB,CAClB,GAAG,CAAK,CACR,cAAe,cACjB,GACM,GAAe,CAAC,GAAoB,CAAC,GAAY,IAAS,CAAC,GAC3D,GAAe,CAAC,CAAC,GAAY,CAAmB,KAAA,CAAI,GAAwB,IAAnB,EACzD,CACJ,YAAa,EAAoB,CAClC,CAAG,KACE,CACJ,IAAK,EAAU,CACf,GAAG,GACJ,CAAG,KAEE,GAAiB,KADO,GAAU,EAAO,KAAK,EAAI,CAAA,EAIlD,EAHuC,CAG1B,CACjB,GAAG,CAAK,eACR,WACA,WACA,aACA,kBACA,gBACA,gBACA,GACA,aAA8B,CAAC,IAAjB,GACd,kBACA,EACF,EACM,GAAU,CAhfQ,IACxB,GAAM,SACJ,CAAO,eACP,CAAa,UACb,CAAQ,SACR,CAAO,WACP,CAAS,cACT,CAAY,cACZ,CAAY,cACZ,CAAY,WACZ,CAAS,MACT,CAAI,CACL,CAAG,EACE,EAAQ,CACZ,KAAM,CAAC,OAAQ,GAAY,WAAY,GAAW,UAAW,GAAa,YAAa,GAAgB,eAAgB,GAAgB,eAAe,CACtJ,UAAW,CAAC,YAAY,CACxB,MAAO,CAAC,QAAS,GAAgB,eAAe,CAChD,IAAK,CAAC,MAAO,CAAC,OAAO,EAAE,CAAA,EAAA,EAAA,OAAU,AAAV,EAAW,GAAA,CAAO,CAAC,CAC1C,aAAc,CAAC,eAAe,CAC9B,eAAgB,CAAC,iBAAiB,CAClC,eAAgB,CAAC,iBAAkB,GAAa,qBAAqB,CACrE,OAAQ,CAAC,SAAU,GAAiB,sBAAsB,CAC1D,MAAO,CAAC,QAAQ,CAChB,QAAS,CAAC,UAAU,CACpB,QAAS,CAAC,UAAU,CACpB,UAAW,CAAC,YAAY,CACxB,OAAQ,CAAC,SAAS,CAClB,WAAY,CAAC,aAAa,CAC1B,QAAS,CAAC,UAAU,AACtB,EACA,MAAO,CAAA,EAAA,EAAA,OAAA,AAAc,EAAC,EAAO,EAAA,2BAA2B,CAAE,GAC5D,EAidoC,IAC5B,GAAyB,CAC7B,MAAO,CACL,MAAO,GACP,OAAQ,GACR,GAAG,EAAK,AACV,EACA,UAAW,CACT,KAAM,EACN,QAAS,GACT,GAAG,CAAe,CAClB,GAAG,EAAS,AACd,CACF,EACM,CAAC,GAAa,GAAa,CAAG,CAAA,EAAA,EAAA,OAAA,AAAO,EAAC,UAAW,CACrD,YAAa,yBACb,cACA,GACA,UAAW,GAAQ,OAAO,CAC1B,gBAAiB,GACjB,IAAK,EACP,GACM,CAAC,GAAW,GAAW,CAAG,CAAA,EAAA,EAAA,OAAA,AAAO,EAAC,QAAS,CAC/C,YAAa,EAAA,OAAK,wBAClB,GACA,cACA,UAAW,GAAQ,KAAK,AAC1B,GACM,CAAC,GAAY,GAAY,CAAG,CAAA,EAAA,EAAA,OAAA,AAAO,EAAC,SAAU,CAClD,YAAa,EAAA,OAAM,wBACnB,cACA,GACA,UAAW,GAAQ,MAAM,CACzB,gBAAiB,eACf,EACA,MAAO,CACL,MAAO,GAAW,GAAS,WAAW,CAAG,IAC3C,EACA,KAAM,eACN,YACA,KAAM,EACR,CACF,GAEM,GAAyB,IAAW,CACxC,IADuC,MAC5B,GAAQ,GAAG,UACtB,EACA,GAAG,GAAa,EAAO,CACzB,CAAC,CA2BD,GA1BI,GACE,GAAM,IADE,EACI,CAAG,GAAG,CAElB,EADE,GACe,GAAW,GAAO,GAAwB,AAD7C,IAEL,GACQ,GAAY,GAAO,GAAwB,CADtC,GAGL,GAAM,GAAG,CAAC,CAAC,EAAQ,KAClC,GAAM,CACJ,KAAG,CACH,GAAG,EACJ,CAAG,GAAuB,OACzB,CACF,GACA,MAAoB,CAAA,AAAb,EAAa,EAAA,GAAA,AAAI,EAAC,EAAA,AAAP,OAAW,CAAE,CAC7B,MAAO,GAAe,GACtB,KAAM,GACN,GAAG,CAAe,CAClB,GAAG,GAAuB,SAAS,CAAC,IAAI,AAC1C,EAAG,EACL,IAGK,IAAwB,MAAT,AAAe,KACvC,EAAiB,GAAY,GAAO,GAAwB,GAAA,EAE1D,GAAY,CAAC,GAAK,MAAM,OAAO,CAAC,GAAiB,CACnD,IAAM,EAAO,EAAe,MAAM,CAAG,EACjC,EAAC,IAAW,EAAO,GAAG,AAExB,CADA,EAAiB,EAAe,MAAM,CAAC,EAAG,GAAA,EAC3B,IAAI,CAAC,AAAa,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,CAAP,MAAe,CAC5C,UAAW,GAAQ,GAAG,CACtB,SAAU,GAAiB,EAC7B,EAAG,EAAe,MAAM,EAE5B,CAaA,IAAM,GAAc,KAZO,GAAuB,CAAA,EAAA,EAAA,CAAb,GAAkB,AAAL,EAAM,AAYjB,KAZuB,CAAd,AAC9C,SAAU,CAAc,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,EAAwB,CACnD,UAAW,GAAQ,UAAU,CAC7B,WAAY,GACZ,UAAW,MACX,SAAU,EAAO,KAAK,AACxB,GAAiB,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,EAAqB,CACzC,UAAW,GAAQ,OAAO,CAC1B,WAAY,GACZ,SAAU,EAAO,QACnB,AAD2B,GAE7B,AADK,EACF,EAAO,IAAG,EAaP,GAAe,KAXO,CAAC,EAAQ,KAEnC,GAAM,IASiC,CARrC,CAAG,CACH,GAAG,EACJ,CAAG,EACJ,MAAoB,CAAb,AAAa,EAAA,EAAA,GAAA,AAAI,EAAC,EAAP,GAAa,CAC7B,GAAG,CAAU,CACb,SAAU,GAAe,EAC3B,EAAG,GACL,EAEM,GAAmB,CAAC,EAAQ,KAChC,IAAM,EAAc,GAAe,QACjC,QACA,CACF,GACA,OAAO,GAAa,CAClB,GAAG,CAAW,CACd,UAAW,GAAQ,MACrB,AAD2B,EACxB,EAAQ,CACT,SAAU,CAAW,CAAC,gBAAgB,OACtC,aACA,EACF,EAAG,GACL,EACM,GAA0B,GAAuB,SAAS,CAAC,cAAc,CACzE,GAA0B,GAAuB,SAAS,CAAC,cAAc,CAC/E,MAAoB,CAAb,AAAa,EAAA,EAAA,IAAA,AAAK,EAAC,CAAR,CAAQ,QAAc,CAAE,CACxC,SAAU,CAAc,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,EAAkB,CAC7C,IAAK,EACL,UAAW,CAAA,EAAA,EAAA,OAAA,AAAI,EAAC,GAAQ,IAAI,CAAE,GAC9B,WAAY,GACZ,GAAG,GAAa,GAAM,CACtB,SAAU,GAAY,IACpB,YACA,EACA,WAAW,EACX,KAAe,UAAT,GAAmB,aAAU,EACnC,gBAAiB,KACjB,WAAY,CACV,IAAK,GACL,UAAW,GAAQ,SAAS,gBAC5B,EACA,YAAa,IACP,EAAM,MAAM,GAAK,EAAM,aAAa,EAAE,AACxC,GAAqB,EAEzB,EACA,GAAI,CAAC,IAAgB,EAAA,CAAY,EAAK,CACpC,aAA2B,CAAb,AAAa,EAAA,EAAA,IAAA,AAAK,EAAC,CAAR,CAAkC,CACzD,UAAW,GAAQ,YAAY,CAC/B,WAAY,GACZ,SAAU,CAAC,GAA4B,CAAA,EAAA,EAAA,GAAA,AAAI,EAAC,EAAlB,AAA8C,CACtE,GAAG,IAAe,CAClB,EAFmC,WAErB,EACd,MAAO,EACP,WAAY,GACZ,GAAG,EAAuB,CAC1B,UAAW,CAAA,EAAA,EAAA,OAAA,AAAI,EAAC,GAAQ,cAAc,CAAE,IAAyB,WACjE,SAAU,CACZ,GAAK,KAAM,GAA4B,CAAA,EAAA,EAAA,GAAI,AAAJ,EAAK,EAA4B,AAA9C,CACxB,GAAG,IAAwB,CAC3B,EAFmC,OAEzB,EACV,aAAc,GAAY,EAAY,GACtC,MAAO,GAAY,EAAY,GAC/B,WAAY,GACZ,GAAG,EAAuB,CAC1B,UAAW,CAAA,EAAA,EAAA,OAAA,AAAI,EAAC,GAAQ,cAAc,CAAE,IAAyB,WACjE,SAAU,EACZ,GAAK,KACP,AADY,EAEd,CAAC,AACH,EACA,WAAY,CACV,UAAW,GAAQ,KAAK,UACxB,WACA,GACA,GAAG,IACL,AADoB,CAEtB,EACF,GAAI,GAAwB,CAAA,EAAA,EAAA,GAAb,AAAa,AAAI,EAAC,EAAoB,CACnD,GAAI,GADoB,AAExB,GAAG,EAAW,CACd,SAAuB,CAAb,AAAa,EAAA,EAAA,IAAA,AAAK,EAAC,CAAR,CAA2B,CAC9C,GAAI,GACJ,GAAG,EAAU,CACb,SAAU,CAAC,IAAqC,IAA1B,AAA8B,GAAf,MAAM,CAAsB,CAAF,AAAE,EAAA,EAAA,GAAA,AAAI,EAAC,EAAqB,CACzF,UAAW,GAAQ,OAAO,CAC1B,WAAY,GACZ,SAAU,EACZ,GAAK,KAAgC,IAA1B,CAA+B,EAAhB,MAAM,EAAW,GAAa,GASnD,KAT0E,CAAxB,AAAwB,CAAb,CAAa,EAAA,GAAA,AAAI,EAAC,EAAuB,CAA9B,AAC3E,UAAW,GAAQ,SAAS,CAC5B,WAAY,GACZ,KAAM,eACN,YAAa,IAEX,EAAM,cAAc,EACtB,EACA,SAAU,EACZ,GAAW,GAAe,MAAM,CAAG,EAAiB,CAAA,CAAb,CAAa,EAAA,GAAA,AAAI,EAAC,GAAP,AAAoB,CACpE,GAAI,GACJ,GAAG,EAAY,CACf,SAAU,GAAe,GAAG,CAAC,CAAC,EAAQ,IACpC,AAAI,GACK,GAAY,CACjB,EAFS,EAEJ,EAAO,GAAG,CACf,MAAO,EAAO,KAAK,CACnB,SAAU,EAAO,OAAO,CAAC,GAAG,CAAC,CAAC,EAAS,IAAW,GAAiB,EAAS,EAAO,KAAK,CAAG,GAC7F,GAEK,GAAiB,EAAQ,GAEpC,GAAK,KAAK,AACZ,EACF,GAAK,KAAK,AACZ,EACF,oBA+ce","ignoreList":[0,1]}