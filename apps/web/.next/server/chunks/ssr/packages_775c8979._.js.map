{"version":3,"sources":["turbopack:///[project]/packages/common/constants/src/paths/utils/path-builder.ts","turbopack:///[project]/packages/common/constants/src/paths/utils/public-paths-to-record.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/any-entity-id.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/iam.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/shared.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/table-names.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/entity-kind.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/wms.ts","turbopack:///[project]/packages/common/constants/src/AuthProviders.ts","turbopack:///[project]/packages/common/constants/src/EnvValue.ts","turbopack:///[project]/packages/common/constants/src/LogFormat.ts","turbopack:///[project]/packages/common/constants/src/LogLevel.ts","turbopack:///[project]/packages/common/constants/src/NodeEnvValue.ts","turbopack:///[project]/packages/common/constants/src/Pagination.ts","turbopack:///[project]/packages/common/constants/src/_generated/ALL_LOCALES.generated.ts","turbopack:///[project]/packages/common/constants/src/_generated/asset-paths.ts","turbopack:///[project]/packages/common/constants/src/paths/asset-paths.ts","turbopack:///[project]/packages/common/constants/src/SubscriptionPlanValue.ts","turbopack:///[project]/packages/shared/domain/src/common.ts","turbopack:///[project]/packages/shared/domain/src/entities/AuditLog/AuditLog.model.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids.ts","turbopack:///[project]/packages/shared/domain/src/entities/File/File.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/File/schemas/UploadPath.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/Organization.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/OrganizationType.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/SubscriptionStatus.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/SubscriptionTier.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Team/Team.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/schemas/UserGender.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/schemas/UserRole.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/User.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/User.plans.ts","turbopack:///[project]/packages/shared/domain/src/entities.ts","turbopack:///[project]/packages/shared/domain/src/value-objects/paths.ts","turbopack:///[project]/packages/shared/domain/src/index.ts","turbopack:///[project]/packages/shared/domain/src/value-objects/index.ts","turbopack:///[project]/packages/core/env/src/server.ts","turbopack:///[project]/packages/core/env/src/common.ts","turbopack:///[project]/node_modules/effect/src/ConfigProvider.ts"],"sourcesContent":["import { BS } from \"@beep/schema\";\nimport type { StringTypes, UnsafeTypes } from \"@beep/types\";\nimport * as A from \"effect/Array\";\nimport * as F from \"effect/Function\";\nimport type * as R from \"effect/Record\";\nimport * as Str from \"effect/String\";\nimport * as Struct from \"effect/Struct\";\nexport namespace PathBuilder {\n  type Segment<S extends string> = S extends \"\" ? never : S extends `/${string}` ? never : S;\n\n  export interface Instance<R extends StringTypes.NonEmptyString> {\n    <S extends StringTypes.NonEmptyString>(segment: Segment<S>): `${R}/${S}`;\n\n    readonly root: R;\n\n    child<S extends StringTypes.NonEmptyString>(child: Segment<S>): Instance<`${R}/${S}`>;\n  }\n\n  export type UrlPathLiteral = `/${string}`;\n\n  export type PathValue = UrlPathLiteral | ((...args: UnsafeTypes.UnsafeArray) => PathValue) | PathCollection;\n\n  export interface PathCollection {\n    readonly [segment: string]: PathValue;\n  }\n\n  export type SafeStringPath<T extends UrlPathLiteral> = BS.URLPath.Branded<T>;\n\n  export type SafePathValue<T> = T extends UrlPathLiteral\n    ? SafeStringPath<T>\n    : T extends (...args: infer A) => infer R\n      ? (...args: A) => SafePathValue<R>\n      : T extends readonly unknown[]\n        ? { readonly [K in keyof T]: SafePathValue<T[K]> }\n        : T extends PathCollection\n          ? { readonly [K in keyof T]: SafePathValue<T[K]> }\n          : never;\n\n  export type PathTree = Readonly<Record<StringTypes.NonEmptyString, PathValue>>;\n\n  type UnionToIntersection<U> = (U extends unknown ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n\n  type LastOf<U> = [U] extends [never]\n    ? never\n    : UnionToIntersection<U extends unknown ? (x: U) => void : never> extends (x: infer L) => void\n      ? L\n      : never;\n\n  type UnionToTuple<U, Last = LastOf<U>> = [U] extends [never]\n    ? []\n    : [...UnionToTuple<Exclude<U, Last>>, Last & string];\n\n  type ExtractStringKeys<P> = Extract<keyof P, string>;\n\n  type OrderedKeys<P> = UnionToTuple<ExtractStringKeys<P>> extends infer T extends readonly string[] ? T : [];\n\n  type QueryValue<P, K extends keyof P> = P[K] extends string ? string : never;\n\n  type QueryStringFromKeys<Params, Keys extends readonly (keyof Params & string)[]> = Keys extends readonly [\n    infer Head extends keyof Params & string,\n    ...infer Tail extends readonly (keyof Params & string)[],\n  ]\n    ? Tail extends []\n      ? `${Head}=${QueryValue<Params, Head>}`\n      : `${Head}=${QueryValue<Params, Head>}&${QueryStringFromKeys<Params, Tail>}`\n    : never;\n\n  type QueryStringFromParams<Params> = QueryStringFromKeys<\n    Params,\n    OrderedKeys<Params> extends infer Keys extends readonly (keyof Params & string)[] ? Keys : never\n  >;\n\n  export function createRoot<R extends StringTypes.NonEmptyString>(rootPath: R & `/${string}`): Instance<R> {\n    const fn = <S extends StringTypes.NonEmptyString>(segment: Segment<S>): `${R}/${S}` =>\n      `${rootPath}/${segment}` as `${R}/${S}`;\n    return Object.assign(fn, {\n      root: rootPath as R,\n      child<S extends StringTypes.NonEmptyString>(child: Segment<S>) {\n        return createRoot(`${rootPath}/${child}` as `${R}/${S}` & `/${string}`);\n      },\n    });\n  }\n\n  const isReadonlyRecord = (input: unknown): input is UnsafeTypes.UnsafeReadonlyRecord =>\n    typeof input === \"object\" && input !== null && !Array.isArray(input);\n\n  const formatTrail = (trail: readonly (string | number)[]) =>\n    trail.length > 0 ? trail.join(\".\") : (\"(root)\" as const);\n\n  const ensure = <Value extends PathValue>(\n    value: Value,\n    trail: readonly (string | number)[] = []\n  ): SafePathValue<Value> => {\n    if (Str.isString(value)) {\n      try {\n        return BS.URLPath.make(value as UrlPathLiteral) as SafePathValue<Value>;\n      } catch (error) {\n        const prettyTrail = formatTrail(trail);\n        throw new Error(`Invalid URL path at ${prettyTrail}: ${(error as Error).message}`);\n      }\n    }\n\n    if (typeof value === \"function\") {\n      return ((...args: UnsafeTypes.UnsafeArray) =>\n        ensure((value as (...args: UnsafeTypes.UnsafeArray) => PathValue)(...args), trail)) as SafePathValue<Value>;\n    }\n\n    if (isReadonlyRecord(value)) {\n      const result: Record<string, unknown> = {};\n      for (const [key, nested] of Struct.entries(value)) {\n        result[key] = ensure(nested, [...trail, key]);\n      }\n      return result as SafePathValue<Value>;\n    }\n\n    const prettyTrail = formatTrail(trail);\n    throw new TypeError(`Unsupported path value at ${prettyTrail}: ${String(value)}`);\n  };\n\n  export const collection = <const P extends PathTree>(paths: P): SafePathValue<P> => ensure(paths);\n\n  export const dynamicPath =\n    <R extends StringTypes.NonEmptyString, Param extends string>(root: R) =>\n    (param: Param) =>\n      `${root}/${param}` as const;\n\n  // const dynamicJoin = <Params extends A.NonEmptyReadonlyArray<StringTypes.NonEmptyString>>(params: Params) => A.join(\"&\")(params) as ``;\n\n  const toQueries = <const Params extends R.ReadonlyRecord<StringTypes.NonEmptyString, StringTypes.NonEmptyString>>(\n    params: Params\n  ): QueryStringFromParams<Params> =>\n    F.pipe(\n      Struct.entries<Params>(params),\n      (entries) => {\n        if (A.isEmptyReadonlyArray(entries)) {\n          throw new Error(\"Invalid query parameters\");\n        }\n        return entries;\n      },\n      A.map(([key, value]) => `${key}=${value}` as const),\n      A.join(\"&\" as const)\n    ) as QueryStringFromParams<Params>;\n\n  const toQuery = <const Params extends R.ReadonlyRecord<StringTypes.NonEmptyString, StringTypes.NonEmptyString>>(\n    params: Params\n  ): QueryStringFromParams<Params> => toQueries(params);\n\n  export const dynamicQueries =\n    <R extends StringTypes.NonEmptyString>(root: R) =>\n    <const Params extends R.ReadonlyRecord<StringTypes.NonEmptyString, StringTypes.NonEmptyString>>(param: Params) =>\n      `${root}?${toQuery(param)}` as const;\n}\n","import type { UnsafeTypes } from \"@beep/types\";\nimport * as A from \"effect/Array\";\nimport * as F from \"effect/Function\";\nimport * as O from \"effect/Option\";\nimport * as Str from \"effect/String\";\n\n// public-paths-to-record.ts\n// -------------------------------------------------------------------------------------------------\n// Build a type-safe accessor object and tuple structure from a list of public asset paths.\n// Folder keys are camelized (dashes removed) and file names camelized with dashes removed.\n// Leaves can be either exact literal path strings or widened to `string` via an option.\n// -------------------------------------------------------------------------------------------------\n\n/**\n * Camel-case a dash-separated identifier (e.g. `\"ic-app-5\"` â†’ `\"icApp5\"`), preserving literal types.\n *\n * @example\n * const id = toJsAccessor(\"ic-app-5\"); // \"icApp5\"\n *\n * @category String â€¢ Identifiers\n * @since 1.0.0\n */\nexport function toJsAccessor<S extends string>(str: S): CamelCase<S> {\n  return F.pipe(\n    str,\n    Str.split(\"-\"),\n    A.map((part, idx) =>\n      idx === 0 ? part : Str.toUpperCase(Str.charAt(part, 0).pipe(O.getOrThrow)) + Str.slice(1)(part)\n    ),\n    A.join(\"\")\n  ) as CamelCase<S>;\n}\n\n/* =======================================\n * Type-level helpers\n * =======================================\n */\n\n/** Remove a single leading slash. */\ntype StripLeadingSlash<S extends string> = S extends `/${infer R}` ? R : S;\n\n/** Split a path on \"/\", ignoring the empty leading segment when the path starts with \"/\". */\ntype SplitPath<S extends string> = S extends `${infer A}/${infer B}`\n  ? A extends \"\"\n    ? SplitPath<B>\n    : [A, ...SplitPath<B>]\n  : S extends \"\"\n    ? []\n    : [S];\n\n/** Remove the last file extension (last dot wins). */\ntype RemoveExt<S extends string> = S extends `${infer Base}.${string}` ? Base : S;\n\n/** Runtime mirror of `RemoveExt`. */\nexport function removeExt(name: string): string {\n  const i = name.lastIndexOf(\".\");\n  return i === -1 ? name : name.slice(0, i);\n}\n\n/** Type-level camelizer for dash-separated tokens. */\ntype CamelCase<S extends string> = S extends `${infer H}-${infer C}${infer R}`\n  ? `${H}${Uppercase<C>}${CamelCase<R>}`\n  : S;\n\n/** Camelized directory key preserving literal types. */\ntype DirectoryKey<S extends string> = CamelCase<S>;\n\n/** Camelized base name key used for file leaves. */\ntype FileKey<S extends string> = CamelCase<RemoveExt<S>>;\n\n/** Convert a union to an intersection. */\ntype UnionToIntersection<U> = (U extends unknown ? (x: U) => void : never) extends (x: infer I) => void ? I : never;\n\n/* =======================================\n * Tuple builders (optional shape)\n * =======================================\n */\n\n/**\n * A nested tuple for a single path:\n * - Non-leaf: `[segment, NestedTuple]`\n * - Leaf: `[fileBaseName (no ext), camelizedFileBase]`\n *\n * @example\n * \"/assets/background/background-3-blur.avif\"\n * -> [\"assets\", [\"background\", [\"background-3-blur\", \"background3Blur\"]]]\n */\nexport type NestedTuple = readonly [string, NestedTuple] | readonly [string, string];\n\n/** Build nested tuple type from path segments. */\ntype BuildNestedTuple<Segs extends readonly string[]> = Segs extends [infer Only extends string]\n  ? readonly [RemoveExt<Only>, FileKey<Only>]\n  : Segs extends [infer Head extends string, ...infer Tail extends string[]]\n    ? readonly [DirectoryKey<Head>, BuildNestedTuple<Tail>]\n    : never;\n\n/** Map an array of paths to nested tuples. */\nexport type PathTuplesFrom<Paths extends readonly string[]> = {\n  [K in keyof Paths]: BuildNestedTuple<SplitPath<StripLeadingSlash<Paths[K] & string>>>;\n};\n\n/**\n * Convert a single path into a `NestedTuple` at runtime.\n *\n * @example\n * toNestedTuple(\"/logo.png\") // [\"logo\", \"logo\"]\n * toNestedTuple(\"/a/b/file-name.svg\") // [\"a\", [\"b\", [\"file-name\", \"fileName\"]]]\n * toNestedTuple(\"/settings-panel/icon.svg\") // [\"settingsPanel\", \"icon\"]\n *\n * @category Paths â€¢ Tuples\n * @since 1.0.0\n */\nexport function toNestedTuple(path: string): NestedTuple {\n  const parts = path.split(\"/\").filter(Boolean); // drop leading \"\"\n  if (parts.length === 0) return [\"\", \"\"] as const; // defensive\n  const last = parts[parts.length - 1]!;\n  const base = removeExt(last);\n  const camel = toJsAccessor(base);\n\n  if (parts.length === 1) {\n    // root file: \"/logo.png\" -> [\"logo\", \"logo\"]\n    return [base, camel] as const;\n  }\n\n  // Build from tail: [lastDir, camelFileBase] then wrap upward with parent dirs.\n  let node: NestedTuple = [toJsAccessor(parts[parts.length - 2]!), camel] as const;\n  for (let i = parts.length - 3; i >= 0; i--) {\n    node = [toJsAccessor(parts[i]!), node] as const;\n  }\n  return node;\n}\n\n/**\n * Convert an array of paths into nested tuples (literal-preserving).\n *\n * @category Paths â€¢ Tuples\n * @since 1.0.0\n */\nexport function buildPathTuples<const A extends readonly [string, ...string[]]>(paths: A): PathTuplesFrom<A> {\n  return paths.map(toNestedTuple) as PathTuplesFrom<A>;\n}\n\n/* =======================================\n * Accessor object builder\n * =======================================\n */\n\n/**\n * Construct the *type shape* for the accessor object produced from an array of paths.\n * Folder names are object keys; file leaves are camelized base names.\n * Leaves can be exact literal strings or widened to `string` based on the `Widen` flag.\n */\ntype ObjFromPath<P extends string, Widen extends boolean> = SplitPath<StripLeadingSlash<P>> extends [\n  ...infer Dirs extends string[],\n  infer File extends string,\n]\n  ? Dirs extends []\n    ? { [K in FileKey<File>]: Widen extends true ? string : P } // root file\n    : BuildNest<Dirs, File, P, Widen>\n  : never;\n\n/** Recursively build `{ dir: ... }` â€¦ `{ fileKey: value }` for the final leaf. */\ntype BuildNest<\n  Dirs extends readonly string[],\n  File extends string,\n  P extends string,\n  Widen extends boolean,\n> = Dirs extends [infer H extends string, ...infer T extends string[]]\n  ? { [K in DirectoryKey<H>]: BuildNest<T, File, P, Widen> }\n  : { [K in FileKey<File>]: Widen extends true ? string : P };\n\n/** Merge all per-path objects into one tree, keeping literal keys. */\nexport type PathObjectFrom<Paths extends readonly string[], Widen extends boolean> = UnionToIntersection<\n  ObjFromPath<Paths[number] & string, Widen>\n> extends infer I\n  ? { readonly [K in keyof I]: I[K] }\n  : never;\n\n/** Options controlling the leaf value types for the accessor object. */\nexport type BuildOptions = {\n  /**\n   * If `true`, file leaves are typed as `string` instead of exact literal path strings.\n   * Use this to avoid extremely large union types at usage sites.\n   *\n   * @default false\n   */\n  widenLeavesToString?: boolean;\n};\n\n/**\n * Build a type-safe accessor object from an array of public paths.\n *\n * - Directory segments become nested objects (keys camelized).\n * - File leaves become camelized keys of the file base name (extension removed).\n * - Leaf values are, by default, the exact literal path strings; you can widen them to `string`.\n *\n * @example\n * const publicPaths = [\n *   \"/logo.png\",\n *   \"/assets/background/background-3-blur.avif\",\n * ] as const;\n *\n * const obj = pathObjFromPaths(publicPaths);\n * // obj.logo === \"/logo.png\"\n * // obj.assets.background.background3Blur === \"/assets/background/background-3-blur.avif\"\n *\n * const wide = pathObjFromPaths(publicPaths, { widenLeavesToString: true });\n * // wide.logo is typed as string (value still \"/logo.png\" at runtime)\n *\n * @category Paths â€¢ Object Accessors\n * @since 1.0.0\n */\nexport function pathObjFromPaths<\n  const A extends readonly string[],\n  const Opt extends BuildOptions | undefined = undefined,\n>(paths: A, options?: Opt): PathObjectFrom<A, Opt extends { widenLeavesToString: true } ? true : false> {\n  const widen = options?.widenLeavesToString === true;\n\n  const root: Record<string, unknown> = {};\n\n  for (const p of paths as readonly string[]) {\n    const parts = p.split(\"/\").filter(Boolean); // e.g. [\"assets\",\"background\",\"background-3-blur.avif\"]\n    const file = parts[parts.length - 1]!;\n    const fileKey = toJsAccessor(removeExt(file)); // e.g. \"background3Blur\"\n\n    if (parts.length === 1) {\n      // root file: \"/logo.png\" => root.logo\n      (root as UnsafeTypes.UnsafeAny)[fileKey] = widen ? (p as string) : p;\n    } else {\n      // nested file: \"/a/b/.../name.ext\" => root.a.b....[fileKey]\n      let node = root as Record<string, unknown>;\n      for (let i = 0; i < parts.length - 1; i++) {\n        const seg = parts[i]!;\n        const dirKey = toJsAccessor(seg);\n        node = (node[dirKey] ??= {}) as Record<string, unknown>;\n      }\n      node[fileKey] = widen ? (p as string) : p;\n    }\n  }\n\n  return root as PathObjectFrom<A, Opt extends { widenLeavesToString: true } ? true : false>;\n}\n\n/* =======================================\n * Notes for production usage\n * =======================================\n *\n * 1) Ensure your generated list uses `as const` to preserve literal types:\n *    export const publicPaths = [\"/logo.png\", ...] as const;\n *\n * 2) For huge path lists, you may prefer:\n *    pathObjFromPaths(publicPaths, { widenLeavesToString: true })\n *    â€¦to avoid very large union types in IntelliSense while keeping exact values at runtime.\n *\n * 3) The accessor keys shown in IntelliSense come from:\n *    - directories: camelized via `toJsAccessor` (\"assets\", \"settingsPanel\", â€¦)\n *    - files: camelized base names (\"androidChrome192x192\", \"background3Blur\", \"logo\", â€¦)\n *\n * 4) If you still see unions at leaves, something widened your `publicPaths` before reaching\n *    this functionâ€”import the constant directly, or use `{ widenLeavesToString: true }`.\n */\n","import * as S from \"effect/Schema\";\nimport * as IamEntityIds from \"./iam\";\nimport { OrganizationId, TeamId, UserId } from \"./shared\";\n\nexport class AnyEntityId extends S.Union(\n  IamEntityIds.AccountId,\n  IamEntityIds.ApiKeyId,\n  IamEntityIds.InvitationId,\n  IamEntityIds.MemberId,\n  IamEntityIds.OAuthApplicationId,\n  IamEntityIds.OAuthAccessTokenId,\n  IamEntityIds.OAuthConsentId,\n  IamEntityIds.PasskeyId,\n  IamEntityIds.SessionId,\n  IamEntityIds.SsoProviderId,\n  IamEntityIds.SubscriptionId,\n  IamEntityIds.SubscriptionId,\n  IamEntityIds.TeamMemberId,\n  IamEntityIds.TwoFactorId,\n  IamEntityIds.VerificationId,\n  IamEntityIds.WalletAddressId,\n  IamEntityIds.OrganizationRoleId,\n  IamEntityIds.DeviceCodeId,\n  OrganizationId,\n  TeamId,\n  UserId\n).annotations({\n  schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/AnyEntityId\"),\n  description: \"Any entity id\",\n  title: \"Any Entity Id\",\n  identifier: \"AnyEntityId\",\n}) {}\n\nexport declare namespace AnyEntityId {\n  export type Type = S.Schema.Type<typeof AnyEntityId>;\n  export type Encoded = S.Schema.Encoded<typeof AnyEntityId>;\n}\n","import { EntityId } from \"@beep/schema/EntityId\";\nimport type * as S from \"effect/Schema\";\n\nexport const AccountId = EntityId.make(\"account\", {\n  brand: \"AccountId\",\n  annotations: {\n    description: \"A unique identifier for an account\",\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/AccountId\"),\n  },\n});\n\nexport declare namespace AccountId {\n  export type Type = S.Schema.Type<typeof AccountId>;\n  export type Encoded = S.Schema.Encoded<typeof AccountId>;\n}\n\nexport const ApiKeyId = EntityId.make(\"apikey\", {\n  brand: \"ApiKeyId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/ApiKey\"),\n    description: \"A unique identifier for an api key\",\n  },\n});\n\nexport declare namespace ApiKeyId {\n  export type Type = S.Schema.Type<typeof ApiKeyId>;\n  export type Encoded = S.Schema.Encoded<typeof ApiKeyId>;\n}\n\nexport const InvitationId = EntityId.make(\"invitation\", {\n  brand: \"InvitationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/InvitationId\"),\n    description: \"A unique identifier for an invitation\",\n  },\n});\n\nexport declare namespace InvitationId {\n  export type Type = S.Schema.Type<typeof InvitationId>;\n  export type Encoded = S.Schema.Encoded<typeof InvitationId>;\n}\n\nexport const JwksId = EntityId.make(\"jwks\", {\n  brand: \"JwksId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/JwksId\"),\n    description: \"A unique identifier for a jwks\",\n  },\n});\n\nexport declare namespace JwksId {\n  export type Type = S.Schema.Type<typeof JwksId>;\n  export type Encoded = S.Schema.Encoded<typeof JwksId>;\n}\n\nexport const MemberId = EntityId.make(\"member\", {\n  brand: \"MemberId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/MemberId\"),\n    description: \"A unique identifier for a member\",\n  },\n});\n\nexport declare namespace MemberId {\n  export type Type = S.Schema.Type<typeof MemberId>;\n  export type Encoded = S.Schema.Encoded<typeof MemberId>;\n}\n\nexport const OAuthAccessTokenId = EntityId.make(\"oauth_access_token\", {\n  brand: \"OAuthAccessTokenId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthAccessTokenId\"),\n    description: \"A unique identifier for an oauth access token\",\n  },\n});\n\nexport declare namespace OAuthAccessTokenId {\n  export type Type = S.Schema.Type<typeof OAuthAccessTokenId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthAccessTokenId>;\n}\n\nexport const OAuthApplicationId = EntityId.make(\"oauth_application\", {\n  brand: \"OAuthApplicationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthApplicationId\"),\n    description: \"A unique identifier for an oauth application\",\n  },\n});\n\nexport declare namespace OAuthApplicationId {\n  export type Type = S.Schema.Type<typeof OAuthApplicationId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthApplicationId>;\n}\n\nexport const OAuthConsentId = EntityId.make(\"oauth_consent\", {\n  brand: \"OAuthConsentId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthConsentId\"),\n    description: \"A unique identifier for an oauth consent\",\n  },\n});\n\nexport declare namespace OAuthConsentId {\n  export type Type = S.Schema.Type<typeof OAuthConsentId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthConsentId>;\n}\n\nexport const PasskeyId = EntityId.make(\"passkey\", {\n  brand: \"Passkey\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/PasskeyId\"),\n    description: \"A unique identifier for a passkey\",\n  },\n});\n\nexport declare namespace PasskeyId {\n  export type Type = S.Schema.Type<typeof PasskeyId>;\n  export type Encoded = S.Schema.Encoded<typeof PasskeyId>;\n}\n\nexport const RateLimitId = EntityId.make(\"rate_limit\", {\n  brand: \"RateLimitId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/RateLimitId\"),\n    description: \"A unique identifier for a rate limit\",\n  },\n});\n\nexport declare namespace RateLimitId {\n  export type Type = S.Schema.Type<typeof RateLimitId>;\n  export type Encoded = S.Schema.Encoded<typeof RateLimitId>;\n}\n\nexport declare namespace SessionId {\n  export type Type = S.Schema.Type<typeof SessionId>;\n  export type Encoded = S.Schema.Encoded<typeof SessionId>;\n}\n\nexport const SessionId = EntityId.make(\"session\", {\n  brand: \"SessionId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SessionId\"),\n    description: \"A unique identifier for a session\",\n  },\n});\n\nexport declare namespace SsoProviderId {\n  export type Type = S.Schema.Type<typeof SsoProviderId>;\n  export type Encoded = S.Schema.Encoded<typeof SsoProviderId>;\n}\n\nexport const SsoProviderId = EntityId.make(\"sso_provider\", {\n  brand: \"SsoProviderId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SsoProviderId\"),\n    description: \"A unique identifier for an sso provider\",\n  },\n});\n\nexport declare namespace SubscriptionId {\n  export type Type = S.Schema.Type<typeof SubscriptionId>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionId>;\n}\n\nexport const SubscriptionId = EntityId.make(\"subscription\", {\n  brand: \"SubscriptionId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SubscriptionId\"),\n    description: \"A unique identifier for a subscription\",\n  },\n});\n\nexport declare namespace TeamMemberId {\n  export type Type = S.Schema.Type<typeof TeamMemberId>;\n  export type Encoded = S.Schema.Encoded<typeof TeamMemberId>;\n}\n\nexport const TeamMemberId = EntityId.make(\"team_member\", {\n  brand: \"TeamMemberId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/TeamMemberId\"),\n    description: \"A unique identifier for a team member\",\n  },\n});\n\nexport declare namespace TwoFactorId {\n  export type Type = S.Schema.Type<typeof TwoFactorId>;\n  export type Encoded = S.Schema.Encoded<typeof TwoFactorId>;\n}\n\nexport const TwoFactorId = EntityId.make(\"two_factor\", {\n  brand: \"TwoFactorId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/TwoFactorId\"),\n    description: \"A unique identifier for a two factor\",\n  },\n});\n\nexport const VerificationId = EntityId.make(\"verification\", {\n  brand: \"VerificationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/VerificationId\"),\n    description: \"A unique identifier for a verification\",\n  },\n});\n\nexport declare namespace VerificationId {\n  export type Type = S.Schema.Type<typeof VerificationId>;\n  export type Encoded = S.Schema.Encoded<typeof VerificationId>;\n}\n\nexport const WalletAddressId = EntityId.make(\"wallet_address\", {\n  brand: \"WalletAddressId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/WalletAddressId\"),\n    description: \"A unique identifier for a wallet address\",\n  },\n});\n\nexport declare namespace WalletAddressId {\n  export type Type = S.Schema.Type<typeof WalletAddressId>;\n  export type Encoded = S.Schema.Encoded<typeof WalletAddressId>;\n}\n\nexport const OrganizationRoleId = EntityId.make(\"organization_role\", {\n  brand: \"OrganizationRoleId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OrganizationRoleId\"),\n    description: \"A unique identifier for an organization role\",\n  },\n});\n\nexport declare namespace OrganizationRoleId {\n  export type Type = S.Schema.Type<typeof OrganizationRoleId>;\n  export type Encoded = S.Schema.Encoded<typeof OrganizationRoleId>;\n}\n\nexport const DeviceCodeId = EntityId.make(\"device_code\", {\n  brand: \"OrganizationRoleId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/DeviceCodeId\"),\n    description: \"A unique identifier for a device code\",\n  },\n});\n\nexport declare namespace DeviceCodeId {\n  export type Type = S.Schema.Type<typeof DeviceCodeId>;\n  export type Encoded = S.Schema.Encoded<typeof DeviceCodeId>;\n}\n","import { EntityId } from \"@beep/schema/EntityId\";\n//----------------------------------------------------------------------------------------------------------------------\n// Shared ENTITY IDS\n//----------------------------------------------------------------------------------------------------------------------\nexport const OrganizationId = EntityId.make(\"organization\", {\n  brand: \"OrganizationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/OrganizationId\"),\n    description: \"A unique identifier for an organization\",\n  },\n});\n\nexport declare namespace OrganizationId {\n  export type Type = typeof OrganizationId.Type;\n  export type Encoded = typeof OrganizationId.Encoded;\n}\nexport const TeamId = EntityId.make(\"team\", {\n  brand: \"TeamId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/TeamId\"),\n    description: \"A unique identifier for a team\",\n  },\n});\n\nexport declare namespace TeamId {\n  export type Type = typeof TeamId.Type;\n  export type Encoded = typeof TeamId.Encoded;\n}\n\nexport const FileId = EntityId.make(\"file\", {\n  brand: \"FileId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/FileId\"),\n    description: \"A unique identifier for a file\",\n  },\n});\n\nexport declare namespace FileId {\n  export type Type = typeof FileId.Type;\n  export type Encoded = typeof FileId.Encoded;\n}\n\nexport const AuditLogId = EntityId.make(\"audit_log\", {\n  brand: \"AuditLogId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/AuditLogId\"),\n    description: \"A unique identifier for an audit log\",\n  },\n});\n\nexport declare namespace AuditLogId {\n  export type Type = typeof AuditLogId.Type;\n  export type Encoded = typeof AuditLogId.Encoded;\n}\n\nexport const UserId = EntityId.make(\"user\", {\n  brand: \"UserId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/UserId\"),\n    description: \"A unique identifier for a user\",\n  },\n});\n\nexport declare namespace UserId {\n  export type Type = typeof UserId.Type;\n  export type Encoded = typeof UserId.Encoded;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nimport {\n  AccountId,\n  ApiKeyId,\n  DeviceCodeId,\n  InvitationId,\n  JwksId,\n  MemberId,\n  OAuthAccessTokenId,\n  OAuthApplicationId,\n  OAuthConsentId,\n  OrganizationRoleId,\n  PasskeyId,\n  RateLimitId,\n  SessionId,\n  SsoProviderId,\n  SubscriptionId,\n  TeamMemberId,\n  TwoFactorId,\n  VerificationId,\n  WalletAddressId,\n} from \"./iam\";\nimport { AuditLogId, FileId, OrganizationId, TeamId, UserId } from \"./shared\";\n\nexport namespace SharedTableNames {\n  export const SharedTableNameKit = BS.stringLiteralKit(\n    FileId.tableName,\n    TeamId.tableName,\n    OrganizationId.tableName,\n    UserId.tableName,\n    AuditLogId.tableName\n  );\n\n  export class SharedTableName extends SharedTableNameKit.Schema.annotations({\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SharedTableName\"),\n    description: \"The set of table_names for entityIds within the shared-kernel\",\n    identifier: \"SharedTableName\",\n    title: \"Shared Table Name\",\n  }) {\n    static readonly Tagged = SharedTableNameKit.toTagged(\"tableName\");\n    static readonly Enum = SharedTableNameKit.Enum;\n    static readonly Options = SharedTableNameKit.Options;\n    static readonly is = SharedTableNameKit.is;\n  }\n\n  export namespace SharedTableName {\n    export type Type = S.Schema.Type<typeof SharedTableName>;\n    export type Encoded = S.Schema.Encoded<typeof SharedTableName>;\n  }\n}\n\nexport namespace IamTableNames {\n  export const IamTableNameKit = BS.stringLiteralKit(\n    AccountId.tableName,\n    ApiKeyId.tableName,\n    InvitationId.tableName,\n    JwksId.tableName,\n    MemberId.tableName,\n    OAuthAccessTokenId.tableName,\n    OAuthApplicationId.tableName,\n    OAuthConsentId.tableName,\n    PasskeyId.tableName,\n    RateLimitId.tableName,\n    SessionId.tableName,\n    SsoProviderId.tableName,\n    SubscriptionId.tableName,\n    TeamMemberId.tableName,\n    TwoFactorId.tableName,\n    VerificationId.tableName,\n    WalletAddressId.tableName,\n    OrganizationRoleId.tableName,\n    DeviceCodeId.tableName\n  );\n\n  export class IamTableName extends IamTableNameKit.Schema.annotations({\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/IamTableName\"),\n    description: \"The set of table_names for entityIds within the iam domain slice\",\n    identifier: \"IamTableName\",\n    title: \"Iam Table Name\",\n  }) {\n    static readonly Tagged = IamTableNameKit.toTagged(\"tableName\");\n    static readonly Enum = IamTableNameKit.Enum;\n    static readonly Options = IamTableNameKit.Options;\n    static readonly is = IamTableNameKit.is;\n  }\n\n  export namespace IamTableName {\n    export type Type = S.Schema.Type<typeof IamTableName>;\n    export type Encoded = S.Schema.Encoded<typeof IamTableName>;\n  }\n}\n\nexport const AnyTableNameKit = BS.stringLiteralKit(\n  ...IamTableNames.IamTableNameKit.Options,\n  ...SharedTableNames.SharedTableNameKit.Options\n);\n\nexport class AnyTableName extends AnyTableNameKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/AnyTableName\"),\n  description: \"The set of table_names for entityIds within the shared-kernel and iam domain slices\",\n  identifier: \"AnyTableName\",\n  title: \"Any Table Name\",\n}) {\n  static readonly Tagged = AnyTableNameKit.toTagged(\"tableName\");\n  static readonly Enum = AnyTableNameKit.Enum;\n  static readonly Options = AnyTableNameKit.Options;\n}\n\nexport namespace AnyTableName {\n  export type Type = S.Schema.Type<typeof AnyTableName>;\n  export type Encoded = S.Schema.Encoded<typeof AnyTableName>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nimport { IamTableNames, SharedTableNames } from \"./table-names\";\n\nexport const EntityKindKit = BS.stringLiteralKit(\n  ...IamTableNames.IamTableNameKit.Options,\n  ...SharedTableNames.SharedTableNameKit.Options\n);\n\nexport class EntityKind extends EntityKindKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/EntityKind\"),\n  description: \"The set of entity_kinds for entityIds within the shared-kernel\",\n  title: \"Entity Kind\",\n  identifier: \"EntityKind\",\n}) {\n  static readonly Tagged = EntityKindKit.toTagged(\"__entityKind\");\n  static readonly Options = EntityKindKit.Options;\n  static readonly Enum = EntityKindKit.Enum;\n  static readonly is = EntityKindKit.is;\n}\n\nexport declare namespace EntityKind {\n  export type Type = S.Schema.Type<typeof EntityKindKit>;\n  export type Encoded = S.Schema.Encoded<typeof EntityKindKit>;\n}\n","import { EntityId } from \"@beep/schema/EntityId\";\nimport type * as S from \"effect/Schema\";\n//----------------------------------------------------------------------------------------------------------------------\n// WMS ENTITY IDS\n//----------------------------------------------------------------------------------------------------------------------\nexport const InventoryId = EntityId.make(\"inventory\", {\n  brand: \"InventoryId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/InventoryId\"),\n    description: \"A unique identifier for an inventory\",\n  },\n});\n\nexport declare namespace InventoryId {\n  export type Type = S.Schema.Type<typeof InventoryId>;\n  export type Encoded = S.Schema.Encoded<typeof InventoryId>;\n}\n\nexport const ItemId = EntityId.make(\"item\", {\n  brand: \"ItemId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/ItemId\"),\n    description: \"A unique identifier for an item\",\n  },\n});\n\nexport declare namespace ItemId {\n  export type Type = S.Schema.Type<typeof ItemId>;\n  export type Encoded = S.Schema.Encoded<typeof ItemId>;\n}\n\nexport const LocationId = EntityId.make(\"location\", {\n  brand: \"LocationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/LocationId\"),\n    description: \"A unique identifier for a location\",\n  },\n});\n\nexport declare namespace LocationId {\n  export type Type = S.Schema.Type<typeof LocationId>;\n  export type Encoded = S.Schema.Encoded<typeof LocationId>;\n}\n\nexport const OrderId = EntityId.make(\"order\", {\n  brand: \"OrderId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/OrderId\"),\n    description: \"A unique identifier for an order\",\n  },\n});\nexport declare namespace OrderId {\n  export type Type = S.Schema.Type<typeof OrderId>;\n  export type Encoded = S.Schema.Encoded<typeof OrderId>;\n}\n\nexport const UomId = EntityId.make(\"uom\", {\n  brand: \"UomId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/UomId\"),\n    description: \"A unique identifier for a uom\",\n  },\n});\nexport declare namespace UomId {\n  export type Type = S.Schema.Type<typeof UomId>;\n  export type Encoded = S.Schema.Encoded<typeof UomId>;\n}\n\nexport const WarehouseId = EntityId.make(\"warehouse\", {\n  brand: \"WarehouseId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/WarehouseId\"),\n    description: \"A unique identifier for a warehouse\",\n  },\n});\n\nexport declare namespace WarehouseId {\n  export type Type = S.Schema.Type<typeof WarehouseId>;\n  export type Encoded = S.Schema.Encoded<typeof WarehouseId>;\n}\n\nexport const WorkId = EntityId.make(\"work\", {\n  brand: \"WorkId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/WorkId\"),\n    description: \"A unique identifier for a work\",\n  },\n});\nexport declare namespace WorkId {\n  export type Type = S.Schema.Type<typeof WorkId>;\n  export type Encoded = S.Schema.Encoded<typeof WorkId>;\n}\n","import { invariant } from \"@beep/invariant\";\nimport { BS } from \"@beep/schema\";\nimport * as A from \"effect/Array\";\nimport * as F from \"effect/Function\";\nimport * as S from \"effect/Schema\";\n\nexport const AuthProviderNameValueKit = BS.stringLiteralKit(\n  \"github\",\n  \"google\",\n  \"linkedin\",\n  \"twitter\",\n  \"discord\"\n  // \"facebook\",\n  // \"microsoft\",\n);\n\nexport class AuthProviderNameValue extends AuthProviderNameValueKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/AuthProviderNameValue\"),\n  identifier: \"AuthProviderNameValue\",\n  title: \"Auth Provider Name Value\",\n  description: \"One of the supported social authentication providers.\",\n  examples: AuthProviderNameValueKit.Options,\n}) {\n  static readonly Options = AuthProviderNameValueKit.Options;\n  static readonly filter = (supportedAuthProviders: A.NonEmptyReadonlyArray<AuthProviderNameValue.Type>) =>\n    F.pipe(\n      AuthProviderNameValue.Options,\n      A.filter((provider) => supportedAuthProviders.includes(provider)),\n      (providers) => {\n        invariant(\n          S.is(S.NonEmptyArray(AuthProviderNameValue))(providers),\n          `invalid providers ${providers.join(\", \")}`,\n          {\n            file: \"@beep/constants/AuthProviders\",\n            line: 40,\n            args: [providers],\n          }\n        );\n\n        return providers;\n      }\n    );\n}\n\nexport namespace AuthProviderNameValue {\n  export type Type = S.Schema.Type<typeof AuthProviderNameValue>;\n  export type Encoded = S.Schema.Type<typeof AuthProviderNameValue>;\n}\n\nexport class TaggedAuthProviderNameValue extends AuthProviderNameValueKit.toTagged(\"name\").Union {}\n\nexport namespace TaggedAuthProviderNameValue {\n  export type Type = S.Schema.Type<typeof TaggedAuthProviderNameValue>;\n  export type Encoded = S.Schema.Type<typeof TaggedAuthProviderNameValue>;\n}\n","import { BS } from \"@beep/schema\";\nexport const EnvValueKit = BS.stringLiteralKit(\"dev\", \"staging\", \"prod\");\n\nexport class EnvValue extends EnvValueKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/EnvValue\"),\n  identifier: \"EnvValue\",\n  title: \"Env Value\",\n  description: \"Env value\",\n}) {\n  static readonly Options = EnvValueKit.Options;\n  static readonly Enum = EnvValueKit.Enum;\n}\n\nexport namespace EnvValue {\n  export type Type = typeof EnvValue.Type;\n  export type Encoded = typeof EnvValue.Encoded;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nexport const LogFormatKit = BS.stringLiteralKit(\"pretty\", \"json\", \"logFmt\", \"structured\");\n\nexport class LogFormat extends LogFormatKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/LogFormat\"),\n  identifier: \"LogFormat\",\n  title: \"Log Format\",\n  description: \"Log format.\",\n}) {\n  static readonly Options = LogFormatKit.Options;\n  static readonly Enum = LogFormatKit.Enum;\n}\n\nexport namespace LogFormat {\n  export type Type = S.Schema.Type<typeof LogFormat>;\n  export type Encoded = S.Schema.Type<typeof LogFormat>;\n}\n\nexport const LogFormatTaggedKit = LogFormatKit.toTagged(\"_tag\");\n\nexport class LogFormatTagged extends LogFormatTaggedKit.Union.annotations({\n  schemaId: Symbol.for(\"@beep/constants/LogFormatTagged\"),\n  identifier: \"LogFormatTagged\",\n  title: \"Log Format Tagged\",\n  description: \"Log format tagged.\",\n}) {}\n\nexport namespace LogFormatTagged {\n  export type Type = S.Schema.Type<typeof LogFormatTagged>;\n  export type Encoded = S.Schema.Type<typeof LogFormatTagged>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nexport const LogLevelKit = BS.stringLiteralKit(\"All\", \"Debug\", \"Error\", \"Fatal\", \"Info\", \"Trace\", \"None\", \"Warning\");\n\nexport class LogLevel extends LogLevelKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/LogLevel\"),\n  identifier: \"LogLevel\",\n  title: \"Log Level\",\n  description: \"Log level.\",\n}) {\n  static readonly Options = LogLevelKit.Options;\n  static readonly Enum = LogLevelKit.Enum;\n}\n\nexport namespace LogLevel {\n  export type Type = S.Schema.Type<typeof LogLevel>;\n  export type Encoded = S.Schema.Type<typeof LogLevel>;\n}\n","import { BS } from \"@beep/schema\";\n\nconst NodeEnvValueKit = BS.stringLiteralKit(\"test\", \"development\", \"production\");\n\nexport class NodeEnvValue extends NodeEnvValueKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/NodeEnvValue\"),\n  identifier: \"NodeEnvValue\",\n  title: \"Node Env Value\",\n  description: \"Node Env Value. Can be `test`, `development` or `production`\",\n}) {}\n\nexport namespace NodeEnvValue {\n  export type Type = typeof NodeEnvValue.Type;\n  export type Encoded = typeof NodeEnvValue.Encoded;\n}\n","import * as S from \"effect/Schema\";\n\nexport class PAGINATION_LIMIT extends S.Literal(100).annotations({\n  identifier: \"PAGINATION_LIMIT\",\n  title: \"Pagination Limit\",\n  description: \"Default pagination limit for API responses\",\n  schemaId: Symbol.for(\"@beep/constants/Pagination\"),\n}) {\n  static readonly Value = 100;\n}\n\nexport namespace PAGINATION_LIMIT {\n  export type Type = S.Schema.Type<typeof PAGINATION_LIMIT>;\n  export type Encoded = S.Schema.Encoded<typeof PAGINATION_LIMIT>;\n}\n","// Auto-generated by tooling/repo-scripts/src/generate-locales.ts\n// Do not edit manually.\n\nexport const ALL_LOCALES = [\n  \"aa\",\n  \"aa-DJ\",\n  \"aa-ER\",\n  \"ab\",\n  \"af\",\n  \"af-NA\",\n  \"agq\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ann\",\n  \"apc\",\n  \"ar\",\n  \"ar-AE\",\n  \"ar-BH\",\n  \"ar-DJ\",\n  \"ar-DZ\",\n  \"ar-EG\",\n  \"ar-EH\",\n  \"ar-ER\",\n  \"ar-IL\",\n  \"ar-IQ\",\n  \"ar-JO\",\n  \"ar-KM\",\n  \"ar-KW\",\n  \"ar-LB\",\n  \"ar-LY\",\n  \"ar-MA\",\n  \"ar-MR\",\n  \"ar-OM\",\n  \"ar-PS\",\n  \"ar-QA\",\n  \"ar-SA\",\n  \"ar-SD\",\n  \"ar-SO\",\n  \"ar-SS\",\n  \"ar-SY\",\n  \"ar-TD\",\n  \"ar-TN\",\n  \"ar-YE\",\n  \"arn\",\n  \"as\",\n  \"asa\",\n  \"ast\",\n  \"az\",\n  \"az-Arab\",\n  \"az-Arab-IQ\",\n  \"az-Arab-TR\",\n  \"az-Cyrl\",\n  \"az-Latn\",\n  \"ba\",\n  \"bal\",\n  \"bal-Arab\",\n  \"bal-Latn\",\n  \"bas\",\n  \"be\",\n  \"be-tarask\",\n  \"bem\",\n  \"bew\",\n  \"bez\",\n  \"bg\",\n  \"bgc\",\n  \"bgn\",\n  \"bgn-AE\",\n  \"bgn-AF\",\n  \"bgn-IR\",\n  \"bgn-OM\",\n  \"bho\",\n  \"blo\",\n  \"blt\",\n  \"bm\",\n  \"bm-Nkoo\",\n  \"bn\",\n  \"bn-IN\",\n  \"bo\",\n  \"bo-IN\",\n  \"br\",\n  \"brx\",\n  \"bs\",\n  \"bs-Cyrl\",\n  \"bs-Latn\",\n  \"bss\",\n  \"byn\",\n  \"ca\",\n  \"ca-AD\",\n  \"ca-ES-valencia\",\n  \"ca-FR\",\n  \"ca-IT\",\n  \"cad\",\n  \"cch\",\n  \"ccp\",\n  \"ccp-IN\",\n  \"ce\",\n  \"ceb\",\n  \"cgg\",\n  \"cho\",\n  \"chr\",\n  \"cic\",\n  \"ckb\",\n  \"ckb-IR\",\n  \"co\",\n  \"cop\",\n  \"cs\",\n  \"csw\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"da-GL\",\n  \"dav\",\n  \"de\",\n  \"de-AT\",\n  \"de-BE\",\n  \"de-CH\",\n  \"de-IT\",\n  \"de-LI\",\n  \"de-LU\",\n  \"dje\",\n  \"doi\",\n  \"dsb\",\n  \"dua\",\n  \"dv\",\n  \"dyo\",\n  \"dz\",\n  \"ebu\",\n  \"ee\",\n  \"ee-TG\",\n  \"el\",\n  \"el-CY\",\n  \"el-polyton\",\n  \"en\",\n  \"en-001\",\n  \"en-150\",\n  \"en-AE\",\n  \"en-AG\",\n  \"en-AI\",\n  \"en-AS\",\n  \"en-AT\",\n  \"en-AU\",\n  \"en-BB\",\n  \"en-BE\",\n  \"en-BI\",\n  \"en-BM\",\n  \"en-BS\",\n  \"en-BW\",\n  \"en-BZ\",\n  \"en-CA\",\n  \"en-CC\",\n  \"en-CH\",\n  \"en-CK\",\n  \"en-CM\",\n  \"en-CX\",\n  \"en-CY\",\n  \"en-CZ\",\n  \"en-DE\",\n  \"en-DG\",\n  \"en-DK\",\n  \"en-DM\",\n  \"en-Dsrt\",\n  \"en-ER\",\n  \"en-ES\",\n  \"en-FI\",\n  \"en-FJ\",\n  \"en-FK\",\n  \"en-FM\",\n  \"en-FR\",\n  \"en-GB\",\n  \"en-GD\",\n  \"en-GG\",\n  \"en-GH\",\n  \"en-GI\",\n  \"en-GM\",\n  \"en-GS\",\n  \"en-GU\",\n  \"en-GY\",\n  \"en-HK\",\n  \"en-HU\",\n  \"en-ID\",\n  \"en-IE\",\n  \"en-IL\",\n  \"en-IM\",\n  \"en-IN\",\n  \"en-IO\",\n  \"en-IT\",\n  \"en-JE\",\n  \"en-JM\",\n  \"en-KE\",\n  \"en-KI\",\n  \"en-KN\",\n  \"en-KY\",\n  \"en-LC\",\n  \"en-LR\",\n  \"en-LS\",\n  \"en-MG\",\n  \"en-MH\",\n  \"en-MO\",\n  \"en-MP\",\n  \"en-MS\",\n  \"en-MT\",\n  \"en-MU\",\n  \"en-MV\",\n  \"en-MW\",\n  \"en-MY\",\n  \"en-NA\",\n  \"en-NF\",\n  \"en-NG\",\n  \"en-NL\",\n  \"en-NO\",\n  \"en-NR\",\n  \"en-NU\",\n  \"en-NZ\",\n  \"en-PG\",\n  \"en-PH\",\n  \"en-PK\",\n  \"en-PL\",\n  \"en-PN\",\n  \"en-PR\",\n  \"en-PT\",\n  \"en-PW\",\n  \"en-RO\",\n  \"en-RW\",\n  \"en-SB\",\n  \"en-SC\",\n  \"en-SD\",\n  \"en-SE\",\n  \"en-SG\",\n  \"en-SH\",\n  \"en-SI\",\n  \"en-SK\",\n  \"en-SL\",\n  \"en-SS\",\n  \"en-SX\",\n  \"en-SZ\",\n  \"en-Shaw\",\n  \"en-TC\",\n  \"en-TK\",\n  \"en-TO\",\n  \"en-TT\",\n  \"en-TV\",\n  \"en-TZ\",\n  \"en-UG\",\n  \"en-UM\",\n  \"en-VC\",\n  \"en-VG\",\n  \"en-VI\",\n  \"en-VU\",\n  \"en-WS\",\n  \"en-ZA\",\n  \"en-ZM\",\n  \"en-ZW\",\n  \"eo\",\n  \"es\",\n  \"es-419\",\n  \"es-AR\",\n  \"es-BO\",\n  \"es-BR\",\n  \"es-BZ\",\n  \"es-CL\",\n  \"es-CO\",\n  \"es-CR\",\n  \"es-CU\",\n  \"es-DO\",\n  \"es-EA\",\n  \"es-EC\",\n  \"es-GQ\",\n  \"es-GT\",\n  \"es-HN\",\n  \"es-IC\",\n  \"es-MX\",\n  \"es-NI\",\n  \"es-PA\",\n  \"es-PE\",\n  \"es-PH\",\n  \"es-PR\",\n  \"es-PY\",\n  \"es-SV\",\n  \"es-US\",\n  \"es-UY\",\n  \"es-VE\",\n  \"et\",\n  \"eu\",\n  \"ewo\",\n  \"fa\",\n  \"fa-AF\",\n  \"ff\",\n  \"ff-Adlm\",\n  \"ff-Adlm-BF\",\n  \"ff-Adlm-CM\",\n  \"ff-Adlm-GH\",\n  \"ff-Adlm-GM\",\n  \"ff-Adlm-GW\",\n  \"ff-Adlm-LR\",\n  \"ff-Adlm-MR\",\n  \"ff-Adlm-NE\",\n  \"ff-Adlm-NG\",\n  \"ff-Adlm-SL\",\n  \"ff-Adlm-SN\",\n  \"ff-Latn\",\n  \"ff-Latn-BF\",\n  \"ff-Latn-CM\",\n  \"ff-Latn-GH\",\n  \"ff-Latn-GM\",\n  \"ff-Latn-GN\",\n  \"ff-Latn-GW\",\n  \"ff-Latn-LR\",\n  \"ff-Latn-MR\",\n  \"ff-Latn-NE\",\n  \"ff-Latn-NG\",\n  \"ff-Latn-SL\",\n  \"fi\",\n  \"fil\",\n  \"fo\",\n  \"fo-DK\",\n  \"fr\",\n  \"fr-BE\",\n  \"fr-BF\",\n  \"fr-BI\",\n  \"fr-BJ\",\n  \"fr-BL\",\n  \"fr-CA\",\n  \"fr-CD\",\n  \"fr-CF\",\n  \"fr-CG\",\n  \"fr-CH\",\n  \"fr-CI\",\n  \"fr-CM\",\n  \"fr-DJ\",\n  \"fr-DZ\",\n  \"fr-GA\",\n  \"fr-GF\",\n  \"fr-GN\",\n  \"fr-GP\",\n  \"fr-GQ\",\n  \"fr-HT\",\n  \"fr-KM\",\n  \"fr-LU\",\n  \"fr-MA\",\n  \"fr-MC\",\n  \"fr-MF\",\n  \"fr-MG\",\n  \"fr-ML\",\n  \"fr-MQ\",\n  \"fr-MR\",\n  \"fr-MU\",\n  \"fr-NC\",\n  \"fr-NE\",\n  \"fr-PF\",\n  \"fr-PM\",\n  \"fr-RE\",\n  \"fr-RW\",\n  \"fr-SC\",\n  \"fr-SN\",\n  \"fr-SY\",\n  \"fr-TD\",\n  \"fr-TG\",\n  \"fr-TN\",\n  \"fr-VU\",\n  \"fr-WF\",\n  \"fr-YT\",\n  \"frr\",\n  \"fur\",\n  \"fy\",\n  \"ga\",\n  \"ga-GB\",\n  \"gaa\",\n  \"gd\",\n  \"gez\",\n  \"gez-ER\",\n  \"gl\",\n  \"gn\",\n  \"gsw\",\n  \"gsw-FR\",\n  \"gsw-LI\",\n  \"gu\",\n  \"guz\",\n  \"gv\",\n  \"ha\",\n  \"ha-Arab\",\n  \"ha-Arab-SD\",\n  \"ha-GH\",\n  \"ha-NE\",\n  \"haw\",\n  \"he\",\n  \"hi\",\n  \"hi-Latn\",\n  \"hnj\",\n  \"hnj-Hmnp\",\n  \"hr\",\n  \"hr-BA\",\n  \"hsb\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"it-CH\",\n  \"it-SM\",\n  \"it-VA\",\n  \"iu\",\n  \"iu-Latn\",\n  \"ja\",\n  \"jbo\",\n  \"jgo\",\n  \"jmc\",\n  \"jv\",\n  \"ka\",\n  \"kaa\",\n  \"kaa-Cyrl\",\n  \"kaa-Latn\",\n  \"kab\",\n  \"kaj\",\n  \"kam\",\n  \"kcg\",\n  \"kde\",\n  \"kea\",\n  \"ken\",\n  \"kgp\",\n  \"khq\",\n  \"ki\",\n  \"kk\",\n  \"kk-Arab\",\n  \"kk-Cyrl\",\n  \"kk-KZ\",\n  \"kkj\",\n  \"kl\",\n  \"kln\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"ko-CN\",\n  \"ko-KP\",\n  \"kok\",\n  \"kok-Deva\",\n  \"kok-Latn\",\n  \"kpe\",\n  \"kpe-GN\",\n  \"ks\",\n  \"ks-Arab\",\n  \"ks-Deva\",\n  \"ksb\",\n  \"ksf\",\n  \"ksh\",\n  \"ku\",\n  \"kw\",\n  \"kxv\",\n  \"kxv-Deva\",\n  \"kxv-Latn\",\n  \"kxv-Orya\",\n  \"kxv-Telu\",\n  \"ky\",\n  \"la\",\n  \"lag\",\n  \"lb\",\n  \"lg\",\n  \"lij\",\n  \"lkt\",\n  \"lld\",\n  \"lmo\",\n  \"ln\",\n  \"ln-AO\",\n  \"ln-CF\",\n  \"ln-CG\",\n  \"lo\",\n  \"lrc\",\n  \"lrc-IQ\",\n  \"lt\",\n  \"ltg\",\n  \"lu\",\n  \"luo\",\n  \"luy\",\n  \"lv\",\n  \"mai\",\n  \"mas\",\n  \"mas-TZ\",\n  \"mdf\",\n  \"mer\",\n  \"mfe\",\n  \"mg\",\n  \"mgh\",\n  \"mgo\",\n  \"mhn\",\n  \"mi\",\n  \"mic\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mn-Mong\",\n  \"mn-Mong-MN\",\n  \"mni\",\n  \"mni-Beng\",\n  \"mni-Mtei\",\n  \"moh\",\n  \"mr\",\n  \"ms\",\n  \"ms-Arab\",\n  \"ms-Arab-BN\",\n  \"ms-BN\",\n  \"ms-ID\",\n  \"ms-SG\",\n  \"mt\",\n  \"mua\",\n  \"mus\",\n  \"my\",\n  \"myv\",\n  \"mzn\",\n  \"naq\",\n  \"nb\",\n  \"nb-SJ\",\n  \"nd\",\n  \"nds\",\n  \"nds-NL\",\n  \"ne\",\n  \"ne-IN\",\n  \"nl\",\n  \"nl-AW\",\n  \"nl-BE\",\n  \"nl-BQ\",\n  \"nl-CW\",\n  \"nl-SR\",\n  \"nl-SX\",\n  \"nmg\",\n  \"nn\",\n  \"nnh\",\n  \"no\",\n  \"nqo\",\n  \"nr\",\n  \"nso\",\n  \"nus\",\n  \"nv\",\n  \"ny\",\n  \"nyn\",\n  \"oc\",\n  \"oc-ES\",\n  \"om\",\n  \"om-KE\",\n  \"or\",\n  \"os\",\n  \"os-RU\",\n  \"osa\",\n  \"pa\",\n  \"pa-Arab\",\n  \"pa-Guru\",\n  \"pap\",\n  \"pap-AW\",\n  \"pcm\",\n  \"pis\",\n  \"pl\",\n  \"prg\",\n  \"ps\",\n  \"ps-PK\",\n  \"pt\",\n  \"pt-AO\",\n  \"pt-CH\",\n  \"pt-CV\",\n  \"pt-GQ\",\n  \"pt-GW\",\n  \"pt-LU\",\n  \"pt-MO\",\n  \"pt-MZ\",\n  \"pt-PT\",\n  \"pt-ST\",\n  \"pt-TL\",\n  \"qu\",\n  \"qu-BO\",\n  \"qu-EC\",\n  \"quc\",\n  \"raj\",\n  \"rhg\",\n  \"rhg-Rohg\",\n  \"rhg-Rohg-BD\",\n  \"rif\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ro-MD\",\n  \"rof\",\n  \"ru\",\n  \"ru-BY\",\n  \"ru-KG\",\n  \"ru-KZ\",\n  \"ru-MD\",\n  \"ru-UA\",\n  \"rw\",\n  \"rwk\",\n  \"sa\",\n  \"sah\",\n  \"saq\",\n  \"sat\",\n  \"sat-Deva\",\n  \"sat-Olck\",\n  \"sbp\",\n  \"sc\",\n  \"scn\",\n  \"sd\",\n  \"sd-Arab\",\n  \"sd-Deva\",\n  \"sdh\",\n  \"sdh-IQ\",\n  \"se\",\n  \"se-FI\",\n  \"se-SE\",\n  \"seh\",\n  \"ses\",\n  \"sg\",\n  \"shi\",\n  \"shi-Latn\",\n  \"shi-Tfng\",\n  \"shn\",\n  \"shn-TH\",\n  \"si\",\n  \"sid\",\n  \"sk\",\n  \"skr\",\n  \"sl\",\n  \"sma\",\n  \"sma-NO\",\n  \"smj\",\n  \"smj-NO\",\n  \"smn\",\n  \"sms\",\n  \"sn\",\n  \"so\",\n  \"so-DJ\",\n  \"so-ET\",\n  \"so-KE\",\n  \"sq\",\n  \"sq-MK\",\n  \"sq-XK\",\n  \"sr\",\n  \"sr-Cyrl\",\n  \"sr-Cyrl-BA\",\n  \"sr-Cyrl-ME\",\n  \"sr-Cyrl-XK\",\n  \"sr-Latn\",\n  \"sr-Latn-BA\",\n  \"sr-Latn-ME\",\n  \"sr-Latn-XK\",\n  \"ss\",\n  \"ss-SZ\",\n  \"ssy\",\n  \"st\",\n  \"st-LS\",\n  \"su\",\n  \"su-Latn\",\n  \"sv\",\n  \"sv-AX\",\n  \"sv-FI\",\n  \"sw\",\n  \"sw-CD\",\n  \"sw-KE\",\n  \"sw-UG\",\n  \"syr\",\n  \"syr-SY\",\n  \"szl\",\n  \"ta\",\n  \"ta-LK\",\n  \"ta-MY\",\n  \"ta-SG\",\n  \"te\",\n  \"teo\",\n  \"teo-KE\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"ti-ER\",\n  \"tig\",\n  \"tk\",\n  \"tn\",\n  \"tn-BW\",\n  \"to\",\n  \"tok\",\n  \"tpi\",\n  \"tr\",\n  \"tr-CY\",\n  \"trv\",\n  \"trw\",\n  \"ts\",\n  \"tt\",\n  \"twq\",\n  \"tyv\",\n  \"tzm\",\n  \"ug\",\n  \"uk\",\n  \"und\",\n  \"ur\",\n  \"ur-IN\",\n  \"uz\",\n  \"uz-Arab\",\n  \"uz-Cyrl\",\n  \"uz-Latn\",\n  \"vai\",\n  \"vai-Latn\",\n  \"vai-Vaii\",\n  \"ve\",\n  \"vec\",\n  \"vi\",\n  \"vmw\",\n  \"vo\",\n  \"vun\",\n  \"wa\",\n  \"wae\",\n  \"wal\",\n  \"wbp\",\n  \"wo\",\n  \"xh\",\n  \"xnr\",\n  \"xog\",\n  \"yav\",\n  \"yi\",\n  \"yo\",\n  \"yo-BJ\",\n  \"yrl\",\n  \"yrl-CO\",\n  \"yrl-VE\",\n  \"yue\",\n  \"yue-Hans\",\n  \"yue-Hant\",\n  \"yue-Hant-CN\",\n  \"yue-Hant-MO\",\n  \"za\",\n  \"zgh\",\n  \"zh\",\n  \"zh-Hans\",\n  \"zh-Hans-HK\",\n  \"zh-Hans-MO\",\n  \"zh-Hans-MY\",\n  \"zh-Hans-SG\",\n  \"zh-Hant\",\n  \"zh-Hant-HK\",\n  \"zh-Hant-MO\",\n  \"zh-Hant-MY\",\n  \"zh-Latn\",\n  \"zu\",\n] as const;\n","// Auto-generated by tooling/repo-scripts/src/generate-asset-paths.ts\n// Do not edit manually.\n\nexport const publicPaths = [\n  \"/android-chrome-192x192.avif\",\n  \"/android-chrome-512x512.avif\",\n  \"/apple-touch-icon.avif\",\n  \"/assets/background/background-3-blur.avif\",\n  \"/assets/background/background-4.avif\",\n  \"/assets/background/background-7.avif\",\n  \"/assets/background/overlay.svg\",\n  \"/assets/background/shape-circle-1.svg\",\n  \"/assets/background/shape-circle-3.svg\",\n  \"/assets/background/shape-square.svg\",\n  \"/assets/icons/empty/ic-content.svg\",\n  \"/assets/icons/files/ic-ai.svg\",\n  \"/assets/icons/files/ic-audio.svg\",\n  \"/assets/icons/files/ic-document.svg\",\n  \"/assets/icons/files/ic-excel.svg\",\n  \"/assets/icons/files/ic-file.svg\",\n  \"/assets/icons/files/ic-folder.svg\",\n  \"/assets/icons/files/ic-img.svg\",\n  \"/assets/icons/files/ic-js.svg\",\n  \"/assets/icons/files/ic-pdf.svg\",\n  \"/assets/icons/files/ic-power-point.svg\",\n  \"/assets/icons/files/ic-pts.svg\",\n  \"/assets/icons/files/ic-txt.svg\",\n  \"/assets/icons/files/ic-video.svg\",\n  \"/assets/icons/files/ic-word.svg\",\n  \"/assets/icons/files/ic-zip.svg\",\n  \"/assets/icons/navbar/ic-analytics.svg\",\n  \"/assets/icons/navbar/ic-banking.svg\",\n  \"/assets/icons/navbar/ic-blank.svg\",\n  \"/assets/icons/navbar/ic-blog.svg\",\n  \"/assets/icons/navbar/ic-booking.svg\",\n  \"/assets/icons/navbar/ic-calendar.svg\",\n  \"/assets/icons/navbar/ic-chat.svg\",\n  \"/assets/icons/navbar/ic-course.svg\",\n  \"/assets/icons/navbar/ic-dashboard.svg\",\n  \"/assets/icons/navbar/ic-disabled.svg\",\n  \"/assets/icons/navbar/ic-ecommerce.svg\",\n  \"/assets/icons/navbar/ic-external.svg\",\n  \"/assets/icons/navbar/ic-file.svg\",\n  \"/assets/icons/navbar/ic-folder.svg\",\n  \"/assets/icons/navbar/ic-invoice.svg\",\n  \"/assets/icons/navbar/ic-job.svg\",\n  \"/assets/icons/navbar/ic-kanban.svg\",\n  \"/assets/icons/navbar/ic-label.svg\",\n  \"/assets/icons/navbar/ic-lock.svg\",\n  \"/assets/icons/navbar/ic-mail.svg\",\n  \"/assets/icons/navbar/ic-menu-item.svg\",\n  \"/assets/icons/navbar/ic-order.svg\",\n  \"/assets/icons/navbar/ic-params.svg\",\n  \"/assets/icons/navbar/ic-product.svg\",\n  \"/assets/icons/navbar/ic-subpaths.svg\",\n  \"/assets/icons/navbar/ic-tour.svg\",\n  \"/assets/icons/navbar/ic-user.svg\",\n  \"/assets/icons/platforms/ic-amplify.svg\",\n  \"/assets/icons/platforms/ic-auth0.svg\",\n  \"/assets/icons/platforms/ic-figma.svg\",\n  \"/assets/icons/platforms/ic-firebase.svg\",\n  \"/assets/icons/platforms/ic-js.svg\",\n  \"/assets/icons/platforms/ic-jwt.svg\",\n  \"/assets/icons/platforms/ic-mui.svg\",\n  \"/assets/icons/platforms/ic-nextjs.svg\",\n  \"/assets/icons/platforms/ic-react.svg\",\n  \"/assets/icons/platforms/ic-supabase.svg\",\n  \"/assets/icons/platforms/ic-ts.svg\",\n  \"/assets/icons/platforms/ic-vite.svg\",\n  \"/assets/icons/workspaces/logo-1.avif\",\n  \"/assets/icons/workspaces/logo-2.avif\",\n  \"/assets/icons/workspaces/logo-3.avif\",\n  \"/assets/illustrations/characters/character-fly.avif\",\n  \"/assets/illustrations/characters/character-happy-jump.avif\",\n  \"/assets/illustrations/characters/character-maintenance.avif\",\n  \"/assets/illustrations/characters/character-notification.avif\",\n  \"/assets/illustrations/characters/character-question.avif\",\n  \"/assets/illustrations/characters/character-reject.avif\",\n  \"/assets/illustrations/characters/character-study.avif\",\n  \"/assets/illustrations/illustration-dashboard.avif\",\n  \"/assets/illustrations/illustration-rocket-small.avif\",\n  \"/assets/images/mock/avatar/avatar-1.avif\",\n  \"/assets/images/mock/avatar/avatar-2.avif\",\n  \"/assets/images/mock/avatar/avatar-3.avif\",\n  \"/assets/images/mock/avatar/avatar-4.avif\",\n  \"/assets/images/sections/settings-panel/combo-dark.avif\",\n  \"/assets/images/sections/settings-panel/combo.avif\",\n  \"/assets/images/sections/settings-panel/ltr-dark.avif\",\n  \"/assets/images/sections/settings-panel/ltr.avif\",\n  \"/assets/images/sections/settings-panel/rtl-dark.avif\",\n  \"/assets/images/sections/settings-panel/rtl.avif\",\n  \"/assets/images/sections/settings-panel/sidenav-collapsed-dark.avif\",\n  \"/assets/images/sections/settings-panel/sidenav-collapsed.avif\",\n  \"/assets/images/sections/settings-panel/sidenav-default-dark.avif\",\n  \"/assets/images/sections/settings-panel/sidenav-default.avif\",\n  \"/assets/images/sections/settings-panel/sidenav.avif\",\n  \"/assets/images/sections/settings-panel/sitenav-dark.avif\",\n  \"/assets/images/sections/settings-panel/slim-dark.avif\",\n  \"/assets/images/sections/settings-panel/slim.avif\",\n  \"/assets/images/sections/settings-panel/stacked-dark.avif\",\n  \"/assets/images/sections/settings-panel/stacked.avif\",\n  \"/assets/images/sections/settings-panel/topnav-dark.avif\",\n  \"/assets/images/sections/settings-panel/topnav-default-dark.avif\",\n  \"/assets/images/sections/settings-panel/topnav-default.avif\",\n  \"/assets/images/sections/settings-panel/topnav-slim-dark.avif\",\n  \"/assets/images/sections/settings-panel/topnav-slim.avif\",\n  \"/assets/images/sections/settings-panel/topnav-stacked-dark.avif\",\n  \"/assets/images/sections/settings-panel/topnav-stacked.avif\",\n  \"/assets/images/sections/settings-panel/topnav.avif\",\n  \"/assets/images/sections/sidebar-vibrant.avif\",\n  \"/assets/images/sections/topbar-vibrant.avif\",\n  \"/favicon-16x16.avif\",\n  \"/favicon-32x32.avif\",\n  \"/favicon.ico\",\n  \"/icons/icon-128x128.avif\",\n  \"/icons/icon-144x144.avif\",\n  \"/icons/icon-152x152.avif\",\n  \"/icons/icon-192x192.avif\",\n  \"/icons/icon-256x256.avif\",\n  \"/icons/icon-384x384.avif\",\n  \"/icons/icon-48x48.avif\",\n  \"/icons/icon-512x512.avif\",\n  \"/icons/icon-72x72.avif\",\n  \"/icons/icon-96x96.avif\",\n  \"/logo.avif\",\n  \"/site.webmanifest\",\n] as const;\n","import { publicPaths } from \"@beep/constants/_generated\";\nimport { type PathObjectFrom, pathObjFromPaths } from \"@beep/constants/paths/utils\";\n\nexport const assetPaths: PathObjectFrom<typeof publicPaths, true> = pathObjFromPaths(publicPaths, {\n  widenLeavesToString: true,\n}) as PathObjectFrom<typeof publicPaths, true>;\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nexport const SubscriptionPlanValueKit = BS.stringLiteralKit(\"basic\", \"pro\", \"enterprise\");\n\nexport class SubscriptionPlanValue extends SubscriptionPlanValueKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/constants/SubscriptionPlanValue\"),\n  identifier: \"SubscriptionPlanValue\",\n  title: \"Subscription Plan Value\",\n  description: \"Possible subscription plan values.\",\n}) {}\n\nexport namespace SubscriptionPlanValue {\n  export type Type = S.Schema.Type<typeof SubscriptionPlanValue>;\n  export type Encoded = S.Schema.Type<typeof SubscriptionPlanValue>;\n}\n","import { BS } from \"@beep/schema\";\nimport type { EntityId } from \"@beep/schema/EntityId\";\nimport type { Field } from \"@effect/experimental/VariantSchema\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\n// import {create} from \"mutative\";\n\n/**\n * Audit columns optimized for PostgreSQL timestamp with timezone:\n * - createdAt: Auto-set on insert, omitted from updates\n * - updatedAt: Auto-set on both insert and update operations\n * - deletedAt: Optional field for soft delete functionality defaults to null is Option on select variants\n */\nexport const auditColumns = {\n  createdAt: BS.DateTimeInsertFromDateOmittable({\n    description: \"The date and time the record was created\",\n  }),\n  updatedAt: BS.DateTimeUpdateFromDateOmittable({\n    description: \"The date and time the record was last updated\",\n  }),\n  deletedAt: BS.FieldOptionOmittable(\n    BS.DateTimeFromDate({\n      description: \"If not null, the date and time the record was deleted\",\n    })\n  ),\n} as const;\nexport type AuditColumns = typeof auditColumns;\n\nexport const userTrackingColumns = {\n  createdBy: BS.FieldOptionOmittable(S.String),\n  updatedBy: BS.FieldOptionOmittable(S.String),\n  deletedBy: BS.FieldOptionOmittable(S.String),\n} as const;\nexport type UserTrackingColumns = typeof userTrackingColumns;\n\nexport type Fields = Field.Fields;\n\n// function mergeFields<const A extends Fields, const B extends Fields>(a: A, b: B): A & B;\n//\n// function mergeFields<const A extends Fields>(a: A): <const B extends Fields>(b: B) => A & B;\n//\n// function mergeFields<const A extends Fields, const B extends Fields>(a: A, b?: B) {\n//   if (b === undefined) {\n//     return <const C extends Fields>(bb: C): A & C =>\n//       create<A & C>(a as A & C, (draft) => {\n//         // Right-bias: bb overwrites keys from a on conflicts\n//         Object.assign(draft, bb);\n//       });\n//   }\n//\n//   return create<A & B>(a as A & B, (draft) => {\n//     // Right-bias: b overwrites keys from a on conflicts\n//     Object.assign(draft, b as B);\n//   });\n// }\n\nexport const globalColumns = {\n  ...userTrackingColumns,\n  ...auditColumns,\n  // Optimistic locking\n  version: M.Generated(S.Int.pipe(S.greaterThanOrEqualTo(1))),\n  // Optional: Enhanced traceability\n  source: BS.FieldOptionOmittable(S.String),\n} as const;\nexport type GlobalColumns = typeof globalColumns;\n\nexport const makeFields = <const TableName extends string, const Brand extends string, const A extends Fields>(\n  entityId: EntityId.EntityIdSchemaInstance<TableName, Brand>,\n  a: A\n) => {\n  const idFields = {\n    id: entityId.modelIdSchema,\n    _rowId: entityId.modelRowIdSchema,\n  } as const;\n  const defaultFields = {\n    ...idFields,\n    ...globalColumns,\n  } as const;\n  return {\n    ...defaultFields,\n    ...a,\n  } as const;\n};\n","import { BS } from \"@beep/schema\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { makeFields } from \"../../common\";\nimport { AnyEntityId } from \"../../entity-ids/any-entity-id\";\nimport * as IamEntityIds from \"../../entity-ids/iam\";\nimport * as SharedEntityIds from \"../../entity-ids/shared\";\nimport { AnyTableName } from \"../../entity-ids/table-names\";\n\nexport class Model extends M.Class<Model>(`AuditLogModel`)(\n  makeFields(SharedEntityIds.AuditLogId, {\n    /** Surrogate 32 bit integer Primary key identifier for the file */\n    entityKind: AnyTableName,\n    entityId: AnyEntityId,\n    action: S.String,\n    userSessionId: BS.FieldOptionOmittable(IamEntityIds.SessionId),\n    userId: SharedEntityIds.UserId,\n    userEmail: M.Sensitive(\n      BS.Email.annotations({\n        description: \"The user's email address\",\n      })\n    ),\n    userIp: BS.FieldOptionOmittable(BS.IP),\n    oldValues: BS.FieldOptionOmittable(BS.Json),\n    oldValuesJson: BS.FieldOptionOmittable(BS.Json),\n    newValues: BS.FieldOptionOmittable(BS.Json),\n    newValuesJson: BS.FieldOptionOmittable(BS.Json),\n    metadataJson: BS.FieldOptionOmittable(BS.Json),\n    metadata: BS.FieldOptionOmittable(BS.Json),\n  })\n) {}\n","export * from \"./entity-ids/index\";\n","import { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport { SharedEntityIds } from \"../../entity-ids\";\n\nexport class Model extends M.Class<Model>(`FileModel`)(\n  makeFields(SharedEntityIds.FileId, {\n    /** Organization ID Reference */\n    organizationId: SharedEntityIds.OrganizationId,\n  })\n) {}\n","/**\n * @fileoverview Upload Path Schema and Transformations\n *\n * This module provides a comprehensive solution for handling file upload paths in S3.\n * It implements bidirectional transformations between structured data and S3 path strings,\n * with automatic sharding, timestamp generation, and validation.\n *\n * Path Structure:\n * /{env}/tenants/{shard}/{orgType}/{orgId}/{entityKind}/{entityId}/{attribute}/{year}/{month}/{fileId}.{ext}\n *\n * Example:\n * /dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\n *\n * Features:\n * - Automatic shard prefix generation from FileId for load distribution\n * - Current timestamp injection (year/month) during encoding\n * - Bidirectional parsing and validation\n * - Type-safe transformations using Effect Schema\n */\n\nimport { EnvValue } from \"@beep/constants\";\nimport { BS } from \"@beep/schema\";\nimport * as DateTime from \"effect/DateTime\";\nimport * as Effect from \"effect/Effect\";\nimport * as Hash from \"effect/Hash\";\nimport * as ParseResult from \"effect/ParseResult\";\nimport * as S from \"effect/Schema\";\nimport { AnyEntityId, EntityKind, SharedEntityIds } from \"../../../entity-ids\";\nimport * as Organization from \"../../Organization\";\n\n/**\n * Encoded shard prefix as a plain string.\n *\n * This represents the shard prefix in its raw string form as it appears in S3 paths.\n * The prefix is a 2-character hexadecimal string used for distributing files across\n * S3 prefixes to avoid hotspotting and improve performance.\n *\n * @example \"a1\", \"f3\", \"00\", \"ff\"\n */\nexport class ShardPrefixEncoded extends S.String.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefixEncoded\"),\n  identifier: \"ShardPrefixEncoded\",\n  title: \"Shard Prefix Encoded\",\n  description:\n    \"Raw string representation of a two-character hexadecimal shard prefix for S3 load distribution. Used to distribute files across S3 prefixes to prevent hotspotting.\",\n  examples: [\"a1\", \"f3\", \"00\", \"ff\", \"2b\"],\n}) {}\n\nexport namespace ShardPrefixEncoded {\n  export type Type = S.Schema.Type<typeof ShardPrefixEncoded>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefixEncoded>;\n}\n\n/**\n * Validated and branded shard prefix.\n *\n * This is the decoded/validated form of a shard prefix that ensures:\n * - Exactly 2 characters in length\n * - Only contains hexadecimal characters (0-9, a-f, case insensitive)\n * - Is properly trimmed and non-empty\n *\n * The branded type prevents accidental mixing with regular strings\n * and provides compile-time safety.\n *\n * @example ShardPrefixDecoded branded strings: \"a1\", \"F3\", \"00\", \"ff\"\n */\nexport class ShardPrefixDecoded extends S.NonEmptyTrimmedString.pipe(\n  S.pattern(BS.Regex.make(/^[0-9a-f]{2}$/i)),\n  S.brand(\"ShardPrefixDecoded\")\n).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefixDecoded\"),\n  identifier: \"ShardPrefixDecoded\",\n  title: \"Shard Prefix Decoded\",\n  description:\n    \"Validated two-character hexadecimal shard prefix with branded type safety. Ensures proper format (exactly 2 hex characters) for consistent S3 load distribution.\",\n  examples: [\n    BS.makeBranded(\"a1\"),\n    BS.makeBranded(\"F3\"),\n    BS.makeBranded(\"00\"),\n    BS.makeBranded(\"ff\"),\n    BS.makeBranded(\"2B\"),\n  ],\n}) {}\n\nexport namespace ShardPrefixDecoded {\n  export type Type = S.Schema.Type<typeof ShardPrefixDecoded>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefixDecoded>;\n}\n\n/**\n * Bidirectional transformation between encoded and decoded shard prefixes.\n *\n * This schema provides:\n * - Validation of shard prefix format during decoding\n * - Type-safe conversion between string and branded types\n * - Deterministic shard generation from FileId for consistent routing\n *\n * The shard prefix is used to distribute files across S3 prefixes, preventing\n * hotspotting by ensuring files are evenly distributed across the storage system.\n *\n * @example\n * ```typescript\n * // Generate shard from FileId\n * const shard = ShardPrefix.fromFileId(\"file__123-456-789\");\n *\n * // Decode string to validated shard\n * const decoded = S.decode(ShardPrefix)(\"a1\");\n *\n * // Encode back to string\n * const encoded = S.encode(ShardPrefix)(decoded);\n * ```\n */\nexport class ShardPrefix extends S.transformOrFail(ShardPrefixEncoded, ShardPrefixDecoded, {\n  strict: true,\n  decode: (encoded, _, ast) =>\n    ParseResult.try({\n      try: () => S.decodeUnknownSync(ShardPrefixDecoded)(encoded),\n      catch: () =>\n        new ParseResult.Type(ast, encoded, \"Invalid shard prefix format: must be exactly 2 hexadecimal characters\"),\n    }),\n  encode: (decoded, _, ast) =>\n    ParseResult.try({\n      try: () => S.decodeUnknownSync(ShardPrefixEncoded)(decoded),\n      catch: () => new ParseResult.Type(ast, decoded, \"Failed to encode shard prefix to string representation\"),\n    }),\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefix\"),\n  identifier: \"ShardPrefix\",\n  title: \"Shard Prefix Transformation\",\n  description:\n    \"Bidirectional transformation for shard prefixes with validation. Converts between raw strings and validated branded types while ensuring proper hexadecimal format for S3 load distribution.\",\n}) {\n  /**\n   * Generate a deterministic shard prefix from a FileId.\n   *\n   * Uses Effect's Hash function to create a consistent 2-character hex prefix\n   * from the FileId. The same FileId will always produce the same shard prefix,\n   * ensuring files are consistently routed to the same S3 prefix.\n   *\n   * @param fileId - The FileId to generate a shard prefix from\n   * @returns A validated ShardPrefix that can be used in S3 paths\n   *\n   * @example\n   * ```typescript\n   * const fileId = \"file__12345678-1234-1234-1234-123456789012\" as FileId.Type;\n   * const shard = ShardPrefix.fromFileId(fileId); // Returns something like \"a1\"\n   * ```\n   */\n  static readonly fromFileId = (fileId: SharedEntityIds.FileId.Type) => {\n    const hashValue = Hash.string(fileId);\n    const hexString = Math.abs(hashValue).toString(16).slice(0, 2).padStart(2, \"0\");\n    return S.decodeSync(ShardPrefix)(hexString);\n  };\n}\n\nexport namespace ShardPrefix {\n  export type Type = S.Schema.Type<typeof ShardPrefix>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefix>;\n}\n\n/**\n * Template literal parts defining the structure of an upload path.\n *\n * This array defines the exact structure of S3 upload paths used throughout the system.\n * Each element represents either a literal string (like \"/\" or \"tenants\") or a schema\n * that validates and parses dynamic parts of the path.\n *\n * Path Structure Breakdown:\n * - /{env} - Environment (dev, staging, prod)\n * - /tenants - Literal \"tenants\" segment\n * - /{shard} - 2-char hex shard prefix for load distribution\n * - /{orgType} - Organization type (individual, team, enterprise)\n * - /{orgId} - Organization ID (UUID format)\n * - /{entityKind} - Entity type (organization, user, team)\n * - /{entityId} - Entity identifier (string)\n * - /{attribute} - File attribute name (avatar, logo, document, etc.)\n * - /{year} - 4-digit year (auto-generated)\n * - /{month} - 2-digit zero-padded month (auto-generated)\n * - /{fileId} - File ID (UUID format)\n * - .{ext} - File extension (jpg, png, pdf, etc.)\n *\n * @example\n * \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n */\nconst UploadPathParts = [\n  \"/\",\n  EnvValue, // Environment: dev, staging, prod\n  \"/\",\n  \"tenants\", // Literal segment for all file paths\n  \"/\",\n  ShardPrefixEncoded, // 2-character hex shard for load distribution\n  \"/\",\n  Organization.OrganizationType, // individual, team, enterprise\n  \"/\",\n  S.encodedSchema(SharedEntityIds.OrganizationId), // Organization UUID\n  \"/\",\n  S.String, // Entity kind\n  \"/\",\n  S.String, // Entity identifier (user ID, team slug, etc.)\n  \"/\",\n  S.String, // Entity attribute (avatar, logo, document, etc.)\n  \"/\",\n  BS.YearEncoded, // 4-digit year (auto-generated from current time)\n  \"/\",\n  BS.MonthNumber, // 2-digit zero-padded month (auto-generated)\n  \"/\",\n  S.encodedSchema(SharedEntityIds.FileId), // File UUID\n  \".\",\n  S.String, // File extension\n] as const;\n\n/**\n * Encoded upload path as a template literal string.\n *\n * This represents the final S3 path as a string that matches the exact\n * pattern defined by UploadPathParts. It's the format that would be used\n * as an actual S3 object key.\n *\n * The path includes all necessary components for:\n * - Environment isolation (dev/staging/prod)\n * - Load distribution (shard prefix)\n * - Organizational hierarchy\n * - Temporal organization (year/month)\n * - Unique file identification\n *\n * @example\n * \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n */\nexport class UploadPathEncoded extends S.TemplateLiteral(...UploadPathParts).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathEncoded\"),\n  identifier: \"UploadPathEncoded\",\n  title: \"Upload Path Encoded\",\n  description:\n    \"Complete S3 object key as a string following the standardized upload path format: /{env}/tenants/{shard}/{orgType}/{orgId}/{entityKind}/{entityId}/{attribute}/{year}/{month}/{fileId}.{ext}\",\n}) {}\n\nexport namespace UploadPathEncoded {\n  export type Type = S.Schema.Type<typeof UploadPathEncoded>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathEncoded>;\n}\n\n/**\n * Template literal parser for upload paths.\n *\n * This parser can both construct and deconstruct upload path strings,\n * converting between the string representation and an array of typed components.\n * It's used internally by the UploadPath transformation to handle the\n * bidirectional conversion between structured data and path strings.\n *\n * The parser validates each component according to its schema and provides\n * type-safe access to individual path segments.\n *\n * @example\n * ```typescript\n * // Parse a path string into components\n * const components = S.decode(UploadPathParser)(\n *   \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n * );\n *\n * // Construct a path from components\n * const pathString = S.encode(UploadPathParser)([\n *   \"/\", \"dev\", \"/\", \"tenants\", \"/\", \"a1\", \"/\", \"individual\",\n *   \"/\", \"org_123\", \"/\", \"user\", \"/\", \"user_456\", \"/\", \"avatar\",\n *   \"/\", \"2024\", \"/\", \"03\", \"/\", \"file_789\", \".\", \"jpg\"\n * ]);\n * ```\n */\nexport const UploadPathParser = S.TemplateLiteralParser(...UploadPathParts).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathParser\"),\n  identifier: \"UploadPathParser\",\n  title: \"Upload Path Parser\",\n  description:\n    \"Bidirectional parser for upload path strings. Converts between string paths and typed component arrays, validating each segment according to its schema definition.\",\n});\n\nexport namespace UploadPathParser {\n  export type Type = S.Schema.Type<typeof UploadPathParser>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathParser>;\n}\n\n/**\n * Structured representation of upload path data.\n *\n * This is the decoded form containing all the components needed to generate\n * an upload path. When decoded, the system automatically injects:\n * - Current timestamp (year/month)\n * - Shard prefix (derived from fileId)\n *\n * This structure contains only the essential data that the caller provides,\n * while the system generates the derived values during encoding.\n *\n * @example\n * ```typescript\n * const uploadData: UploadPathDecoded.Type = {\n *   env: \"dev\",\n *   fileId: SharedEntityIds.FileId.make(\"file__12345678-1234-1234-1234-123456789012\"),\n *   organizationType: \"individual\",\n *   organizationId: SharedEntityIds.OrganizationId.make(\"organization__87654321-4321-4321-4321-210987654321\"),\n *   entityKind: \"user\",\n *   entityIdentifier: SharedEntityIds.UserId.make(\"user__87654321-4321-4321-4321-210987654321\"),\n *   entityAttribute: \"avatar\",\n *   fileItemExtension: \"jpg\"\n * };\n * ```\n */\nexport const UploadPathDecoded = BS.Struct({\n  env: EnvValue, // Environment: dev, staging, prod\n  fileId: SharedEntityIds.FileId, // Unique file identifier\n  organizationType: Organization.OrganizationType, // Organization classification\n  organizationId: SharedEntityIds.OrganizationId, // Organization UUID\n  entityKind: EntityKind, // Type of entity owning the file\n  entityIdentifier: AnyEntityId, // Identifier for the specific entity instance\n  entityAttribute: S.String, // File attribute/purpose (avatar, logo, document, etc.)\n  fileItemExtension: BS.FileExtension, // File extension (validated against allowed types)\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathDecoded\"),\n  identifier: \"UploadPathDecoded\",\n  title: \"Upload Path Decoded Structure\",\n  description:\n    \"Structured data representation for upload paths. Contains all user-provided components needed to generate S3 paths. System automatically injects timestamp and shard prefix during encoding.\",\n  examples: [\n    {\n      env: \"dev\",\n      fileId: SharedEntityIds.FileId.make(\"file__12345678-1234-1234-1234-123456789012\"),\n      organizationType: \"individual\",\n      organizationId: SharedEntityIds.OrganizationId.make(\"organization__87654321-4321-4321-4321-210987654321\"),\n      entityKind: \"user\",\n      entityIdentifier: SharedEntityIds.UserId.make(\"user__12345678-1234-1234-1234-123456789012\"),\n      entityAttribute: \"avatar\",\n      fileItemExtension: \"jpg\",\n    },\n  ],\n});\n\nexport namespace UploadPathDecoded {\n  export type Type = S.Schema.Type<typeof UploadPathDecoded>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathDecoded>;\n}\n\n/**\n * Bidirectional transformation between structured upload data and S3 path strings.\n *\n * This is the main schema for handling file upload paths. It provides:\n *\n * **Encoding (Decode operation)**: UploadPathDecoded -> UploadPathEncoded\n * - Takes structured upload data\n * - Automatically injects current timestamp (year/month)\n * - Generates shard prefix from fileId\n * - Validates all components\n * - Produces complete S3 path string\n *\n * **Decoding (Encode operation)**: UploadPathEncoded -> UploadPathDecoded\n * - Parses S3 path string into components\n * - Validates path structure and format\n * - Extracts all user-provided data\n * - Returns structured representation\n *\n * **Key Features**:\n * - Automatic timestamp injection for time-based organization\n * - Deterministic shard generation for load distribution\n * - Comprehensive validation of all path components\n * - Type-safe bidirectional transformations\n * - Effect-based error handling\n *\n * @example\n * ```typescript\n * // Encode: structured data -> S3 path\n * const uploadData = {\n *   env: \"dev\",\n *   fileId: \"file__123...\",\n *   organizationType: \"individual\",\n *   organizationId: \"org__456...\",\n *   entityKind: \"user\",\n *   entityIdentifier: \"user_789\",\n *   entityAttribute: \"avatar\",\n *   fileItemExtension: \"jpg\"\n * };\n *\n * const s3Path = yield* S.decode(UploadPath)(uploadData);\n * // Result: \"/dev/tenants/a1/individual/org__456.../user/user_789/avatar/2024/03/file__123....jpg\"\n *\n * // Decode: S3 path -> structured data\n * const parsedData = yield* S.encode(UploadPath)(s3Path);\n * // Result: Original uploadData structure\n * ```\n */\nexport class UploadPath extends S.transformOrFail(UploadPathDecoded, UploadPathEncoded, {\n  strict: true,\n  decode: (i, _, ast) => {\n    const program = DateTime.now.pipe(\n      Effect.flatMap((now) =>\n        Effect.flatMap(\n          Effect.all([\n            Effect.succeed(now),\n            Effect.succeed(ShardPrefix.fromFileId(i.fileId)),\n            S.encode(BS.FileExtension)(i.fileItemExtension),\n            S.decode(BS.MonthNumberFromMonthInt)(DateTime.getPartUtc(now, \"month\")),\n          ]),\n          ([now, shardPrefix, fileItemExtension, month]) =>\n            Effect.flatMap(\n              S.encode(UploadPathParser)([\n                \"/\",\n                i.env,\n                \"/\",\n                \"tenants\",\n                \"/\",\n                shardPrefix,\n                \"/\",\n                i.organizationType,\n                \"/\",\n                i.organizationId,\n                \"/\",\n                i.entityKind,\n                \"/\",\n                i.entityIdentifier,\n                \"/\",\n                i.entityAttribute,\n                \"/\",\n                DateTime.getPartUtc(now, \"year\"),\n                \"/\",\n                month,\n                \"/\",\n                i.fileId,\n                \".\",\n                fileItemExtension,\n              ]),\n              (path) => S.decode(UploadPathEncoded)(path)\n            )\n        )\n      )\n    );\n\n    return Effect.try({\n      try: () => Effect.runSync(program),\n      catch: (e) => new ParseResult.Type(ast, i, `Invalid upload path: ${e}`),\n    });\n  },\n  encode: (i, _, ast) => {\n    const program = Effect.flatMap(S.decode(UploadPathParser)(i), (pathParts) =>\n      Effect.flatMap(\n        Effect.all([\n          Effect.succeed(pathParts[1]), // env\n          Effect.succeed(pathParts[7]), // organizationType\n          S.decodeUnknown(SharedEntityIds.OrganizationId)(pathParts[9]), // organizationId\n          S.decodeUnknown(EntityKind)(pathParts[11]), // entityKind\n          S.decodeUnknown(AnyEntityId)(pathParts[13]), //entityIdentifier\n          Effect.succeed(pathParts[15]), // entityAttribute\n          S.decodeUnknown(SharedEntityIds.FileId)(pathParts[21]), //fileId\n          S.decodeUnknown(BS.FileExtension)(pathParts[23]), // FileItemExtension\n        ]),\n        ([\n          env,\n          organizationType,\n          organizationId,\n          entityKind,\n          entityIdentifier,\n          entityAttribute,\n          fileId,\n          fileItemExtension,\n        ]) =>\n          S.decode(UploadPathDecoded)({\n            env,\n            fileId,\n            organizationType,\n            organizationId,\n            entityKind,\n            entityIdentifier,\n            entityAttribute,\n            fileItemExtension,\n          })\n      )\n    );\n\n    return Effect.try({\n      try: () => Effect.runSync(program),\n      catch: (e) => new ParseResult.Type(ast, i, `Failed to parse upload path: ${e}`),\n    });\n  },\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPath\"),\n  identifier: \"UploadPath\",\n  title: \"Upload Path Transformation\",\n  description:\n    \"Complete bidirectional transformation system for S3 upload paths. Handles conversion between structured upload data and S3 object keys with automatic timestamp injection, shard generation, and comprehensive validation. Ensures consistent path format across all file operations.\",\n  documentation: [\n    \"Automatic shard prefix generation using fileId hash for load distribution\",\n    \"Current timestamp injection (year/month) for temporal organization\",\n    \"Comprehensive validation of all path components and format\",\n    \"Type-safe transformations with Effect-based error handling\",\n    `Supports all entity types: organization, user, team`,\n    \"Compatible with all environments: dev, staging, prod\",\n  ].join(\"\\n- \"),\n}) {}\n\nexport namespace UploadPath {\n  export type Type = S.Schema.Type<typeof UploadPath>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPath>;\n}\n","import { BS } from \"@beep/schema\";\nimport { Slug, Url } from \"@beep/schema/custom\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\nimport { OrganizationType, OrganizationTypeEnum, SubscriptionStatus, SubscriptionTier } from \"./schemas\";\n\nexport const OrganizationModelSchemaId = Symbol.for(\"@beep/shared-domain/OrganizationModel\");\n\n/**\n * Organization model representing organizations.\n * Maps to the `organization` table in the database.\n */\n\nexport class Model extends M.Class<Model>(`OrganizationModel`)(\n  makeFields(SharedEntityIds.OrganizationId, {\n    /** Organization name */\n    name: S.NonEmptyString.annotations({\n      description: \"The organization's display name\",\n    }),\n\n    /** URL-friendly slug identifier */\n    slug: Slug.pipe(S.pattern(/^[a-z0-9]+(?:-[a-z0-9]+)*$/), S.minLength(2), S.maxLength(50)).annotations({\n      description: \"URL-friendly identifier for the organization\",\n    }),\n\n    /** Organization logo URL */\n    logo: BS.FieldOptionOmittable(\n      Url.annotations({\n        description: \"URL to the organization's logo\",\n      })\n    ),\n\n    /** Flexible metadata storage */\n    metadata: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"JSON metadata for additional organization data\",\n      })\n    ),\n    type: BS.toOptionalWithDefault(OrganizationType)(OrganizationTypeEnum.individual).annotations({\n      description: \"The type of the organization\",\n    }),\n    ownerUserId: SharedEntityIds.UserId.annotations({\n      description: \"The owner of the organization\",\n    }),\n    isPersonal: BS.BoolFalse.annotations({\n      description: \"Whether this organization is auto-created for a user\",\n    }),\n    maxMembers: BS.FieldOptionOmittable(\n      S.NonNegativeInt.annotations({\n        description: \"The maximum number of members allowed in the organization\",\n      })\n    ),\n    features: BS.FieldOptionOmittable(BS.Json),\n    settings: BS.FieldOptionOmittable(BS.Json),\n    subscriptionTier: BS.toOptionalWithDefault(SubscriptionTier)(SubscriptionTier.Enum.free).annotations({\n      description: \"The subscription tier of the organization\",\n    }),\n    subscriptionStatus: BS.toOptionalWithDefault(SubscriptionStatus)(SubscriptionStatus.Enum.active).annotations({\n      description: \"The subscription status of the organization\",\n    }),\n  }),\n  {\n    title: \"Organization Model\",\n    description: \"Organization model representing organizations.\",\n    schemaId: OrganizationModelSchemaId,\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nexport const organizationTypeKit = BS.stringLiteralKit(\"individual\", \"team\", \"enterprise\");\n\nexport const makeOrganizationTypePgEnum = organizationTypeKit.toPgEnum;\n\nexport const OrganizationTypeEnum = organizationTypeKit.Enum;\n\nexport const OrganizationTypeOptions = organizationTypeKit.Options;\n\nexport class OrganizationType extends organizationTypeKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/Organization/schemas/OrganizationType\"),\n  identifier: \"OrganizationType\",\n  title: \"Organization Type\",\n  description: \"The type of organization (individual, team, enterprise)\",\n}) {\n  static readonly Options = organizationTypeKit.Options;\n  static readonly Enum = organizationTypeKit.Enum;\n}\n\nexport namespace OrganizationType {\n  export type Type = S.Schema.Type<typeof OrganizationType>;\n  export type Encoded = S.Schema.Encoded<typeof OrganizationType>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nconst kit = BS.stringLiteralKit(\"active\", \"canceled\");\n\nexport const makeSubscriptionStatusPgEnum = kit.toPgEnum;\nexport const SubscriptionStatusEnum = kit.Enum;\nexport const SubscriptionStatusOptions = kit.Options;\n\nexport class SubscriptionStatus extends kit.Schema {\n  static readonly Options = kit.Options;\n  static readonly Enum = kit.Enum;\n}\n\nexport namespace SubscriptionStatus {\n  export type Type = S.Schema.Type<typeof SubscriptionStatus>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionStatus>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nconst kit = BS.stringLiteralKit(\"free\", \"plus\", \"pro\", \"enterprise\");\n\nexport const makeSubscriptionTierPgEnum = kit.toPgEnum;\nexport const SubscriptionTierEnum = kit.Enum;\nexport const SubscriptionTierOptions = kit.Options;\n\nexport class SubscriptionTier extends kit.Schema {\n  static readonly Options = kit.Options;\n  static readonly Enum = kit.Enum;\n}\n\nexport namespace SubscriptionTier {\n  export type Type = S.Schema.Type<typeof SubscriptionTier>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionTier>;\n}\n","import { BS } from \"@beep/schema\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\n\nexport const TeamModelSchemaId = Symbol.for(\"@beep/shared-domain/TeamModel\");\n\n/**\n * Team model representing teams within organizations.\n * Maps to the `team` table in the database.\n */\nexport class Model extends M.Class<Model>(`TeamModel`)(\n  makeFields(SharedEntityIds.TeamId, {\n    /** Team name */\n    name: S.NonEmptyString.annotations({\n      description: \"The team's name\",\n    }),\n\n    /** Team description */\n    description: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"Description of the team's purpose\",\n      })\n    ),\n\n    /** Team slug for URLs */\n    slug: BS.Slug.annotations({\n      description: \"URL-friendly team identifier\",\n    }),\n\n    /** Team metadata */\n    metadata: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"JSON metadata for additional team data\",\n      })\n    ),\n  }),\n  {\n    title: \"Team Model\",\n    description: \"Team model representing teams within organizations.\",\n    schemaId: TeamModelSchemaId,\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nexport const UserGenderKit = BS.stringLiteralKit(\"male\", \"female\");\n\nexport const UserGenderEnum = UserGenderKit.Enum;\n\nexport const makeUserGenderPgEnum = UserGenderKit.toPgEnum;\n\nexport const UserGenderOptions = UserGenderKit.Options;\n\nexport class UserGender extends UserGenderKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/iam-domain/User/UserGender\"),\n  identifier: \"UserGender\",\n  title: \"User Gender\",\n  description: \"The user's role in the system\",\n}) {\n  static readonly Options = UserGenderKit.Options;\n  static readonly Enum = UserGenderKit.Enum;\n  static readonly DropDownOptions = UserGenderKit.Options.map((option) => ({\n    label: option,\n    value: option,\n  }));\n}\n\nexport namespace UserGender {\n  export type Type = S.Schema.Type<typeof UserGender>;\n  export type Encoded = S.Schema.Encoded<typeof UserGender>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nexport const UserRoleKit = BS.stringLiteralKit(\"admin\", \"super_admin\", \"user\", \"tenant\", \"guest\");\n\nexport const UserRoleEnum = UserRoleKit.Enum;\n\nexport const makeUserRolePgEnum = UserRoleKit.toPgEnum;\n\nexport const UserRoleOptions = UserRoleKit.Options;\n\nexport class UserRole extends UserRoleKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/iam-domain/User/UserRole\"),\n  identifier: \"UserRole\",\n  title: \"User Role\",\n  description: \"The user's role in the system\",\n}) {\n  static readonly Options = UserRoleKit.Options;\n  static readonly Enum = UserRoleKit.Enum;\n}\n\nexport namespace UserRole {\n  export type Type = S.Schema.Type<typeof UserRole>;\n  export type Encoded = S.Schema.Encoded<typeof UserRole>;\n}\n","import { BS } from \"@beep/schema\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\nimport { UserGender, UserRole } from \"./schemas\";\n\n/**\n * User model representing application users with authentication and profile data.\n * Maps to the `user` table in the database.\n */\nexport class Model extends M.Class<Model>(`UserModel`)(\n  makeFields(SharedEntityIds.UserId, {\n    /** User's display name */\n    name: S.NonEmptyString.annotations({\n      description: \"The user's display name\",\n    }),\n\n    /** User's email address (unique) */\n    email: BS.Email.annotations({\n      description: \"The user's email address\",\n    }),\n\n    /** Whether the user's email has been verified */\n    emailVerified: BS.BoolWithDefault(false),\n\n    /** User's profile image URL */\n    image: BS.FieldOptionOmittable(\n      S.String.pipe(S.pattern(/^https?:\\/\\/.+/)).annotations({\n        description: \"URL to the user's profile image\",\n      })\n    ),\n\n    /** User's role in the system */\n    role: BS.toOptionalWithDefault(UserRole)(UserRole.Enum.user).annotations({\n      description: \"The user's role in the system\",\n    }),\n    /* The user's gender */\n    gender: BS.toOptionalWithDefault(UserGender)(UserGender.Enum.male).annotations({\n      description: \"The user's gender\",\n    }),\n\n    /** Whether the user is banned */\n    banned: BS.BoolWithDefault(false).annotations({\n      description: \"Whether the user is currently banned\",\n    }),\n\n    /** Reason for ban if user is banned */\n    banReason: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"Reason why the user was banned\",\n      })\n    ),\n\n    /** When the ban expires */\n    banExpires: BS.FieldOptionOmittable(\n      BS.DateTimeFromDate({\n        description: \"When the user's ban expires\",\n      })\n    ),\n\n    /** Whether this is an anonymous user */\n    isAnonymous: BS.BoolWithDefault(false).annotations({\n      description: \"Whether this user is anonymous (guest user)\",\n    }),\n\n    phoneNumber: BS.FieldOptionOmittable(\n      BS.Phone.annotations({\n        description: \"The user's phone number\",\n      })\n    ),\n\n    phoneNumberVerified: BS.BoolWithDefault(false).annotations({\n      description: \"Whether the user's phone number has been verified\",\n    }),\n\n    /** Whether two-factor authentication is enabled */\n    twoFactorEnabled: BS.BoolWithDefault(false).annotations({\n      description: \"Whether two-factor authentication is enabled for this user\",\n    }),\n\n    username: BS.FieldOptionOmittable(\n      S.NonEmptyTrimmedString.pipe(S.lowercased()).annotations({\n        description: \"The user's username\",\n      })\n    ),\n\n    displayUsername: BS.FieldOptionOmittable(\n      S.NonEmptyTrimmedString.annotations({\n        description: \"The user's display name\",\n      })\n    ),\n\n    /** Stripe customer ID for billing */\n    stripeCustomerId: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"Stripe customer ID for billing integration\",\n      })\n    ),\n\n    lastLoginMethod: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"The user's last login method\",\n      })\n    ),\n  }),\n  {\n    title: \"User Model\",\n    description: \"User model representing application users with authentication and profile data.\",\n    schemaId: Symbol.for(\"@beep/iam-domain/UserModel\"),\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport * as O from \"effect/Option\";\nimport type * as S from \"effect/Schema\";\nimport { Model } from \"./User.model\";\n\nexport class NewUser extends BS.Class<NewUser>(\"NewUser\")(\n  Model.insert.pick(\"email\", \"name\", \"username\", \"phoneNumber\", \"gender\", \"displayUsername\"),\n  {\n    schemaId: Symbol.for(\"@beep/iam-domain/User/NewUser\"),\n    title: \"New User\",\n    description: \"The shape of a new user\",\n  }\n) {\n  static readonly create = (input: NewUser.Type) =>\n    Model.insert.make({\n      email: input.email,\n      name: input.name,\n      username: input.username,\n      phoneNumber: input.phoneNumber,\n      gender: input.gender,\n      displayUsername: input.displayUsername,\n      emailVerified: false,\n      phoneNumberVerified: false,\n      banned: false,\n      createdBy: O.some(\"system\"),\n      updatedBy: O.some(\"system\"),\n      source: O.some(\"sign-up\"),\n    });\n}\n\nexport namespace NewUser {\n  export type Type = S.Schema.Type<typeof NewUser>;\n  export type Encoded = S.Schema.Encoded<typeof NewUser>;\n}\n","export * from \"./entities/index\";\n","import { PathBuilder } from \"@beep/constants/paths/utils\";\nimport * as F from \"effect/Function\";\nimport type { IamEntityIds, SharedEntityIds } from \"../entity-ids\";\n\n// Base builders\n\nconst auth = PathBuilder.createRoot(\"/auth\");\nconst signIn = auth.child(\"sign-in\");\nconst signUp = auth.child(\"sign-up\");\nconst updatePassword = auth.child(\"update-password\");\nconst requestResetPassword = auth.child(\"request-reset-password\");\nconst resetPassword = auth.child(\"reset-password\");\nconst verifyEmail = auth.child(\"verify-email\");\nconst verifyPhone = auth.child(\"verify-phone\");\nconst verifyPhoneResend = verifyPhone.child(\"resend\");\nconst acceptInvitation = auth.child(\"accept-invitation\");\nconst passkey = auth.child(\"passkey\");\nconst passkeyManage = passkey.child(\"manage\");\nconst passkeyRegister = passkey.child(\"register\");\nconst anonymous = auth.child(\"anonymous\");\nconst anonymousUpgrade = anonymous.child(\"upgrade\");\nconst signOut = auth.child(\"sign-out\");\nconst oneTimeToken = auth.child(\"one-time-token\");\nconst oneTimeTokenGenerate = oneTimeToken.child(\"generate\");\nconst oneTimeTokenVerify = oneTimeToken.child(\"verify\");\nconst siweRoot = auth.child(\"siwe\");\nconst siweConnect = siweRoot.child(\"connect\");\nconst siweVerify = siweRoot.child(\"verify\");\nconst oauth = auth.child(\"oauth\");\nconst oauthCallback = oauth.child(\"callback\");\nconst oauthSuccess = oauth.child(\"success\");\nconst oauthError = oauth.child(\"error\");\nconst oauthComplete = oauth.child(\"complete\");\nconst oauthLink = oauth.child(\"link\");\nconst oauthProvider = (providerId: string) => oauth.child(providerId);\nconst authCallback = auth.child(\"callback\");\nconst authStatus = auth.child(\"status\");\nconst authSuccess = auth.child(\"success\");\nconst authFailure = auth.child(\"failure\");\nconst twoFactor = auth.child(\"two-factor\");\nconst twoFactorChallenge = twoFactor.child(\"challenge\");\nconst twoFactorOtp = twoFactor.child(\"otp\");\nconst twoFactorTotp = twoFactor.child(\"totp\");\nconst twoFactorRecovery = twoFactor.child(\"recovery\");\nconst twoFactorBackupCodes = twoFactor.child(\"backup-codes\");\nconst twoFactorDevices = twoFactor.child(\"devices\");\nconst device = auth.child(\"device\");\nconst deviceStart = device.child(\"start\");\nconst devicePoll = device.child(\"poll\");\nconst deviceVerify = device.child(\"verify\");\nconst deviceStatus = device.child(\"status\");\nconst account = (id: IamEntityIds.AccountId.Type) => PathBuilder.createRoot(\"/account\").child(id);\nconst dashboard = PathBuilder.createRoot(\"/dashboard\");\nconst dashboardBilling = dashboard.child(\"billing\");\nconst dashboardBillingSubscribe = dashboardBilling.child(\"subscribe\");\nconst dashboardBillingPortal = dashboardBilling.child(\"portal\");\nconst dashboardBillingSuccess = dashboardBilling.child(\"success\");\nconst dashboardBillingCancel = dashboardBilling.child(\"cancel\");\nconst dashboardBillingHistory = dashboardBilling.child(\"history\");\nconst dashboardSecurity = dashboard.child(\"security\");\nconst dashboardSecuritySessions = dashboardSecurity.child(\"sessions\");\nconst dashboardSecurityDevices = dashboardSecurity.child(\"devices\");\nconst dashboardSecurityPasskeys = dashboardSecurity.child(\"passkeys\");\nconst dashboardSecurityTwoFactor = dashboardSecurity.child(\"two-factor\");\nconst dashboardSecurityRecovery = dashboardSecurity.child(\"recovery-codes\");\nconst dashboardSecurityJwt = dashboardSecurity.child(\"jwt\");\nconst dashboardApiKeys = dashboard.child(\"api-keys\");\nconst dashboardApiKeysCreate = dashboardApiKeys.child(\"new\");\nconst dashboardApiKey = (keyId: string) => dashboardApiKeys.child(keyId);\nconst dashboardAdmin = dashboard.child(\"admin\");\nconst dashboardAdminUsers = dashboardAdmin.child(\"users\");\nconst dashboardAdminUser = (id: SharedEntityIds.UserId.Type) => dashboardAdminUsers.child(id);\nconst dashboardAdminSso = dashboardAdmin.child(\"sso\");\nconst dashboardAdminSsoProvider = (providerId: string) => dashboardAdminSso.child(providerId);\nconst dashboardAdminOidc = dashboardAdmin.child(\"oidc\");\nconst dashboardAdminOidcClient = (clientId: string) => dashboardAdminOidc.child(clientId);\nconst dashboardAdminPermissions = dashboardAdmin.child(\"permissions\");\nconst dashboardAdminOauthClients = dashboardAdmin.child(\"oauth-clients\");\nconst dashboardAdminOauthClient = (clientId: string) => dashboardAdminOauthClients.child(clientId);\nconst user = dashboard.child(\"user\");\nconst fileManager = dashboard.child(\"file-manager\");\nconst organization = (id: SharedEntityIds.OrganizationId.Type) => PathBuilder.createRoot(\"/organizations\").child(id);\nconst oauth2 = PathBuilder.createRoot(\"/oauth2\");\nconst oauth2Authorize = oauth2.child(\"authorize\");\nconst oauth2Consent = oauth2.child(\"consent\");\nconst oauth2Register = oauth2.child(\"register\");\nconst oauth2Userinfo = oauth2.child(\"userinfo\");\nconst oauth2Clients = oauth2.child(\"clients\");\nconst oauth2Client = (clientId: string) => oauth2Clients.child(clientId);\nconst apiRoot = PathBuilder.createRoot(\"/api\");\nconst apiAuth = apiRoot.child(\"auth\");\nconst apiAuthJwks = apiAuth.child(\"jwks\");\nconst apiAuthDevice = apiAuth.child(\"device\");\nconst apiOauth2 = apiRoot.child(\"oauth2\");\nconst apiOauth2Authorize = apiOauth2.child(\"authorize\");\nconst apiOauth2Token = apiOauth2.child(\"token\");\nconst apiOauth2Userinfo = apiOauth2.child(\"userinfo\");\nconst apiOauth2Register = apiOauth2.child(\"register\");\nconst apiOauth2Client = apiOauth2.child(\"client\");\nconst apiOauth2ClientId = (clientId: string) => apiOauth2Client.child(clientId);\n\ntype AuthSignInMethod = \"anonymous\" | \"email\" | \"oauth\" | \"oneTap\" | \"otp\" | \"passkey\" | \"totp\" | \"username\";\n\ntype AuthSignUpMethod = \"email\" | \"username\";\n// todo it would be sic to add metadata annotations to individual parts.\nexport const paths = PathBuilder.collection({\n  // static\n  root: \"/\",\n  comingSoon: \"/coming-soon\",\n  maintenance: \"/maintenance\",\n  pricing: \"/pricing\",\n  payment: \"/payment\",\n  about: \"/about-us\",\n  contact: \"/contact-us\",\n  faqs: \"/faqs\",\n  terms: \"/terms\",\n  privacy: \"/privacy-policy\",\n  // auth\n  auth: {\n    signIn: signIn.root,\n    signUp: signUp.root,\n    signOut: signOut.root,\n    updatePassword: updatePassword.root,\n    requestResetPassword: requestResetPassword.root,\n    resetPassword: resetPassword.root,\n    status: authStatus.root,\n    success: authSuccess.root,\n    failure: authFailure.root,\n    callback: authCallback.root,\n    verification: {\n      email: F.pipe(\n        verifyEmail,\n        (ve) =>\n          ({\n            root: ve.root,\n            verify: (token: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                token,\n              }),\n            callback: (token: string, callbackURL: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                token,\n                callbackURL,\n              }),\n            error: (errorCode: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                error: errorCode,\n              }),\n            status: (status: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                status,\n              }),\n          }) as const\n      ),\n      phone: F.pipe(\n        verifyPhone,\n        (vp) =>\n          ({\n            root: vp.root,\n            verify: (code: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                code,\n              }),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                status,\n              }),\n            error: (errorCode: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                error: errorCode,\n              }),\n            resend: verifyPhoneResend.root,\n          }) as const\n      ),\n    },\n    twoFactor: F.pipe(\n      twoFactor,\n      (tf) =>\n        ({\n          root: tf.root,\n          challenge: F.pipe(\n            twoFactorChallenge,\n            (challenge) =>\n              ({\n                root: challenge.root,\n                withToken: (token: string) =>\n                  PathBuilder.dynamicQueries(challenge.root)({\n                    token,\n                  }),\n                trustedDevice: (token: string) =>\n                  PathBuilder.dynamicQueries(challenge.root)({\n                    token,\n                    trustDevice: \"true\",\n                  }),\n              }) as const\n          ),\n          otp: F.pipe(\n            twoFactorOtp,\n            (otp) =>\n              ({\n                root: otp.root,\n                withStatus: (status: string) =>\n                  PathBuilder.dynamicQueries(otp.root)({\n                    status,\n                  }),\n                error: (errorCode: string) =>\n                  PathBuilder.dynamicQueries(otp.root)({\n                    error: errorCode,\n                  }),\n              }) as const\n          ),\n          totp: F.pipe(\n            twoFactorTotp,\n            (totpValue) =>\n              ({\n                root: totpValue.root,\n                withState: (state: string) =>\n                  PathBuilder.dynamicQueries(totpValue.root)({\n                    state,\n                  }),\n                error: (errorCode: string) =>\n                  PathBuilder.dynamicQueries(totpValue.root)({\n                    error: errorCode,\n                  }),\n              }) as const\n          ),\n          recovery: F.pipe(\n            twoFactorRecovery,\n            (recovery) =>\n              ({\n                root: recovery.root,\n                verify: recovery(\"verify\"),\n                withToken: (token: string) =>\n                  PathBuilder.dynamicQueries(recovery.root)({\n                    token,\n                  }),\n              }) as const\n          ),\n          backupCodes: {\n            root: twoFactorBackupCodes.root,\n          },\n          devices: {\n            root: twoFactorDevices.root,\n          },\n        }) as const\n    ),\n    acceptInvitation: acceptInvitation.root,\n    device: {\n      root: device.root,\n      start: deviceStart.root,\n      poll: devicePoll.root,\n      status: deviceStatus.root,\n      verify: deviceVerify.root,\n      approve: device(\"approve\"),\n      denied: device(\"denied\"),\n      success: device(\"success\"),\n      withUserCode: (userCode: string) =>\n        PathBuilder.dynamicQueries(device.root)({\n          userCode,\n        }),\n    },\n    passkey: passkey.root,\n    anonymous: anonymous.root,\n    oauth: oauth.root,\n    oneTimeToken: oneTimeToken.root,\n    siwe: siweRoot.root,\n    routes: {\n      signIn: F.pipe(\n        signIn,\n        (si) =>\n          ({\n            root: si.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                callbackURL,\n              }),\n            withMethod: (method: AuthSignInMethod) =>\n              PathBuilder.dynamicQueries(si.root)({\n                method,\n              }),\n            withCallbackAndMethod: (callbackURL: string, method: AuthSignInMethod) =>\n              PathBuilder.dynamicQueries(si.root)({\n                callbackURL,\n                method,\n              }),\n            withError: (errorCode: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                error: errorCode,\n              }),\n            withState: (state: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                state,\n              }),\n          }) as const\n      ),\n      signUp: F.pipe(\n        signUp,\n        (su) =>\n          ({\n            root: su.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                callbackURL,\n              }),\n            withMethod: (method: AuthSignUpMethod) =>\n              PathBuilder.dynamicQueries(su.root)({\n                method,\n              }),\n            withPlan: (plan: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                plan,\n              }),\n            withSource: (source: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                source,\n              }),\n          }) as const\n      ),\n      requestResetPassword: F.pipe(\n        requestResetPassword,\n        (rrp) =>\n          ({\n            root: rrp.root,\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(rrp.root)({\n                status,\n              }),\n            withEmail: (email: string) =>\n              PathBuilder.dynamicQueries(rrp.root)({\n                email,\n              }),\n          }) as const\n      ),\n      resetPassword: F.pipe(\n        resetPassword,\n        (rp) =>\n          ({\n            root: rp.root,\n            withToken: (token: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n              }),\n            withTokenAndStatus: (token: string, status: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                status,\n              }),\n            withTokenAndError: (token: string, error: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                error,\n              }),\n            withTokenAndCallback: (token: string, callbackURL: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                callbackURL,\n              }),\n          }) as const\n      ),\n      acceptInvitation: F.pipe(\n        acceptInvitation,\n        (ai) =>\n          ({\n            root: ai.root,\n            token: PathBuilder.dynamicPath(ai.root),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(ai.root)({\n                status,\n              }),\n          }) as const\n      ),\n      oauth: {\n        root: oauth.root,\n        callback: oauthCallback.root,\n        success: oauthSuccess.root,\n        error: oauthError.root,\n        complete: oauthComplete.root,\n        link: oauthLink.root,\n        withState: (state: string) =>\n          PathBuilder.dynamicQueries(oauth.root)({\n            state,\n          }),\n        provider: F.flow(\n          oauthProvider,\n          (provider) =>\n            ({\n              root: provider.root,\n              callback: provider(\"callback\"),\n              link: provider(\"link\"),\n              complete: provider(\"complete\"),\n              error: provider(\"error\"),\n            }) as const\n        ),\n      },\n      passkey: F.pipe(\n        passkey,\n        (pk) =>\n          ({\n            root: pk.root,\n            manage: passkeyManage.root,\n            register: passkeyRegister.root,\n            withState: (state: string) =>\n              PathBuilder.dynamicQueries(pk.root)({\n                state,\n              }),\n            withError: (errorCode: string) =>\n              PathBuilder.dynamicQueries(pk.root)({\n                error: errorCode,\n              }),\n          }) as const\n      ),\n      anonymous: F.pipe(\n        anonymous,\n        (anon) =>\n          ({\n            root: anon.root,\n            upgrade: anonymousUpgrade.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(anon.root)({\n                callbackURL,\n              }),\n          }) as const\n      ),\n      oneTimeToken: F.pipe(\n        oneTimeToken,\n        (ott) =>\n          ({\n            root: ott.root,\n            generate: oneTimeTokenGenerate.root,\n            verify: oneTimeTokenVerify.root,\n            withToken: (token: string) =>\n              PathBuilder.dynamicQueries(oneTimeTokenVerify.root)({\n                token,\n              }),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(ott.root)({\n                status,\n              }),\n          }) as const\n      ),\n      siwe: F.pipe(\n        siweRoot,\n        (siwe) =>\n          ({\n            root: siwe.root,\n            connect: siweConnect.root,\n            verify: siweVerify.root,\n            withRedirect: (redirect: string) =>\n              PathBuilder.dynamicQueries(siwe.root)({\n                redirect,\n              }),\n          }) as const\n      ),\n    },\n  },\n  settings: {\n    root: \"/settings\",\n  },\n  admin: {\n    root: \"/admin\",\n  },\n  organizations: {\n    root: \"/organizations\",\n    ...F.flow(organization, (o) => ({\n      root: o.root,\n      edit: o(\"edit\"),\n      members: o(\"members\"),\n      settings: o(\"settings\"),\n      billing: o(\"billing\"),\n      invitations: o(\"invitations\"),\n      security: o(\"security\"),\n    })),\n  },\n  account: F.flow(account, (a) => ({\n    root: a.root,\n    edit: a(\"edit\"),\n    security: a(\"security\"),\n    preferences: a(\"preferences\"),\n    notifications: a(\"notifications\"),\n    sessions: a(\"sessions\"),\n    devices: a(\"devices\"),\n    apiKeys: a(\"api-keys\"),\n    passkeys: a(\"passkeys\"),\n    twoFactor: a(\"two-factor\"),\n    recoveryCodes: a(\"recovery-codes\"),\n    jwt: a(\"jwt\"),\n  })),\n  fileManager: {\n    root: fileManager.root,\n  },\n  // dashboard\n  dashboard: {\n    root: dashboard.root,\n    user: {\n      root: user.root,\n      account: user(\"account\"),\n      edit: (id: SharedEntityIds.UserId.Type) => user.child(id)(\"edit\"),\n    },\n    security: {\n      root: dashboardSecurity.root,\n      sessions: dashboardSecuritySessions.root,\n      devices: dashboardSecurityDevices.root,\n      passkeys: dashboardSecurityPasskeys.root,\n      twoFactor: dashboardSecurityTwoFactor.root,\n      recoveryCodes: dashboardSecurityRecovery.root,\n      jwt: dashboardSecurityJwt.root,\n    },\n    billing: {\n      root: dashboardBilling.root,\n      subscribe: dashboardBillingSubscribe.root,\n      portal: dashboardBillingPortal.root,\n      success: dashboardBillingSuccess.root,\n      cancel: dashboardBillingCancel.root,\n      history: dashboardBillingHistory.root,\n    },\n    apiKeys: {\n      root: dashboardApiKeys.root,\n      create: dashboardApiKeysCreate.root,\n      detail: F.flow(\n        dashboardApiKey,\n        (apiKey) =>\n          ({\n            root: apiKey.root,\n            edit: apiKey(\"edit\"),\n            rotate: apiKey(\"rotate\"),\n          }) as const\n      ),\n    },\n    admin: {\n      root: dashboardAdmin.root,\n      permissions: dashboardAdminPermissions.root,\n      users: {\n        root: dashboardAdminUsers.root,\n        create: dashboardAdminUsers(\"create\"),\n        detail: F.flow(\n          dashboardAdminUser,\n          (adminUser) =>\n            ({\n              root: adminUser.root,\n              edit: adminUser(\"edit\"),\n              sessions: adminUser(\"sessions\"),\n              impersonate: adminUser(\"impersonate\"),\n              revokeSession: adminUser(\"revoke-session\"),\n              revokeSessions: adminUser(\"revoke-sessions\"),\n              ban: adminUser(\"ban\"),\n              unban: adminUser(\"unban\"),\n              permissions: adminUser(\"permissions\"),\n            }) as const\n        ),\n      },\n      sso: {\n        root: dashboardAdminSso.root,\n        create: dashboardAdminSso(\"new\"),\n        provider: F.flow(\n          dashboardAdminSsoProvider,\n          (provider) =>\n            ({\n              root: provider.root,\n              settings: provider(\"settings\"),\n              delete: provider(\"delete\"),\n            }) as const\n        ),\n      },\n      oidc: {\n        root: dashboardAdminOidc.root,\n        register: dashboardAdminOidc(\"register\"),\n        client: F.flow(\n          dashboardAdminOidcClient,\n          (client) =>\n            ({\n              root: client.root,\n              edit: client(\"edit\"),\n              secrets: client(\"secrets\"),\n            }) as const\n        ),\n      },\n      oauthClients: {\n        root: dashboardAdminOauthClients.root,\n        client: F.flow(\n          dashboardAdminOauthClient,\n          (client) =>\n            ({\n              root: client.root,\n              revoke: client(\"revoke\"),\n            }) as const\n        ),\n      },\n    },\n  },\n  oauth2: {\n    root: oauth2.root,\n    authorize: oauth2Authorize.root,\n    consent: oauth2Consent.root,\n    register: oauth2Register.root,\n    userinfo: oauth2Userinfo.root,\n    clients: {\n      root: oauth2Clients.root,\n      client: F.flow(\n        oauth2Client,\n        (client) =>\n          ({\n            root: client.root,\n            edit: client(\"edit\"),\n            secrets: client(\"secrets\"),\n          }) as const\n      ),\n    },\n  },\n  api: {\n    root: apiRoot.root,\n    auth: {\n      root: apiAuth.root,\n      jwks: apiAuthJwks.root,\n      device: {\n        root: apiAuthDevice.root,\n      },\n    },\n    oauth2: {\n      root: apiOauth2.root,\n      authorize: apiOauth2Authorize.root,\n      token: apiOauth2Token.root,\n      userinfo: apiOauth2Userinfo.root,\n      register: apiOauth2Register.root,\n      client: F.flow(\n        apiOauth2ClientId,\n        (client) =>\n          ({\n            root: client.root,\n          }) as const\n      ),\n    },\n  },\n} as const);\n","export * as Common from \"./common\";\nexport * as Entities from \"./entities\";\nexport * from \"./entity-ids\";\nexport * from \"./entity-ids/entity-kind\";\nexport * from \"./value-objects\";\n","export * from \"./paths\";\n","import { AuthProviderNameValue, EnvValue, LogFormat } from \"@beep/constants\";\nimport { Csp } from \"@beep/schema/config/Csp\";\nimport { DomainName } from \"@beep/schema/custom/Domain.schema\";\nimport { Email } from \"@beep/schema/custom/Email.schema\";\nimport { Url } from \"@beep/schema/custom/Url.schema\";\nimport { SharedEntityIds } from \"@beep/shared-domain\";\nimport * as Config from \"effect/Config\";\nimport * as ConfigProvider from \"effect/ConfigProvider\";\nimport * as Effect from \"effect/Effect\";\nimport * as F from \"effect/Function\";\nimport * as LogLevel from \"effect/LogLevel\";\nimport * as Match from \"effect/Match\";\nimport * as O from \"effect/Option\";\nimport * as Redacted from \"effect/Redacted\";\nimport * as S from \"effect/Schema\";\nimport * as Str from \"effect/String\";\nimport { ConfigArrayURL } from \"./common\";\n\nconst PLACEHOLDER_VALUE = \"PLACE_HOLDER\";\n\nconst withPlaceholderRedacted = <A>(config: Config.Config<A>) =>\n  config.pipe(Config.withDefault(Redacted.make(PLACEHOLDER_VALUE)));\n\nexport const isPlaceholder = <A>(configValue: A) =>\n  Redacted.isRedacted(configValue)\n    ? Redacted.value(configValue) === PLACEHOLDER_VALUE\n    : configValue === PLACEHOLDER_VALUE;\n\nconst AppConfig = Config.zipWith(\n  Config.nested(\"APP\")(\n    Config.all({\n      protocol: S.Config(\"ENV\", EnvValue).pipe(\n        Config.map((env) =>\n          Match.value(env).pipe(\n            Match.when(\"dev\", () => \"http\"),\n            Match.whenOr(\"staging\", \"prod\", () => \"https\"),\n            Match.exhaustive\n          )\n        )\n      ),\n      name: Config.string(\"NAME\"),\n      env: S.Config(\"ENV\", EnvValue).pipe(Config.withDefault(EnvValue.Enum.dev)),\n      rootDomain: Config.string(\"DOMAIN\").pipe(Config.map((domain) => Str.split(\":\")(domain)[0])),\n      domain: Config.string(\"DOMAIN\").pipe(Config.withDefault(\"localhost\")),\n      adminUserIds: Config.array(S.Config(\"ADMIN_USER_IDS\", SharedEntityIds.UserId)),\n      logFormat: S.Config(\"LOG_FORMAT\", LogFormat).pipe(Config.withDefault(LogFormat.Enum.pretty)),\n      logLevel: Config.logLevel(\"LOG_LEVEL\").pipe(Config.withDefault(LogLevel.None)),\n      mcpUrl: Config.url(\"MCP_URL\"),\n      authUrl: Config.url(\"AUTH_URL\"),\n      apiUrl: Config.url(\"API_URL\"),\n      clientUrl: Config.url(\"CLIENT_URL\"),\n    })\n  ),\n  Config.nested(\"VERCEL\")(\n    Config.all({\n      projectProductionUrl: Config.option(S.Config(\"PROJECT_PRODUCTION_URL\", DomainName)),\n      vercelEnv: Config.option(Config.literal(\"production\", \"preview\", \"development\", \"staging\")(\"ENV\")),\n      vercelUrl: Config.option(S.Config(\"URL\", DomainName)),\n    })\n  ),\n  (appConfig, vercelConfig) => {\n    const clientUrl = Url.make(`https://${appConfig.clientUrl}`);\n    const projectProductionUrl = F.pipe(\n      vercelConfig.projectProductionUrl,\n      O.match({\n        onNone: () => clientUrl,\n        onSome: (prodUrl) => Url.make(`https://${prodUrl}`),\n      })\n    );\n    const baseUrl = O.all([vercelConfig.vercelUrl, vercelConfig.vercelEnv]).pipe(\n      O.match({\n        onNone: () => Url.make(`http://${appConfig.clientUrl}`),\n        onSome: ([vercelUrl, vEnv]) =>\n          vEnv === \"production\"\n            ? projectProductionUrl\n            : vEnv === \"preview\"\n              ? Url.make(`https://${vercelUrl}`)\n              : clientUrl,\n      })\n    );\n    return {\n      ...appConfig,\n      baseUrl,\n      projectProductionUrl,\n      vercelEnv: F.pipe(\n        vercelConfig.vercelEnv,\n        O.match({\n          onNone: () => \"development\",\n          onSome: (v) => v,\n        })\n      ),\n    };\n  }\n);\n\nexport const ServerConfig = Config.all({\n  nodeEnv: Config.literal(\"development\", \"production\", \"test\")(\"NODE_ENV\"),\n  baseUrl: Config.nested(\"VERCEL\")(\n    Config.all({\n      url: Config.option(S.Config(\"URL\", DomainName)),\n      env: Config.option(Config.literal(\"production\", \"preview\", \"development\", \"staging\")(\"ENV\")),\n      projectProductionUrl: Config.option(S.Config(\"PROJECT_PRODUCTION_URL\", DomainName)),\n    })\n  ).pipe(\n    Config.map(({ env, url, projectProductionUrl }) => {\n      const baseUrl =\n        O.isSome(env) && env.value === \"production\" && O.isSome(projectProductionUrl)\n          ? Url.make(`https://${projectProductionUrl.value}`)\n          : O.isSome(url)\n            ? Url.make(`https://${url}`)\n            : Url.make(`http://localhost:3000`);\n      return baseUrl.toString();\n    })\n  ),\n  productionUrl: Config.option(S.Config(\"VERCEL_PROJECT_PRODUCTION_URL\", DomainName)),\n  app: AppConfig,\n  auth: Config.all({\n    secret: Config.redacted(Config.nonEmptyString(\"BETTER_AUTH_SECRET\")),\n  }),\n  cloud: Config.nested(\"CLOUD\")(\n    Config.all({\n      aws: Config.nested(\"AWS\")(\n        Config.all({\n          region: Config.nonEmptyString(\"REGION\").pipe(Config.withDefault(\"us-east-1\")),\n          accessKeyId: Config.redacted(Config.nonEmptyString(\"ACCESS_KEY_ID\")).pipe(withPlaceholderRedacted),\n          secretAccessKey: Config.redacted(Config.nonEmptyString(\"SECRET_ACCESS_KEY\")).pipe(withPlaceholderRedacted),\n          s3: Config.nested(\"S3\")(\n            Config.all({\n              bucketName: Config.nonEmptyString(\"BUCKET_NAME\"),\n            })\n          ),\n        })\n      ),\n      google: Config.nested(\"GOOGLE\")(\n        Config.all({\n          captcha: Config.nested(\"CAPTCHA\")(\n            Config.all({\n              siteKey: Config.redacted(Config.nonEmptyString(\"SITE_KEY\")).pipe(withPlaceholderRedacted),\n              secretKey: Config.redacted(Config.nonEmptyString(\"SECRET_KEY\")).pipe(withPlaceholderRedacted),\n            })\n          ),\n        })\n      ),\n    })\n  ),\n  db: Config.nested(\"DB\")(\n    Config.all({\n      pg: Config.nested(\"PG\")(\n        Config.all({\n          url: Config.redacted(Config.nonEmptyString(\"URL\")),\n          ssl: Config.boolean(\"SSL\").pipe(Config.withDefault(false)),\n          port: Config.port(\"PORT\").pipe(Config.withDefault(5432)),\n          user: Config.nonEmptyString(\"USER\").pipe(Config.withDefault(\"postgres\")),\n          password: Config.redacted(Config.nonEmptyString(\"PASSWORD\")),\n          host: Config.nonEmptyString(\"HOST\").pipe(Config.withDefault(\"localhost\")),\n          database: Config.nonEmptyString(\"DATABASE\").pipe(Config.withDefault(\"postgres\")),\n        })\n      ),\n    })\n  ),\n  payment: Config.nested(\"PAYMENT\")(\n    Config.all({\n      stripe: Config.nested(\"STRIPE\")(\n        Config.all({\n          key: Config.redacted(Config.nonEmptyString(\"KEY\")).pipe(withPlaceholderRedacted),\n          webhookSecret: Config.redacted(Config.nonEmptyString(\"WEBHOOK_SECRET\")).pipe(withPlaceholderRedacted),\n        })\n      ),\n    })\n  ),\n  email: Config.nested(\"EMAIL\")(\n    Config.all({\n      from: Config.succeed(Email.make(\"beep@codedank.com\")),\n      test: Config.succeed(Email.make(\"beep@codank.com\")),\n      resend: Config.nested(\"RESEND\")(\n        Config.all({\n          apiKey: Config.redacted(Config.nonEmptyString(\"API_KEY\")).pipe(withPlaceholderRedacted),\n        })\n      ),\n    })\n  ),\n  kv: Config.nested(\"KV\")(\n    Config.all({\n      redis: Config.nested(\"REDIS\")(\n        Config.all({\n          url: Config.nonEmptyString(\"URL\"),\n          port: Config.port(\"PORT\").pipe(Config.withDefault(6379)),\n          password: Config.redacted(Config.nonEmptyString(\"PASSWORD\")),\n        })\n      ),\n    })\n  ),\n  marketing: Config.nested(\"MARKETING\")(\n    Config.all({\n      dub: Config.nested(\"DUB\")(\n        Config.all({\n          token: Config.redacted(Config.nonEmptyString(\"TOKEN\")).pipe(withPlaceholderRedacted),\n        })\n      ),\n    })\n  ),\n  oauth: Config.nested(\"OAUTH\")(\n    Config.all({\n      authProviderNames: Config.array(S.Config(\"PROVIDER_NAMES\", AuthProviderNameValue)),\n      provider: Config.nested(\"PROVIDER\")(\n        Config.all({\n          microsoft: Config.nested(\"MICROSOFT\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n              tenantId: Config.redacted(Config.nonEmptyString(\"TENANT_ID\")).pipe(Config.option),\n            })\n          ),\n          google: Config.nested(\"GOOGLE\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n            })\n          ),\n          discord: Config.nested(\"DISCORD\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n            })\n          ),\n          github: Config.nested(\"GITHUB\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n            })\n          ),\n          linkedin: Config.nested(\"LINKEDIN\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n            })\n          ),\n          twitter: Config.nested(\"TWITTER\")(\n            Config.all({\n              clientId: Config.redacted(Config.nonEmptyString(\"CLIENT_ID\")).pipe(Config.option),\n              clientSecret: Config.redacted(Config.nonEmptyString(\"CLIENT_SECRET\")).pipe(Config.option),\n            })\n          ),\n        })\n      ),\n    })\n  ),\n  otlp: Config.nested(\"OTLP\")(\n    Config.all({\n      traceExporterUrl: Config.url(\"TRACE_EXPORTER_URL\"),\n      logExporterUrl: Config.url(\"LOG_EXPORTER_URL\"),\n      metricExporterUrl: Config.url(\"METRIC_EXPORTER_URL\"),\n    })\n  ),\n  security: Config.nested(\"SECURITY\")(\n    Config.all({\n      trustedOrigins: ConfigArrayURL(\"TRUSTED_ORIGINS\"),\n      csp: Csp.Config(\"CSP\").pipe(Config.map(Csp.toHeader)),\n    })\n  ),\n  ai: Config.nested(\"AI\")(\n    Config.all({\n      openai: Config.nested(\"OPENAI\")(\n        Config.all({\n          apiKey: Config.redacted(Config.nonEmptyString(\"API_KEY\")).pipe(withPlaceholderRedacted),\n        })\n      ),\n      anthropic: Config.nested(\"ANTHROPIC\")(\n        Config.all({\n          apiKey: Config.redacted(Config.nonEmptyString(\"API_KEY\")).pipe(withPlaceholderRedacted),\n        })\n      ),\n    })\n  ),\n});\n\nconst provider = ConfigProvider.fromEnv().pipe(ConfigProvider.constantCase);\nconst loadConfig = provider.load(ServerConfig);\n\nexport const serverEnv = Effect.runSync(loadConfig);\n","import * as Config from \"effect/Config\";\nimport * as F from \"effect/Function\";\n\nexport const ConfigURL = F.flow(\n  <TName extends string>(name: TName) => name,\n  Config.url,\n  Config.map((url) => url.toString())\n);\n\nexport const ConfigArrayURL = F.flow(<TName extends string>(name: TName) =>\n  Config.array(Config.hashSet(Config.url()), name).pipe(Config.map((urls) => urls.map((url) => url.toString())))\n);\n","/**\n * @since 2.0.0\n */\nimport type * as Config from \"./Config.js\"\nimport type * as ConfigError from \"./ConfigError.js\"\nimport type * as PathPatch from \"./ConfigProviderPathPatch.js\"\nimport type * as Context from \"./Context.js\"\nimport type * as Effect from \"./Effect.js\"\nimport type { LazyArg } from \"./Function.js\"\nimport type * as HashSet from \"./HashSet.js\"\nimport * as internal from \"./internal/configProvider.js\"\nimport type { Pipeable } from \"./Pipeable.js\"\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const ConfigProviderTypeId: unique symbol = internal.ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type ConfigProviderTypeId = typeof ConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const FlatConfigProviderTypeId: unique symbol = internal.FlatConfigProviderTypeId\n\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport type FlatConfigProviderTypeId = typeof FlatConfigProviderTypeId\n\n/**\n * A ConfigProvider is a service that provides configuration given a description\n * of the structure of that configuration.\n *\n * @since 2.0.0\n * @category models\n */\nexport interface ConfigProvider extends ConfigProvider.Proto, Pipeable {\n  /**\n   * Loads the specified configuration, or fails with a config error.\n   */\n  load<A>(config: Config.Config<A>): Effect.Effect<A, ConfigError.ConfigError>\n  /**\n   * Flattens this config provider into a simplified config provider that knows\n   * only how to deal with flat (key/value) properties.\n   */\n  readonly flattened: ConfigProvider.Flat\n}\n\n/**\n * @since 2.0.0\n */\nexport declare namespace ConfigProvider {\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Proto {\n    readonly [ConfigProviderTypeId]: ConfigProviderTypeId\n  }\n\n  /**\n   * A simplified config provider that knows only how to deal with flat\n   * (key/value) properties. Because these providers are common, there is\n   * special support for implementing them.\n   *\n   * @since 2.0.0\n   * @category models\n   */\n  export interface Flat {\n    readonly [FlatConfigProviderTypeId]: FlatConfigProviderTypeId\n    readonly patch: PathPatch.PathPatch\n    load<A>(\n      path: ReadonlyArray<string>,\n      config: Config.Config.Primitive<A>,\n      split?: boolean\n    ): Effect.Effect<Array<A>, ConfigError.ConfigError>\n    enumerateChildren(\n      path: ReadonlyArray<string>\n    ): Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromMapConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 2.0.0\n   * @category models\n   */\n  export interface FromEnvConfig {\n    readonly pathDelim: string\n    readonly seqDelim: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export type KeyComponent = KeyName | KeyIndex\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyName {\n    readonly _tag: \"KeyName\"\n    readonly name: string\n  }\n\n  /**\n   * @since 1.0.0\n   * @category models\n   */\n  export interface KeyIndex {\n    readonly _tag: \"KeyIndex\"\n    readonly index: number\n  }\n}\n\n/**\n * The service tag for `ConfigProvider`.\n *\n * @since 2.0.0\n * @category context\n */\nexport const ConfigProvider: Context.Tag<ConfigProvider, ConfigProvider> = internal.configProviderTag\n\n/**\n * Creates a new config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make: (\n  options: {\n    readonly load: <A>(config: Config.Config<A>) => Effect.Effect<A, ConfigError.ConfigError>\n    readonly flattened: ConfigProvider.Flat\n  }\n) => ConfigProvider = internal.make\n\n/**\n * Creates a new flat config provider.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const makeFlat: (options: {\n  readonly load: <A>(\n    path: ReadonlyArray<string>,\n    config: Config.Config.Primitive<A>,\n    split: boolean\n  ) => Effect.Effect<Array<A>, ConfigError.ConfigError>\n  readonly enumerateChildren: (\n    path: ReadonlyArray<string>\n  ) => Effect.Effect<HashSet.HashSet<string>, ConfigError.ConfigError>\n  readonly patch: PathPatch.PathPatch\n}) => ConfigProvider.Flat = internal.makeFlat\n\n/**\n * A config provider that loads configuration from context variables\n *\n * **Options**:\n *\n * - `pathDelim`: The delimiter for the path segments (default: `\"_\"`).\n * - `seqDelim`: The delimiter for the sequence of values (default: `\",\"`).\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEnv: (options?: Partial<ConfigProvider.FromEnvConfig>) => ConfigProvider = internal.fromEnv\n\n/**\n * Constructs a new `ConfigProvider` from a key/value (flat) provider, where\n * nesting is embedded into the string keys.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromFlat: (flat: ConfigProvider.Flat) => ConfigProvider = internal.fromFlat\n\n/**\n * Constructs a new `ConfigProvider` from a JSON object.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromJson: (json: unknown) => ConfigProvider = internal.fromJson\n\n// TODO(4.0): use `_` for nested configs instead of `.` in next major\n/**\n * Constructs a ConfigProvider using a map and the specified delimiter string,\n * which determines how to split the keys in the map into path segments.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromMap: (map: Map<string, string>, config?: Partial<ConfigProvider.FromMapConfig>) => ConfigProvider =\n  internal.fromMap\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to constant case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const constantCase: (self: ConfigProvider) => ConfigProvider = internal.constantCase\n\n/**\n * Returns a new config provider that will automatically tranform all path\n * configuration names with the specified function. This can be utilized to\n * adapt the names of configuration properties from one naming convention to\n * another.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const mapInputPath: {\n  /**\n   * Returns a new config provider that will automatically tranform all path\n   * configuration names with the specified function. This can be utilized to\n   * adapt the names of configuration properties from one naming convention to\n   * another.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (f: (path: string) => string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically tranform all path\n   * configuration names with the specified function. This can be utilized to\n   * adapt the names of configuration properties from one naming convention to\n   * another.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, f: (path: string) => string): ConfigProvider\n} = internal.mapInputPath\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to kebab case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const kebabCase: (self: ConfigProvider) => ConfigProvider = internal.kebabCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to lower case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const lowerCase: (self: ConfigProvider) => ConfigProvider = internal.lowerCase\n\n/**\n * Returns a new config provider that will automatically nest all\n * configuration under the specified property name. This can be utilized to\n * aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const nested: {\n  /**\n   * Returns a new config provider that will automatically nest all\n   * configuration under the specified property name. This can be utilized to\n   * aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically nest all\n   * configuration under the specified property name. This can be utilized to\n   * aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.nested\n\n/**\n * Returns a new config provider that preferentially loads configuration data\n * from this one, but which will fall back to the specified alternate provider\n * if there are any issues loading the configuration from this provider.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const orElse: {\n  /**\n   * Returns a new config provider that preferentially loads configuration data\n   * from this one, but which will fall back to the specified alternate provider\n   * if there are any issues loading the configuration from this provider.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (that: LazyArg<ConfigProvider>): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that preferentially loads configuration data\n   * from this one, but which will fall back to the specified alternate provider\n   * if there are any issues loading the configuration from this provider.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, that: LazyArg<ConfigProvider>): ConfigProvider\n} = internal.orElse\n\n/**\n * Returns a new config provider that will automatically un-nest all\n * configuration under the specified property name. This can be utilized to\n * de-aggregate separate configuration sources that are all required to load a\n * single configuration value.\n *\n * @since 2.0.0\n * @category utils\n */\nexport const unnested: {\n  /**\n   * Returns a new config provider that will automatically un-nest all\n   * configuration under the specified property name. This can be utilized to\n   * de-aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (name: string): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that will automatically un-nest all\n   * configuration under the specified property name. This can be utilized to\n   * de-aggregate separate configuration sources that are all required to load a\n   * single configuration value.\n   *\n   * @since 2.0.0\n   * @category utils\n   */\n  (self: ConfigProvider, name: string): ConfigProvider\n} = internal.unnested\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const snakeCase: (self: ConfigProvider) => ConfigProvider = internal.snakeCase\n\n/**\n * Returns a new config provider that will automatically convert all property\n * names to upper case. This can be utilized to adapt the names of\n * configuration properties from the default naming convention of camel case\n * to the naming convention of a config provider.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const upperCase: (self: ConfigProvider) => ConfigProvider = internal.upperCase\n\n/**\n * Returns a new config provider that transforms the config provider with the\n * specified function within the specified path.\n *\n * @since 2.0.0\n * @category combinators\n */\nexport const within: {\n  /**\n   * Returns a new config provider that transforms the config provider with the\n   * specified function within the specified path.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (path: ReadonlyArray<string>, f: (self: ConfigProvider) => ConfigProvider): (self: ConfigProvider) => ConfigProvider\n  /**\n   * Returns a new config provider that transforms the config provider with the\n   * specified function within the specified path.\n   *\n   * @since 2.0.0\n   * @category combinators\n   */\n  (\n   self: ConfigProvider,\n   path: ReadonlyArray<string>,\n   f: (self: ConfigProvider) => ConfigProvider\n  ): ConfigProvider\n} = internal.within\n"],"names":["ConfigProviderTypeId","internal","FlatConfigProviderTypeId","ConfigProvider","configProviderTag","make","makeFlat","fromEnv","fromFlat","fromJson","fromMap","constantCase","mapInputPath","kebabCase","lowerCase","nested","orElse","unnested","snakeCase","upperCase","within"],"mappings":"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AAA,AAAgB,EDAzD,ACA0D,CDCnF,+BACA,+BACA,yBACA,4CACA,uCACA,uCACA,iCACA,wCACA,wCACA,sCACA,qCACA,gCACA,mCACA,sCACA,mCACA,kCACA,oCACA,iCACA,gCACA,iCACA,yCACA,iCACA,iCACA,mCACA,kCACA,iCACA,wCACA,sCACA,oCACA,mCACA,sCACA,uCACA,mCACA,qCACA,wCACA,uCACA,wCACA,uCACA,mCACA,qCACA,sCACA,kCACA,qCACA,oCACA,mCACA,mCACA,wCACA,oCACA,qCACA,sCACA,uCACA,mCACA,mCACA,yCACA,uCACA,uCACA,0CACA,oCACA,qCACA,qCACA,wCACA,uCACA,0CACA,oCACA,sCACA,uCACA,uCACA,uCACA,sDACA,6DACA,8DACA,+DACA,2DACA,yDACA,wDACA,oDACA,uDACA,2CACA,2CACA,2CACA,2CACA,yDACA,oDACA,uDACA,kDACA,uDACA,kDACA,qEACA,gEACA,mEACA,8DACA,sDACA,2DACA,wDACA,mDACA,2DACA,sDACA,0DACA,kEACA,6DACA,+DACA,0DACA,kEACA,6DACA,qDACA,+CACA,8CACA,sBACA,sBACA,eACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,yBACA,yBACA,aACA,oBACD,CC3HiG,CAChG,qBAAqB,CACvB,GCHwC,AAEG,EAFH,EAAE,CAAC,gBAAgB,CAAC,QAAS,MAAO,cAER,MAAM,CAAC,WAAW,CAAC,CACrF,SAAU,OAAO,GAAG,CAAC,yCACrB,WAAY,wBACZ,MAAO,0BACP,YAAa,oCACf,kBCNA,IAAA,EAAA,EAAA,CAAA,CAAA,QAUO,IAAM,EAAe,CAC1B,UAAW,EAAA,EAAE,CAAC,+BAA+B,CAAC,CAC5C,YAAa,0CACf,GACA,UAAW,EAAA,EAAE,CAAC,+BAA+B,CAAC,CAC5C,YAAa,+CACf,GACA,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAChC,EAAA,EAAE,CAAC,gBAAgB,CAAC,CAClB,YAAa,uDACf,GAEJ,EA+Ba,EAAgB,CAxB7B,GAJmC,CACjC,UAAW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","ignoreList":[38]}