{"version":3,"sources":["turbopack:///[project]/node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-combine-values.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-motion-value.mjs","turbopack:///[project]/node_modules/motion-dom/dist/es/utils/transform.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-transform.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-computed.mjs","turbopack:///[project]/node_modules/motion-dom/dist/es/animation/GroupAnimation.mjs","turbopack:///[project]/node_modules/motion-dom/dist/es/animation/GroupAnimationWithThen.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/animate/index.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/animate/sequence.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/create.mjs","turbopack:///[project]/node_modules/motion-utils/dist/es/wrap.mjs","turbopack:///[project]/node_modules/motion-utils/dist/es/easing/utils/get-easing-for-segment.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/animate/resolve-subjects.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/utils/calc-repeat-duration.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/utils/normalize-times.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/animate/subject.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/render/object/ObjectVisualElement.mjs","turbopack:///[project]/node_modules/motion-dom/dist/es/value/spring-value.mjs","turbopack:///[project]/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["\"use client\";\nimport { frame, cancelFrame } from 'motion-dom';\nimport { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = useRef(0);\n    const { isStatic } = useContext(MotionConfigContext);\n    useEffect(() => {\n        if (isStatic)\n            return;\n        const provideTimeSinceStart = ({ timestamp, delta }) => {\n            if (!initialTimestamp.current)\n                initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        frame.update(provideTimeSinceStart, true);\n        return () => cancelFrame(provideTimeSinceStart);\n    }, [callback]);\n}\n\nexport { useAnimationFrame };\n","\"use client\";\nimport { cancelFrame, frame } from 'motion-dom';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","\"use client\";\nimport { motionValue } from 'motion-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { interpolate } from './interpolate.mjs';\n\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, options);\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","\"use client\";\nimport { transform } from 'motion-dom';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","\"use client\";\nimport { collectMotionValues } from 'motion-dom';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","class GroupAnimation {\n    constructor(animations) {\n        // Bound to accomadate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    get finished() {\n        return Promise.all(this.animations.map((animation) => animation.finished));\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline) {\n        const subscriptions = this.animations.map((animation) => animation.attachTimeline(timeline));\n        return () => {\n            subscriptions.forEach((cancel, i) => {\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get state() {\n        return this.getAll(\"state\");\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        return getMax(this.animations, \"duration\");\n    }\n    get iterationDuration() {\n        return getMax(this.animations, \"iterationDuration\");\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\nfunction getMax(animations, propName) {\n    let max = 0;\n    for (let i = 0; i < animations.length; i++) {\n        const value = animations[i][propName];\n        if (value !== null && value > max) {\n            max = value;\n        }\n    }\n    return max;\n}\n\nexport { GroupAnimation };\n","import { GroupAnimation } from './GroupAnimation.mjs';\n\nclass GroupAnimationWithThen extends GroupAnimation {\n    then(onResolve, _onReject) {\n        return this.finished.finally(onResolve).then(() => { });\n    }\n}\n\nexport { GroupAnimationWithThen };\n","import { GroupAnimationWithThen } from 'motion-dom';\nimport { removeItem } from 'motion-utils';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction isSequence(value) {\n    return Array.isArray(value) && value.some(Array.isArray);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\nfunction createScopedAnimate(scope) {\n    /**\n     * Implementation\n     */\n    function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n        let animations = [];\n        let animationOnComplete;\n        if (isSequence(subjectOrSequence)) {\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n        }\n        else {\n            // Extract top-level onComplete so it doesn't get applied per-value\n            const { onComplete, ...rest } = options || {};\n            if (typeof onComplete === \"function\") {\n                animationOnComplete = onComplete;\n            }\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, rest, scope);\n        }\n        const animation = new GroupAnimationWithThen(animations);\n        if (animationOnComplete) {\n            animation.finished.then(animationOnComplete);\n        }\n        if (scope) {\n            scope.animations.push(animation);\n            animation.finished.then(() => {\n                removeItem(scope.animations, animation);\n            });\n        }\n        return animation;\n    }\n    return scopedAnimate;\n}\nconst animate = createScopedAnimate();\n\nexport { animate, createScopedAnimate };\n","import { spring } from 'motion-dom';\nimport { createAnimationsFromSequence } from '../sequence/create.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction animateSequence(sequence, options, scope) {\n    const animations = [];\n    const animationDefinitions = createAnimationsFromSequence(sequence, options, scope, { spring });\n    animationDefinitions.forEach(({ keyframes, transition }, subject) => {\n        animations.push(...animateSubject(subject, keyframes, transition));\n    });\n    return animations;\n}\n\nexport { animateSequence };\n","import { isMotionValue, defaultOffset, isGenerator, createGeneratorEasing, fillOffset } from 'motion-dom';\nimport { progress, secondsToMilliseconds, invariant, getEasingForSegment } from 'motion-utils';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { calculateRepeatDuration } from './utils/calc-repeat-duration.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { normalizeTimes } from './utils/normalize-times.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nconst MAX_REPEAT = 20;\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope, generators) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numSubjects = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", repeat, repeatType, repeatDelay = 0, ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numSubjects)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            const createGenerator = isGenerator(type)\n                ? type\n                : generators?.[type || \"keyframes\"];\n            if (numKeyframes <= 2 && createGenerator) {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration ?? (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Handle repeat options\n             */\n            if (repeat) {\n                invariant(repeat < MAX_REPEAT, \"Repeat count too high, must be less than 20\", \"repeat-count-high\");\n                duration = calculateRepeatDuration(duration, repeat);\n                const originalKeyframes = [...valueKeyframesAsList];\n                const originalTimes = [...times];\n                ease = Array.isArray(ease) ? [...ease] : [ease];\n                const originalEase = [...ease];\n                for (let repeatIndex = 0; repeatIndex < repeat; repeatIndex++) {\n                    valueKeyframesAsList.push(...originalKeyframes);\n                    for (let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++) {\n                        times.push(originalTimes[keyframeIndex] + (repeatIndex + 1));\n                        ease.push(keyframeIndex === 0\n                            ? \"linear\"\n                            : getEasingForSegment(originalEase, keyframeIndex - 1));\n                    }\n                }\n                normalizeTimes(times, repeat);\n            }\n            const targetTime = startTime + duration;\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n            const numSubjects = subjects.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const thisSubject = subjects[subjectIndex];\n                const subjectSequence = getSubjectSequence(thisSubject, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition && transition[key]\n        ? {\n            ...transition,\n            ...transition[key],\n        }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n","const wrap = (min, max, v) => {\n    const rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nexport { wrap };\n","import { wrap } from '../../wrap.mjs';\nimport { isEasingArray } from './is-easing-array.mjs';\n\nfunction getEasingForSegment(easing, i) {\n    return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;\n}\n\nexport { getEasingForSegment };\n","import { resolveElements } from 'motion-dom';\nimport { isDOMKeyframes } from '../utils/is-dom-keyframes.mjs';\n\nfunction resolveSubjects(subject, keyframes, scope, selectorCache) {\n    if (typeof subject === \"string\" && isDOMKeyframes(keyframes)) {\n        return resolveElements(subject, scope, selectorCache);\n    }\n    else if (subject instanceof NodeList) {\n        return Array.from(subject);\n    }\n    else if (Array.isArray(subject)) {\n        return subject;\n    }\n    else {\n        return [subject];\n    }\n}\n\nexport { resolveSubjects };\n","function isDOMKeyframes(keyframes) {\n    return typeof keyframes === \"object\" && !Array.isArray(keyframes);\n}\n\nexport { isDOMKeyframes };\n","function calculateRepeatDuration(duration, repeat, _repeatDelay) {\n    return duration * (repeat + 1);\n}\n\nexport { calculateRepeatDuration };\n","/**\n * Given a absolute or relative time definition and current/prev time state of the sequence,\n * calculate an absolute time for the next keyframes.\n */\nfunction calcNextTime(current, next, prev, labels) {\n    if (typeof next === \"number\") {\n        return next;\n    }\n    else if (next.startsWith(\"-\") || next.startsWith(\"+\")) {\n        return Math.max(0, current + parseFloat(next));\n    }\n    else if (next === \"<\") {\n        return prev;\n    }\n    else if (next.startsWith(\"<\")) {\n        return Math.max(0, prev + parseFloat(next.slice(1)));\n    }\n    else {\n        return labels.get(next) ?? current;\n    }\n}\n\nexport { calcNextTime };\n","import { mixNumber } from 'motion-dom';\nimport { getEasingForSegment, removeItem } from 'motion-utils';\n\nfunction eraseKeyframes(sequence, startTime, endTime) {\n    for (let i = 0; i < sequence.length; i++) {\n        const keyframe = sequence[i];\n        if (keyframe.at > startTime && keyframe.at < endTime) {\n            removeItem(sequence, keyframe);\n            // If we remove this item we have to push the pointer back one\n            i--;\n        }\n    }\n}\nfunction addKeyframes(sequence, keyframes, easing, offset, startTime, endTime) {\n    /**\n     * Erase every existing value between currentTime and targetTime,\n     * this will essentially splice this timeline into any currently\n     * defined ones.\n     */\n    eraseKeyframes(sequence, startTime, endTime);\n    for (let i = 0; i < keyframes.length; i++) {\n        sequence.push({\n            value: keyframes[i],\n            at: mixNumber(startTime, endTime, offset[i]),\n            easing: getEasingForSegment(easing, i),\n        });\n    }\n}\n\nexport { addKeyframes, eraseKeyframes };\n","/**\n * Take an array of times that represent repeated keyframes. For instance\n * if we have original times of [0, 0.5, 1] then our repeated times will\n * be [0, 0.5, 1, 1, 1.5, 2]. Loop over the times and scale them back\n * down to a 0-1 scale.\n */\nfunction normalizeTimes(times, repeat) {\n    for (let i = 0; i < times.length; i++) {\n        times[i] = times[i] / (repeat + 1);\n    }\n}\n\nexport { normalizeTimes };\n","function compareByTime(a, b) {\n    if (a.at === b.at) {\n        if (a.value === null)\n            return 1;\n        if (b.value === null)\n            return -1;\n        return 0;\n    }\n    else {\n        return a.at - b.at;\n    }\n}\n\nexport { compareByTime };\n","import { isMotionValue } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { visualElementStore } from '../../render/store.mjs';\nimport { animateTarget } from '../interfaces/visual-element-target.mjs';\nimport { createDOMVisualElement, createObjectVisualElement } from '../utils/create-visual-element.mjs';\nimport { isDOMKeyframes } from '../utils/is-dom-keyframes.mjs';\nimport { resolveSubjects } from './resolve-subjects.mjs';\nimport { animateSingleValue } from './single-value.mjs';\n\nfunction isSingleValue(subject, keyframes) {\n    return (isMotionValue(subject) ||\n        typeof subject === \"number\" ||\n        (typeof subject === \"string\" && !isDOMKeyframes(keyframes)));\n}\n/**\n * Implementation\n */\nfunction animateSubject(subject, keyframes, options, scope) {\n    const animations = [];\n    if (isSingleValue(subject, keyframes)) {\n        animations.push(animateSingleValue(subject, isDOMKeyframes(keyframes)\n            ? keyframes.default || keyframes\n            : keyframes, options ? options.default || options : options));\n    }\n    else {\n        const subjects = resolveSubjects(subject, keyframes, scope);\n        const numSubjects = subjects.length;\n        invariant(Boolean(numSubjects), \"No valid elements provided.\", \"no-valid-elements\");\n        for (let i = 0; i < numSubjects; i++) {\n            const thisSubject = subjects[i];\n            invariant(thisSubject !== null, \"You're trying to perform an animation on null. Ensure that selectors are correctly finding elements and refs are correctly hydrated.\", \"animate-null\");\n            const createVisualElement = thisSubject instanceof Element\n                ? createDOMVisualElement\n                : createObjectVisualElement;\n            if (!visualElementStore.has(thisSubject)) {\n                createVisualElement(thisSubject);\n            }\n            const visualElement = visualElementStore.get(thisSubject);\n            const transition = { ...options };\n            /**\n             * Resolve stagger function if provided.\n             */\n            if (\"delay\" in transition &&\n                typeof transition.delay === \"function\") {\n                transition.delay = transition.delay(i, numSubjects);\n            }\n            animations.push(...animateTarget(visualElement, { ...keyframes, transition }, {}));\n        }\n    }\n    return animations;\n}\n\nexport { animateSubject };\n","import { isSVGElement, isSVGSVGElement } from 'motion-dom';\nimport { HTMLVisualElement } from '../../render/html/HTMLVisualElement.mjs';\nimport { ObjectVisualElement } from '../../render/object/ObjectVisualElement.mjs';\nimport { visualElementStore } from '../../render/store.mjs';\nimport { SVGVisualElement } from '../../render/svg/SVGVisualElement.mjs';\n\nfunction createDOMVisualElement(element) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                transform: {},\n                transformOrigin: {},\n                style: {},\n                vars: {},\n                attrs: {},\n            },\n            latestValues: {},\n        },\n    };\n    const node = isSVGElement(element) && !isSVGSVGElement(element)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options);\n    node.mount(element);\n    visualElementStore.set(element, node);\n}\nfunction createObjectVisualElement(subject) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                output: {},\n            },\n            latestValues: {},\n        },\n    };\n    const node = new ObjectVisualElement(options);\n    node.mount(subject);\n    visualElementStore.set(subject, node);\n}\n\nexport { createDOMVisualElement, createObjectVisualElement };\n","import { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nfunction isObjectKey(key, object) {\n    return key in object;\n}\nclass ObjectVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"object\";\n    }\n    readValueFromInstance(instance, key) {\n        if (isObjectKey(key, instance)) {\n            const value = instance[key];\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                return value;\n            }\n        }\n        return undefined;\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    removeValueFromRenderState(key, renderState) {\n        delete renderState.output[key];\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    build(renderState, latestValues) {\n        Object.assign(renderState.output, latestValues);\n    }\n    renderInstance(instance, { output }) {\n        Object.assign(instance, output);\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n}\n\nexport { ObjectVisualElement };\n","import { motionValue } from './index.mjs';\nimport { JSAnimation } from '../animation/JSAnimation.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Create a `MotionValue` that animates to its latest value using a spring.\n * Can either be a value or track another `MotionValue`.\n *\n * ```jsx\n * const x = motionValue(0)\n * const y = transformValue(() => x.get() * 2) // double x\n * ```\n *\n * @param transformer - A transform function. This function must be pure with no side-effects or conditional statements.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction springValue(source, options) {\n    const initialValue = isMotionValue(source) ? source.get() : source;\n    const value = motionValue(initialValue);\n    attachSpring(value, source, options);\n    return value;\n}\nfunction attachSpring(value, source, options) {\n    const initialValue = value.get();\n    let activeAnimation = null;\n    let latestValue = initialValue;\n    let latestSetter;\n    const unit = typeof initialValue === \"string\"\n        ? initialValue.replace(/[\\d.-]/g, \"\")\n        : undefined;\n    const stopAnimation = () => {\n        if (activeAnimation) {\n            activeAnimation.stop();\n            activeAnimation = null;\n        }\n    };\n    const startAnimation = () => {\n        stopAnimation();\n        activeAnimation = new JSAnimation({\n            keyframes: [asNumber(value.get()), asNumber(latestValue)],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...options,\n            onUpdate: latestSetter,\n        });\n    };\n    value.attach((v, set) => {\n        latestValue = v;\n        latestSetter = (latest) => set(parseValue(latest, unit));\n        frame.postRender(startAnimation);\n    }, stopAnimation);\n    if (isMotionValue(source)) {\n        const removeSourceOnChange = source.on(\"change\", (v) => value.set(parseValue(v, unit)));\n        const removeValueOnDestroy = value.on(\"destroy\", removeSourceOnChange);\n        return () => {\n            removeSourceOnChange();\n            removeValueOnDestroy();\n        };\n    }\n    return stopAnimation;\n}\nfunction parseValue(v, unit) {\n    return unit ? v + unit : v;\n}\nfunction asNumber(v) {\n    return typeof v === \"number\" ? v : parseFloat(v);\n}\n\nexport { attachSpring, springValue };\n","\"use client\";\nimport { attachSpring, isMotionValue } from 'motion-dom';\nimport { useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useTransform } from './use-transform.mjs';\n\nfunction useSpring(source, options = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const getFromSource = () => (isMotionValue(source) ? source.get() : source);\n    // isStatic will never change, allowing early hooks return\n    if (isStatic) {\n        return useTransform(getFromSource);\n    }\n    const value = useMotionValue(getFromSource());\n    useInsertionEffect(() => {\n        return attachSpring(value, source, options);\n    }, [value, JSON.stringify(options)]);\n    return value;\n}\n\nexport { useSpring };\n"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}