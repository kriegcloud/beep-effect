{"version":3,"sources":["turbopack:///[project]/packages/shared/domain/src/common.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/iam.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/shared.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/any-entity-id.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/table-names.ts","turbopack:///[project]/packages/shared/domain/src/entities/AuditLog/AuditLog.model.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/entity-kind.ts","turbopack:///[project]/packages/shared/domain/src/entity-ids/wms.ts","turbopack:///[project]/packages/shared/domain/src/entities/File/File.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/File/schemas/UploadPath.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/Organization.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/OrganizationType.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/SubscriptionStatus.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Organization/schemas/SubscriptionTier.schema.ts","turbopack:///[project]/packages/shared/domain/src/entities/Team/Team.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/schemas/UserGender.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/schemas/UserRole.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/User.model.ts","turbopack:///[project]/packages/shared/domain/src/entities/User/User.plans.ts","turbopack:///[project]/packages/shared/domain/src/value-objects/paths.ts"],"sourcesContent":["import { BS } from \"@beep/schema\";\nimport type { EntityId } from \"@beep/schema/EntityId\";\nimport type { Field } from \"@effect/experimental/VariantSchema\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\n// import {create} from \"mutative\";\n\n/**\n * Audit columns optimized for PostgreSQL timestamp with timezone:\n * - createdAt: Auto-set on insert, omitted from updates\n * - updatedAt: Auto-set on both insert and update operations\n * - deletedAt: Optional field for soft delete functionality defaults to null is Option on select variants\n */\nexport const auditColumns = {\n  createdAt: BS.DateTimeInsertFromDateOmittable({\n    description: \"The date and time the record was created\",\n  }),\n  updatedAt: BS.DateTimeUpdateFromDateOmittable({\n    description: \"The date and time the record was last updated\",\n  }),\n  deletedAt: BS.FieldOptionOmittable(\n    BS.DateTimeFromDate({\n      description: \"If not null, the date and time the record was deleted\",\n    })\n  ),\n} as const;\nexport type AuditColumns = typeof auditColumns;\n\nexport const userTrackingColumns = {\n  createdBy: BS.FieldOptionOmittable(S.String),\n  updatedBy: BS.FieldOptionOmittable(S.String),\n  deletedBy: BS.FieldOptionOmittable(S.String),\n} as const;\nexport type UserTrackingColumns = typeof userTrackingColumns;\n\nexport type Fields = Field.Fields;\n\n// function mergeFields<const A extends Fields, const B extends Fields>(a: A, b: B): A & B;\n//\n// function mergeFields<const A extends Fields>(a: A): <const B extends Fields>(b: B) => A & B;\n//\n// function mergeFields<const A extends Fields, const B extends Fields>(a: A, b?: B) {\n//   if (b === undefined) {\n//     return <const C extends Fields>(bb: C): A & C =>\n//       create<A & C>(a as A & C, (draft) => {\n//         // Right-bias: bb overwrites keys from a on conflicts\n//         Object.assign(draft, bb);\n//       });\n//   }\n//\n//   return create<A & B>(a as A & B, (draft) => {\n//     // Right-bias: b overwrites keys from a on conflicts\n//     Object.assign(draft, b as B);\n//   });\n// }\n\nexport const globalColumns = {\n  ...userTrackingColumns,\n  ...auditColumns,\n  // Optimistic locking\n  version: M.Generated(S.Int.pipe(S.greaterThanOrEqualTo(1))),\n  // Optional: Enhanced traceability\n  source: BS.FieldOptionOmittable(S.String),\n} as const;\nexport type GlobalColumns = typeof globalColumns;\n\nexport const makeFields = <const TableName extends string, const Brand extends string, const A extends Fields>(\n  entityId: EntityId.EntityIdSchemaInstance<TableName, Brand>,\n  a: A\n) => {\n  const idFields = {\n    id: entityId.modelIdSchema,\n    _rowId: entityId.modelRowIdSchema,\n  } as const;\n  const defaultFields = {\n    ...idFields,\n    ...globalColumns,\n  } as const;\n  return {\n    ...defaultFields,\n    ...a,\n  } as const;\n};\n","import { EntityId } from \"@beep/schema/EntityId\";\nimport type * as S from \"effect/Schema\";\n\nexport const AccountId = EntityId.make(\"account\", {\n  brand: \"AccountId\",\n  annotations: {\n    description: \"A unique identifier for an account\",\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/AccountId\"),\n  },\n});\n\nexport declare namespace AccountId {\n  export type Type = S.Schema.Type<typeof AccountId>;\n  export type Encoded = S.Schema.Encoded<typeof AccountId>;\n}\n\nexport const ApiKeyId = EntityId.make(\"apikey\", {\n  brand: \"ApiKeyId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/ApiKey\"),\n    description: \"A unique identifier for an api key\",\n  },\n});\n\nexport declare namespace ApiKeyId {\n  export type Type = S.Schema.Type<typeof ApiKeyId>;\n  export type Encoded = S.Schema.Encoded<typeof ApiKeyId>;\n}\n\nexport const InvitationId = EntityId.make(\"invitation\", {\n  brand: \"InvitationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/InvitationId\"),\n    description: \"A unique identifier for an invitation\",\n  },\n});\n\nexport declare namespace InvitationId {\n  export type Type = S.Schema.Type<typeof InvitationId>;\n  export type Encoded = S.Schema.Encoded<typeof InvitationId>;\n}\n\nexport const JwksId = EntityId.make(\"jwks\", {\n  brand: \"JwksId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/JwksId\"),\n    description: \"A unique identifier for a jwks\",\n  },\n});\n\nexport declare namespace JwksId {\n  export type Type = S.Schema.Type<typeof JwksId>;\n  export type Encoded = S.Schema.Encoded<typeof JwksId>;\n}\n\nexport const MemberId = EntityId.make(\"member\", {\n  brand: \"MemberId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/MemberId\"),\n    description: \"A unique identifier for a member\",\n  },\n});\n\nexport declare namespace MemberId {\n  export type Type = S.Schema.Type<typeof MemberId>;\n  export type Encoded = S.Schema.Encoded<typeof MemberId>;\n}\n\nexport const OAuthAccessTokenId = EntityId.make(\"oauth_access_token\", {\n  brand: \"OAuthAccessTokenId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthAccessTokenId\"),\n    description: \"A unique identifier for an oauth access token\",\n  },\n});\n\nexport declare namespace OAuthAccessTokenId {\n  export type Type = S.Schema.Type<typeof OAuthAccessTokenId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthAccessTokenId>;\n}\n\nexport const OAuthApplicationId = EntityId.make(\"oauth_application\", {\n  brand: \"OAuthApplicationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthApplicationId\"),\n    description: \"A unique identifier for an oauth application\",\n  },\n});\n\nexport declare namespace OAuthApplicationId {\n  export type Type = S.Schema.Type<typeof OAuthApplicationId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthApplicationId>;\n}\n\nexport const OAuthConsentId = EntityId.make(\"oauth_consent\", {\n  brand: \"OAuthConsentId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OAuthConsentId\"),\n    description: \"A unique identifier for an oauth consent\",\n  },\n});\n\nexport declare namespace OAuthConsentId {\n  export type Type = S.Schema.Type<typeof OAuthConsentId>;\n  export type Encoded = S.Schema.Encoded<typeof OAuthConsentId>;\n}\n\nexport const PasskeyId = EntityId.make(\"passkey\", {\n  brand: \"Passkey\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/PasskeyId\"),\n    description: \"A unique identifier for a passkey\",\n  },\n});\n\nexport declare namespace PasskeyId {\n  export type Type = S.Schema.Type<typeof PasskeyId>;\n  export type Encoded = S.Schema.Encoded<typeof PasskeyId>;\n}\n\nexport const RateLimitId = EntityId.make(\"rate_limit\", {\n  brand: \"RateLimitId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/RateLimitId\"),\n    description: \"A unique identifier for a rate limit\",\n  },\n});\n\nexport declare namespace RateLimitId {\n  export type Type = S.Schema.Type<typeof RateLimitId>;\n  export type Encoded = S.Schema.Encoded<typeof RateLimitId>;\n}\n\nexport declare namespace SessionId {\n  export type Type = S.Schema.Type<typeof SessionId>;\n  export type Encoded = S.Schema.Encoded<typeof SessionId>;\n}\n\nexport const SessionId = EntityId.make(\"session\", {\n  brand: \"SessionId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SessionId\"),\n    description: \"A unique identifier for a session\",\n  },\n});\n\nexport declare namespace SsoProviderId {\n  export type Type = S.Schema.Type<typeof SsoProviderId>;\n  export type Encoded = S.Schema.Encoded<typeof SsoProviderId>;\n}\n\nexport const SsoProviderId = EntityId.make(\"sso_provider\", {\n  brand: \"SsoProviderId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SsoProviderId\"),\n    description: \"A unique identifier for an sso provider\",\n  },\n});\n\nexport declare namespace SubscriptionId {\n  export type Type = S.Schema.Type<typeof SubscriptionId>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionId>;\n}\n\nexport const SubscriptionId = EntityId.make(\"subscription\", {\n  brand: \"SubscriptionId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SubscriptionId\"),\n    description: \"A unique identifier for a subscription\",\n  },\n});\n\nexport declare namespace TeamMemberId {\n  export type Type = S.Schema.Type<typeof TeamMemberId>;\n  export type Encoded = S.Schema.Encoded<typeof TeamMemberId>;\n}\n\nexport const TeamMemberId = EntityId.make(\"team_member\", {\n  brand: \"TeamMemberId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/TeamMemberId\"),\n    description: \"A unique identifier for a team member\",\n  },\n});\n\nexport declare namespace TwoFactorId {\n  export type Type = S.Schema.Type<typeof TwoFactorId>;\n  export type Encoded = S.Schema.Encoded<typeof TwoFactorId>;\n}\n\nexport const TwoFactorId = EntityId.make(\"two_factor\", {\n  brand: \"TwoFactorId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/TwoFactorId\"),\n    description: \"A unique identifier for a two factor\",\n  },\n});\n\nexport const VerificationId = EntityId.make(\"verification\", {\n  brand: \"VerificationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/VerificationId\"),\n    description: \"A unique identifier for a verification\",\n  },\n});\n\nexport declare namespace VerificationId {\n  export type Type = S.Schema.Type<typeof VerificationId>;\n  export type Encoded = S.Schema.Encoded<typeof VerificationId>;\n}\n\nexport const WalletAddressId = EntityId.make(\"wallet_address\", {\n  brand: \"WalletAddressId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/WalletAddressId\"),\n    description: \"A unique identifier for a wallet address\",\n  },\n});\n\nexport declare namespace WalletAddressId {\n  export type Type = S.Schema.Type<typeof WalletAddressId>;\n  export type Encoded = S.Schema.Encoded<typeof WalletAddressId>;\n}\n\nexport const OrganizationRoleId = EntityId.make(\"organization_role\", {\n  brand: \"OrganizationRoleId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/OrganizationRoleId\"),\n    description: \"A unique identifier for an organization role\",\n  },\n});\n\nexport declare namespace OrganizationRoleId {\n  export type Type = S.Schema.Type<typeof OrganizationRoleId>;\n  export type Encoded = S.Schema.Encoded<typeof OrganizationRoleId>;\n}\n\nexport const DeviceCodeId = EntityId.make(\"device_code\", {\n  brand: \"OrganizationRoleId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/DeviceCodeId\"),\n    description: \"A unique identifier for a device code\",\n  },\n});\n\nexport declare namespace DeviceCodeId {\n  export type Type = S.Schema.Type<typeof DeviceCodeId>;\n  export type Encoded = S.Schema.Encoded<typeof DeviceCodeId>;\n}\n","import { EntityId } from \"@beep/schema/EntityId\";\n//----------------------------------------------------------------------------------------------------------------------\n// Shared ENTITY IDS\n//----------------------------------------------------------------------------------------------------------------------\nexport const OrganizationId = EntityId.make(\"organization\", {\n  brand: \"OrganizationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/OrganizationId\"),\n    description: \"A unique identifier for an organization\",\n  },\n});\n\nexport declare namespace OrganizationId {\n  export type Type = typeof OrganizationId.Type;\n  export type Encoded = typeof OrganizationId.Encoded;\n}\nexport const TeamId = EntityId.make(\"team\", {\n  brand: \"TeamId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/TeamId\"),\n    description: \"A unique identifier for a team\",\n  },\n});\n\nexport declare namespace TeamId {\n  export type Type = typeof TeamId.Type;\n  export type Encoded = typeof TeamId.Encoded;\n}\n\nexport const FileId = EntityId.make(\"file\", {\n  brand: \"FileId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/FileId\"),\n    description: \"A unique identifier for a file\",\n  },\n});\n\nexport declare namespace FileId {\n  export type Type = typeof FileId.Type;\n  export type Encoded = typeof FileId.Encoded;\n}\n\nexport const AuditLogId = EntityId.make(\"audit_log\", {\n  brand: \"AuditLogId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/shared/AuditLogId\"),\n    description: \"A unique identifier for an audit log\",\n  },\n});\n\nexport declare namespace AuditLogId {\n  export type Type = typeof AuditLogId.Type;\n  export type Encoded = typeof AuditLogId.Encoded;\n}\n\nexport const UserId = EntityId.make(\"user\", {\n  brand: \"UserId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/UserId\"),\n    description: \"A unique identifier for a user\",\n  },\n});\n\nexport declare namespace UserId {\n  export type Type = typeof UserId.Type;\n  export type Encoded = typeof UserId.Encoded;\n}\n","import * as S from \"effect/Schema\";\nimport * as IamEntityIds from \"./iam\";\nimport { OrganizationId, TeamId, UserId } from \"./shared\";\n\nexport class AnyEntityId extends S.Union(\n  IamEntityIds.AccountId,\n  IamEntityIds.ApiKeyId,\n  IamEntityIds.InvitationId,\n  IamEntityIds.MemberId,\n  IamEntityIds.OAuthApplicationId,\n  IamEntityIds.OAuthAccessTokenId,\n  IamEntityIds.OAuthConsentId,\n  IamEntityIds.PasskeyId,\n  IamEntityIds.SessionId,\n  IamEntityIds.SsoProviderId,\n  IamEntityIds.SubscriptionId,\n  IamEntityIds.SubscriptionId,\n  IamEntityIds.TeamMemberId,\n  IamEntityIds.TwoFactorId,\n  IamEntityIds.VerificationId,\n  IamEntityIds.WalletAddressId,\n  IamEntityIds.OrganizationRoleId,\n  IamEntityIds.DeviceCodeId,\n  OrganizationId,\n  TeamId,\n  UserId\n).annotations({\n  schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/AnyEntityId\"),\n  description: \"Any entity id\",\n  title: \"Any Entity Id\",\n  identifier: \"AnyEntityId\",\n}) {}\n\nexport declare namespace AnyEntityId {\n  export type Type = S.Schema.Type<typeof AnyEntityId>;\n  export type Encoded = S.Schema.Encoded<typeof AnyEntityId>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nimport {\n  AccountId,\n  ApiKeyId,\n  DeviceCodeId,\n  InvitationId,\n  JwksId,\n  MemberId,\n  OAuthAccessTokenId,\n  OAuthApplicationId,\n  OAuthConsentId,\n  OrganizationRoleId,\n  PasskeyId,\n  RateLimitId,\n  SessionId,\n  SsoProviderId,\n  SubscriptionId,\n  TeamMemberId,\n  TwoFactorId,\n  VerificationId,\n  WalletAddressId,\n} from \"./iam\";\nimport { AuditLogId, FileId, OrganizationId, TeamId, UserId } from \"./shared\";\n\nexport namespace SharedTableNames {\n  export const SharedTableNameKit = BS.stringLiteralKit(\n    FileId.tableName,\n    TeamId.tableName,\n    OrganizationId.tableName,\n    UserId.tableName,\n    AuditLogId.tableName\n  );\n\n  export class SharedTableName extends SharedTableNameKit.Schema.annotations({\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/SharedTableName\"),\n    description: \"The set of table_names for entityIds within the shared-kernel\",\n    identifier: \"SharedTableName\",\n    title: \"Shared Table Name\",\n  }) {\n    static readonly Tagged = SharedTableNameKit.toTagged(\"tableName\");\n    static readonly Enum = SharedTableNameKit.Enum;\n    static readonly Options = SharedTableNameKit.Options;\n    static readonly is = SharedTableNameKit.is;\n  }\n\n  export namespace SharedTableName {\n    export type Type = S.Schema.Type<typeof SharedTableName>;\n    export type Encoded = S.Schema.Encoded<typeof SharedTableName>;\n  }\n}\n\nexport namespace IamTableNames {\n  export const IamTableNameKit = BS.stringLiteralKit(\n    AccountId.tableName,\n    ApiKeyId.tableName,\n    InvitationId.tableName,\n    JwksId.tableName,\n    MemberId.tableName,\n    OAuthAccessTokenId.tableName,\n    OAuthApplicationId.tableName,\n    OAuthConsentId.tableName,\n    PasskeyId.tableName,\n    RateLimitId.tableName,\n    SessionId.tableName,\n    SsoProviderId.tableName,\n    SubscriptionId.tableName,\n    TeamMemberId.tableName,\n    TwoFactorId.tableName,\n    VerificationId.tableName,\n    WalletAddressId.tableName,\n    OrganizationRoleId.tableName,\n    DeviceCodeId.tableName\n  );\n\n  export class IamTableName extends IamTableNameKit.Schema.annotations({\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/iam/IamTableName\"),\n    description: \"The set of table_names for entityIds within the iam domain slice\",\n    identifier: \"IamTableName\",\n    title: \"Iam Table Name\",\n  }) {\n    static readonly Tagged = IamTableNameKit.toTagged(\"tableName\");\n    static readonly Enum = IamTableNameKit.Enum;\n    static readonly Options = IamTableNameKit.Options;\n    static readonly is = IamTableNameKit.is;\n  }\n\n  export namespace IamTableName {\n    export type Type = S.Schema.Type<typeof IamTableName>;\n    export type Encoded = S.Schema.Encoded<typeof IamTableName>;\n  }\n}\n\nexport const AnyTableNameKit = BS.stringLiteralKit(\n  ...IamTableNames.IamTableNameKit.Options,\n  ...SharedTableNames.SharedTableNameKit.Options\n);\n\nexport class AnyTableName extends AnyTableNameKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/AnyTableName\"),\n  description: \"The set of table_names for entityIds within the shared-kernel and iam domain slices\",\n  identifier: \"AnyTableName\",\n  title: \"Any Table Name\",\n}) {\n  static readonly Tagged = AnyTableNameKit.toTagged(\"tableName\");\n  static readonly Enum = AnyTableNameKit.Enum;\n  static readonly Options = AnyTableNameKit.Options;\n}\n\nexport namespace AnyTableName {\n  export type Type = S.Schema.Type<typeof AnyTableName>;\n  export type Encoded = S.Schema.Encoded<typeof AnyTableName>;\n}\n","import { BS } from \"@beep/schema\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { makeFields } from \"../../common\";\nimport { AnyEntityId } from \"../../entity-ids/any-entity-id\";\nimport * as IamEntityIds from \"../../entity-ids/iam\";\nimport * as SharedEntityIds from \"../../entity-ids/shared\";\nimport { AnyTableName } from \"../../entity-ids/table-names\";\n\nexport class Model extends M.Class<Model>(`AuditLogModel`)(\n  makeFields(SharedEntityIds.AuditLogId, {\n    /** Surrogate 32 bit integer Primary key identifier for the file */\n    entityKind: AnyTableName,\n    entityId: AnyEntityId,\n    action: S.String,\n    userSessionId: BS.FieldOptionOmittable(IamEntityIds.SessionId),\n    userId: SharedEntityIds.UserId,\n    userEmail: M.Sensitive(\n      BS.Email.annotations({\n        description: \"The user's email address\",\n      })\n    ),\n    userIp: BS.FieldOptionOmittable(BS.IP),\n    oldValues: BS.FieldOptionOmittable(BS.Json),\n    oldValuesJson: BS.FieldOptionOmittable(BS.Json),\n    newValues: BS.FieldOptionOmittable(BS.Json),\n    newValuesJson: BS.FieldOptionOmittable(BS.Json),\n    metadataJson: BS.FieldOptionOmittable(BS.Json),\n    metadata: BS.FieldOptionOmittable(BS.Json),\n  })\n) {}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nimport { IamTableNames, SharedTableNames } from \"./table-names\";\n\nexport const EntityKindKit = BS.stringLiteralKit(\n  ...IamTableNames.IamTableNameKit.Options,\n  ...SharedTableNames.SharedTableNameKit.Options\n);\n\nexport class EntityKind extends EntityKindKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/EntityKind\"),\n  description: \"The set of entity_kinds for entityIds within the shared-kernel\",\n  title: \"Entity Kind\",\n  identifier: \"EntityKind\",\n}) {\n  static readonly Tagged = EntityKindKit.toTagged(\"__entityKind\");\n  static readonly Options = EntityKindKit.Options;\n  static readonly Enum = EntityKindKit.Enum;\n  static readonly is = EntityKindKit.is;\n}\n\nexport declare namespace EntityKind {\n  export type Type = S.Schema.Type<typeof EntityKindKit>;\n  export type Encoded = S.Schema.Encoded<typeof EntityKindKit>;\n}\n","import { EntityId } from \"@beep/schema/EntityId\";\nimport type * as S from \"effect/Schema\";\n//----------------------------------------------------------------------------------------------------------------------\n// WMS ENTITY IDS\n//----------------------------------------------------------------------------------------------------------------------\nexport const InventoryId = EntityId.make(\"inventory\", {\n  brand: \"InventoryId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/InventoryId\"),\n    description: \"A unique identifier for an inventory\",\n  },\n});\n\nexport declare namespace InventoryId {\n  export type Type = S.Schema.Type<typeof InventoryId>;\n  export type Encoded = S.Schema.Encoded<typeof InventoryId>;\n}\n\nexport const ItemId = EntityId.make(\"item\", {\n  brand: \"ItemId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/ItemId\"),\n    description: \"A unique identifier for an item\",\n  },\n});\n\nexport declare namespace ItemId {\n  export type Type = S.Schema.Type<typeof ItemId>;\n  export type Encoded = S.Schema.Encoded<typeof ItemId>;\n}\n\nexport const LocationId = EntityId.make(\"location\", {\n  brand: \"LocationId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/LocationId\"),\n    description: \"A unique identifier for a location\",\n  },\n});\n\nexport declare namespace LocationId {\n  export type Type = S.Schema.Type<typeof LocationId>;\n  export type Encoded = S.Schema.Encoded<typeof LocationId>;\n}\n\nexport const OrderId = EntityId.make(\"order\", {\n  brand: \"OrderId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/OrderId\"),\n    description: \"A unique identifier for an order\",\n  },\n});\nexport declare namespace OrderId {\n  export type Type = S.Schema.Type<typeof OrderId>;\n  export type Encoded = S.Schema.Encoded<typeof OrderId>;\n}\n\nexport const UomId = EntityId.make(\"uom\", {\n  brand: \"UomId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/UomId\"),\n    description: \"A unique identifier for a uom\",\n  },\n});\nexport declare namespace UomId {\n  export type Type = S.Schema.Type<typeof UomId>;\n  export type Encoded = S.Schema.Encoded<typeof UomId>;\n}\n\nexport const WarehouseId = EntityId.make(\"warehouse\", {\n  brand: \"WarehouseId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/WarehouseId\"),\n    description: \"A unique identifier for a warehouse\",\n  },\n});\n\nexport declare namespace WarehouseId {\n  export type Type = S.Schema.Type<typeof WarehouseId>;\n  export type Encoded = S.Schema.Encoded<typeof WarehouseId>;\n}\n\nexport const WorkId = EntityId.make(\"work\", {\n  brand: \"WorkId\",\n  annotations: {\n    schemaId: Symbol.for(\"@beep/shared/domain/EntityIds/wms/WorkId\"),\n    description: \"A unique identifier for a work\",\n  },\n});\nexport declare namespace WorkId {\n  export type Type = S.Schema.Type<typeof WorkId>;\n  export type Encoded = S.Schema.Encoded<typeof WorkId>;\n}\n","import { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport { SharedEntityIds } from \"../../entity-ids\";\n\nexport class Model extends M.Class<Model>(`FileModel`)(\n  makeFields(SharedEntityIds.FileId, {\n    /** Organization ID Reference */\n    organizationId: SharedEntityIds.OrganizationId,\n  })\n) {}\n","/**\n * @fileoverview Upload Path Schema and Transformations\n *\n * This module provides a comprehensive solution for handling file upload paths in S3.\n * It implements bidirectional transformations between structured data and S3 path strings,\n * with automatic sharding, timestamp generation, and validation.\n *\n * Path Structure:\n * /{env}/tenants/{shard}/{orgType}/{orgId}/{entityKind}/{entityId}/{attribute}/{year}/{month}/{fileId}.{ext}\n *\n * Example:\n * /dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\n *\n * Features:\n * - Automatic shard prefix generation from FileId for load distribution\n * - Current timestamp injection (year/month) during encoding\n * - Bidirectional parsing and validation\n * - Type-safe transformations using Effect Schema\n */\n\nimport { EnvValue } from \"@beep/constants\";\nimport { BS } from \"@beep/schema\";\nimport * as DateTime from \"effect/DateTime\";\nimport * as Effect from \"effect/Effect\";\nimport * as Hash from \"effect/Hash\";\nimport * as ParseResult from \"effect/ParseResult\";\nimport * as S from \"effect/Schema\";\nimport { AnyEntityId, EntityKind, SharedEntityIds } from \"../../../entity-ids\";\nimport * as Organization from \"../../Organization\";\n\n/**\n * Encoded shard prefix as a plain string.\n *\n * This represents the shard prefix in its raw string form as it appears in S3 paths.\n * The prefix is a 2-character hexadecimal string used for distributing files across\n * S3 prefixes to avoid hotspotting and improve performance.\n *\n * @example \"a1\", \"f3\", \"00\", \"ff\"\n */\nexport class ShardPrefixEncoded extends S.String.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefixEncoded\"),\n  identifier: \"ShardPrefixEncoded\",\n  title: \"Shard Prefix Encoded\",\n  description:\n    \"Raw string representation of a two-character hexadecimal shard prefix for S3 load distribution. Used to distribute files across S3 prefixes to prevent hotspotting.\",\n  examples: [\"a1\", \"f3\", \"00\", \"ff\", \"2b\"],\n}) {}\n\nexport namespace ShardPrefixEncoded {\n  export type Type = S.Schema.Type<typeof ShardPrefixEncoded>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefixEncoded>;\n}\n\n/**\n * Validated and branded shard prefix.\n *\n * This is the decoded/validated form of a shard prefix that ensures:\n * - Exactly 2 characters in length\n * - Only contains hexadecimal characters (0-9, a-f, case insensitive)\n * - Is properly trimmed and non-empty\n *\n * The branded type prevents accidental mixing with regular strings\n * and provides compile-time safety.\n *\n * @example ShardPrefixDecoded branded strings: \"a1\", \"F3\", \"00\", \"ff\"\n */\nexport class ShardPrefixDecoded extends S.NonEmptyTrimmedString.pipe(\n  S.pattern(BS.Regex.make(/^[0-9a-f]{2}$/i)),\n  S.brand(\"ShardPrefixDecoded\")\n).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefixDecoded\"),\n  identifier: \"ShardPrefixDecoded\",\n  title: \"Shard Prefix Decoded\",\n  description:\n    \"Validated two-character hexadecimal shard prefix with branded type safety. Ensures proper format (exactly 2 hex characters) for consistent S3 load distribution.\",\n  examples: [\n    BS.makeBranded(\"a1\"),\n    BS.makeBranded(\"F3\"),\n    BS.makeBranded(\"00\"),\n    BS.makeBranded(\"ff\"),\n    BS.makeBranded(\"2B\"),\n  ],\n}) {}\n\nexport namespace ShardPrefixDecoded {\n  export type Type = S.Schema.Type<typeof ShardPrefixDecoded>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefixDecoded>;\n}\n\n/**\n * Bidirectional transformation between encoded and decoded shard prefixes.\n *\n * This schema provides:\n * - Validation of shard prefix format during decoding\n * - Type-safe conversion between string and branded types\n * - Deterministic shard generation from FileId for consistent routing\n *\n * The shard prefix is used to distribute files across S3 prefixes, preventing\n * hotspotting by ensuring files are evenly distributed across the storage system.\n *\n * @example\n * ```typescript\n * // Generate shard from FileId\n * const shard = ShardPrefix.fromFileId(\"file__123-456-789\");\n *\n * // Decode string to validated shard\n * const decoded = S.decode(ShardPrefix)(\"a1\");\n *\n * // Encode back to string\n * const encoded = S.encode(ShardPrefix)(decoded);\n * ```\n */\nexport class ShardPrefix extends S.transformOrFail(ShardPrefixEncoded, ShardPrefixDecoded, {\n  strict: true,\n  decode: (encoded, _, ast) =>\n    ParseResult.try({\n      try: () => S.decodeUnknownSync(ShardPrefixDecoded)(encoded),\n      catch: () =>\n        new ParseResult.Type(ast, encoded, \"Invalid shard prefix format: must be exactly 2 hexadecimal characters\"),\n    }),\n  encode: (decoded, _, ast) =>\n    ParseResult.try({\n      try: () => S.decodeUnknownSync(ShardPrefixEncoded)(decoded),\n      catch: () => new ParseResult.Type(ast, decoded, \"Failed to encode shard prefix to string representation\"),\n    }),\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/ShardPrefix\"),\n  identifier: \"ShardPrefix\",\n  title: \"Shard Prefix Transformation\",\n  description:\n    \"Bidirectional transformation for shard prefixes with validation. Converts between raw strings and validated branded types while ensuring proper hexadecimal format for S3 load distribution.\",\n}) {\n  /**\n   * Generate a deterministic shard prefix from a FileId.\n   *\n   * Uses Effect's Hash function to create a consistent 2-character hex prefix\n   * from the FileId. The same FileId will always produce the same shard prefix,\n   * ensuring files are consistently routed to the same S3 prefix.\n   *\n   * @param fileId - The FileId to generate a shard prefix from\n   * @returns A validated ShardPrefix that can be used in S3 paths\n   *\n   * @example\n   * ```typescript\n   * const fileId = \"file__12345678-1234-1234-1234-123456789012\" as FileId.Type;\n   * const shard = ShardPrefix.fromFileId(fileId); // Returns something like \"a1\"\n   * ```\n   */\n  static readonly fromFileId = (fileId: SharedEntityIds.FileId.Type) => {\n    const hashValue = Hash.string(fileId);\n    const hexString = Math.abs(hashValue).toString(16).slice(0, 2).padStart(2, \"0\");\n    return S.decodeSync(ShardPrefix)(hexString);\n  };\n}\n\nexport namespace ShardPrefix {\n  export type Type = S.Schema.Type<typeof ShardPrefix>;\n  export type Encoded = S.Schema.Encoded<typeof ShardPrefix>;\n}\n\n/**\n * Template literal parts defining the structure of an upload path.\n *\n * This array defines the exact structure of S3 upload paths used throughout the system.\n * Each element represents either a literal string (like \"/\" or \"tenants\") or a schema\n * that validates and parses dynamic parts of the path.\n *\n * Path Structure Breakdown:\n * - /{env} - Environment (dev, staging, prod)\n * - /tenants - Literal \"tenants\" segment\n * - /{shard} - 2-char hex shard prefix for load distribution\n * - /{orgType} - Organization type (individual, team, enterprise)\n * - /{orgId} - Organization ID (UUID format)\n * - /{entityKind} - Entity type (organization, user, team)\n * - /{entityId} - Entity identifier (string)\n * - /{attribute} - File attribute name (avatar, logo, document, etc.)\n * - /{year} - 4-digit year (auto-generated)\n * - /{month} - 2-digit zero-padded month (auto-generated)\n * - /{fileId} - File ID (UUID format)\n * - .{ext} - File extension (jpg, png, pdf, etc.)\n *\n * @example\n * \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n */\nconst UploadPathParts = [\n  \"/\",\n  EnvValue, // Environment: dev, staging, prod\n  \"/\",\n  \"tenants\", // Literal segment for all file paths\n  \"/\",\n  ShardPrefixEncoded, // 2-character hex shard for load distribution\n  \"/\",\n  Organization.OrganizationType, // individual, team, enterprise\n  \"/\",\n  S.encodedSchema(SharedEntityIds.OrganizationId), // Organization UUID\n  \"/\",\n  S.String, // Entity kind\n  \"/\",\n  S.String, // Entity identifier (user ID, team slug, etc.)\n  \"/\",\n  S.String, // Entity attribute (avatar, logo, document, etc.)\n  \"/\",\n  BS.YearEncoded, // 4-digit year (auto-generated from current time)\n  \"/\",\n  BS.MonthNumber, // 2-digit zero-padded month (auto-generated)\n  \"/\",\n  S.encodedSchema(SharedEntityIds.FileId), // File UUID\n  \".\",\n  S.String, // File extension\n] as const;\n\n/**\n * Encoded upload path as a template literal string.\n *\n * This represents the final S3 path as a string that matches the exact\n * pattern defined by UploadPathParts. It's the format that would be used\n * as an actual S3 object key.\n *\n * The path includes all necessary components for:\n * - Environment isolation (dev/staging/prod)\n * - Load distribution (shard prefix)\n * - Organizational hierarchy\n * - Temporal organization (year/month)\n * - Unique file identification\n *\n * @example\n * \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n */\nexport class UploadPathEncoded extends S.TemplateLiteral(...UploadPathParts).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathEncoded\"),\n  identifier: \"UploadPathEncoded\",\n  title: \"Upload Path Encoded\",\n  description:\n    \"Complete S3 object key as a string following the standardized upload path format: /{env}/tenants/{shard}/{orgType}/{orgId}/{entityKind}/{entityId}/{attribute}/{year}/{month}/{fileId}.{ext}\",\n}) {}\n\nexport namespace UploadPathEncoded {\n  export type Type = S.Schema.Type<typeof UploadPathEncoded>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathEncoded>;\n}\n\n/**\n * Template literal parser for upload paths.\n *\n * This parser can both construct and deconstruct upload path strings,\n * converting between the string representation and an array of typed components.\n * It's used internally by the UploadPath transformation to handle the\n * bidirectional conversion between structured data and path strings.\n *\n * The parser validates each component according to its schema and provides\n * type-safe access to individual path segments.\n *\n * @example\n * ```typescript\n * // Parse a path string into components\n * const components = S.decode(UploadPathParser)(\n *   \"/dev/tenants/a1/individual/org_123/user/user_456/avatar/2024/03/file_789.jpg\"\n * );\n *\n * // Construct a path from components\n * const pathString = S.encode(UploadPathParser)([\n *   \"/\", \"dev\", \"/\", \"tenants\", \"/\", \"a1\", \"/\", \"individual\",\n *   \"/\", \"org_123\", \"/\", \"user\", \"/\", \"user_456\", \"/\", \"avatar\",\n *   \"/\", \"2024\", \"/\", \"03\", \"/\", \"file_789\", \".\", \"jpg\"\n * ]);\n * ```\n */\nexport const UploadPathParser = S.TemplateLiteralParser(...UploadPathParts).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathParser\"),\n  identifier: \"UploadPathParser\",\n  title: \"Upload Path Parser\",\n  description:\n    \"Bidirectional parser for upload path strings. Converts between string paths and typed component arrays, validating each segment according to its schema definition.\",\n});\n\nexport namespace UploadPathParser {\n  export type Type = S.Schema.Type<typeof UploadPathParser>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathParser>;\n}\n\n/**\n * Structured representation of upload path data.\n *\n * This is the decoded form containing all the components needed to generate\n * an upload path. When decoded, the system automatically injects:\n * - Current timestamp (year/month)\n * - Shard prefix (derived from fileId)\n *\n * This structure contains only the essential data that the caller provides,\n * while the system generates the derived values during encoding.\n *\n * @example\n * ```typescript\n * const uploadData: UploadPathDecoded.Type = {\n *   env: \"dev\",\n *   fileId: SharedEntityIds.FileId.make(\"file__12345678-1234-1234-1234-123456789012\"),\n *   organizationType: \"individual\",\n *   organizationId: SharedEntityIds.OrganizationId.make(\"organization__87654321-4321-4321-4321-210987654321\"),\n *   entityKind: \"user\",\n *   entityIdentifier: SharedEntityIds.UserId.make(\"user__87654321-4321-4321-4321-210987654321\"),\n *   entityAttribute: \"avatar\",\n *   fileItemExtension: \"jpg\"\n * };\n * ```\n */\nexport const UploadPathDecoded = BS.Struct({\n  env: EnvValue, // Environment: dev, staging, prod\n  fileId: SharedEntityIds.FileId, // Unique file identifier\n  organizationType: Organization.OrganizationType, // Organization classification\n  organizationId: SharedEntityIds.OrganizationId, // Organization UUID\n  entityKind: EntityKind, // Type of entity owning the file\n  entityIdentifier: AnyEntityId, // Identifier for the specific entity instance\n  entityAttribute: S.String, // File attribute/purpose (avatar, logo, document, etc.)\n  fileItemExtension: BS.FileExtension, // File extension (validated against allowed types)\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPathDecoded\"),\n  identifier: \"UploadPathDecoded\",\n  title: \"Upload Path Decoded Structure\",\n  description:\n    \"Structured data representation for upload paths. Contains all user-provided components needed to generate S3 paths. System automatically injects timestamp and shard prefix during encoding.\",\n  examples: [\n    {\n      env: \"dev\",\n      fileId: SharedEntityIds.FileId.make(\"file__12345678-1234-1234-1234-123456789012\"),\n      organizationType: \"individual\",\n      organizationId: SharedEntityIds.OrganizationId.make(\"organization__87654321-4321-4321-4321-210987654321\"),\n      entityKind: \"user\",\n      entityIdentifier: SharedEntityIds.UserId.make(\"user__12345678-1234-1234-1234-123456789012\"),\n      entityAttribute: \"avatar\",\n      fileItemExtension: \"jpg\",\n    },\n  ],\n});\n\nexport namespace UploadPathDecoded {\n  export type Type = S.Schema.Type<typeof UploadPathDecoded>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPathDecoded>;\n}\n\n/**\n * Bidirectional transformation between structured upload data and S3 path strings.\n *\n * This is the main schema for handling file upload paths. It provides:\n *\n * **Encoding (Decode operation)**: UploadPathDecoded -> UploadPathEncoded\n * - Takes structured upload data\n * - Automatically injects current timestamp (year/month)\n * - Generates shard prefix from fileId\n * - Validates all components\n * - Produces complete S3 path string\n *\n * **Decoding (Encode operation)**: UploadPathEncoded -> UploadPathDecoded\n * - Parses S3 path string into components\n * - Validates path structure and format\n * - Extracts all user-provided data\n * - Returns structured representation\n *\n * **Key Features**:\n * - Automatic timestamp injection for time-based organization\n * - Deterministic shard generation for load distribution\n * - Comprehensive validation of all path components\n * - Type-safe bidirectional transformations\n * - Effect-based error handling\n *\n * @example\n * ```typescript\n * // Encode: structured data -> S3 path\n * const uploadData = {\n *   env: \"dev\",\n *   fileId: \"file__123...\",\n *   organizationType: \"individual\",\n *   organizationId: \"org__456...\",\n *   entityKind: \"user\",\n *   entityIdentifier: \"user_789\",\n *   entityAttribute: \"avatar\",\n *   fileItemExtension: \"jpg\"\n * };\n *\n * const s3Path = yield* S.decode(UploadPath)(uploadData);\n * // Result: \"/dev/tenants/a1/individual/org__456.../user/user_789/avatar/2024/03/file__123....jpg\"\n *\n * // Decode: S3 path -> structured data\n * const parsedData = yield* S.encode(UploadPath)(s3Path);\n * // Result: Original uploadData structure\n * ```\n */\nexport class UploadPath extends S.transformOrFail(UploadPathDecoded, UploadPathEncoded, {\n  strict: true,\n  decode: (i, _, ast) => {\n    const program = DateTime.now.pipe(\n      Effect.flatMap((now) =>\n        Effect.flatMap(\n          Effect.all([\n            Effect.succeed(now),\n            Effect.succeed(ShardPrefix.fromFileId(i.fileId)),\n            S.encode(BS.FileExtension)(i.fileItemExtension),\n            S.decode(BS.MonthNumberFromMonthInt)(DateTime.getPartUtc(now, \"month\")),\n          ]),\n          ([now, shardPrefix, fileItemExtension, month]) =>\n            Effect.flatMap(\n              S.encode(UploadPathParser)([\n                \"/\",\n                i.env,\n                \"/\",\n                \"tenants\",\n                \"/\",\n                shardPrefix,\n                \"/\",\n                i.organizationType,\n                \"/\",\n                i.organizationId,\n                \"/\",\n                i.entityKind,\n                \"/\",\n                i.entityIdentifier,\n                \"/\",\n                i.entityAttribute,\n                \"/\",\n                DateTime.getPartUtc(now, \"year\"),\n                \"/\",\n                month,\n                \"/\",\n                i.fileId,\n                \".\",\n                fileItemExtension,\n              ]),\n              (path) => S.decode(UploadPathEncoded)(path)\n            )\n        )\n      )\n    );\n\n    return Effect.try({\n      try: () => Effect.runSync(program),\n      catch: (e) => new ParseResult.Type(ast, i, `Invalid upload path: ${e}`),\n    });\n  },\n  encode: (i, _, ast) => {\n    const program = Effect.flatMap(S.decode(UploadPathParser)(i), (pathParts) =>\n      Effect.flatMap(\n        Effect.all([\n          Effect.succeed(pathParts[1]), // env\n          Effect.succeed(pathParts[7]), // organizationType\n          S.decodeUnknown(SharedEntityIds.OrganizationId)(pathParts[9]), // organizationId\n          S.decodeUnknown(EntityKind)(pathParts[11]), // entityKind\n          S.decodeUnknown(AnyEntityId)(pathParts[13]), //entityIdentifier\n          Effect.succeed(pathParts[15]), // entityAttribute\n          S.decodeUnknown(SharedEntityIds.FileId)(pathParts[21]), //fileId\n          S.decodeUnknown(BS.FileExtension)(pathParts[23]), // FileItemExtension\n        ]),\n        ([\n          env,\n          organizationType,\n          organizationId,\n          entityKind,\n          entityIdentifier,\n          entityAttribute,\n          fileId,\n          fileItemExtension,\n        ]) =>\n          S.decode(UploadPathDecoded)({\n            env,\n            fileId,\n            organizationType,\n            organizationId,\n            entityKind,\n            entityIdentifier,\n            entityAttribute,\n            fileItemExtension,\n          })\n      )\n    );\n\n    return Effect.try({\n      try: () => Effect.runSync(program),\n      catch: (e) => new ParseResult.Type(ast, i, `Failed to parse upload path: ${e}`),\n    });\n  },\n}).annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/File/schemas/FilePath/UploadPath\"),\n  identifier: \"UploadPath\",\n  title: \"Upload Path Transformation\",\n  description:\n    \"Complete bidirectional transformation system for S3 upload paths. Handles conversion between structured upload data and S3 object keys with automatic timestamp injection, shard generation, and comprehensive validation. Ensures consistent path format across all file operations.\",\n  documentation: [\n    \"Automatic shard prefix generation using fileId hash for load distribution\",\n    \"Current timestamp injection (year/month) for temporal organization\",\n    \"Comprehensive validation of all path components and format\",\n    \"Type-safe transformations with Effect-based error handling\",\n    `Supports all entity types: organization, user, team`,\n    \"Compatible with all environments: dev, staging, prod\",\n  ].join(\"\\n- \"),\n}) {}\n\nexport namespace UploadPath {\n  export type Type = S.Schema.Type<typeof UploadPath>;\n  export type Encoded = S.Schema.Encoded<typeof UploadPath>;\n}\n","import { BS } from \"@beep/schema\";\nimport { Slug, Url } from \"@beep/schema/custom\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\nimport { OrganizationType, OrganizationTypeEnum, SubscriptionStatus, SubscriptionTier } from \"./schemas\";\n\nexport const OrganizationModelSchemaId = Symbol.for(\"@beep/shared-domain/OrganizationModel\");\n\n/**\n * Organization model representing organizations.\n * Maps to the `organization` table in the database.\n */\n\nexport class Model extends M.Class<Model>(`OrganizationModel`)(\n  makeFields(SharedEntityIds.OrganizationId, {\n    /** Organization name */\n    name: S.NonEmptyString.annotations({\n      description: \"The organization's display name\",\n    }),\n\n    /** URL-friendly slug identifier */\n    slug: Slug.pipe(S.pattern(/^[a-z0-9]+(?:-[a-z0-9]+)*$/), S.minLength(2), S.maxLength(50)).annotations({\n      description: \"URL-friendly identifier for the organization\",\n    }),\n\n    /** Organization logo URL */\n    logo: BS.FieldOptionOmittable(\n      Url.annotations({\n        description: \"URL to the organization's logo\",\n      })\n    ),\n\n    /** Flexible metadata storage */\n    metadata: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"JSON metadata for additional organization data\",\n      })\n    ),\n    type: BS.toOptionalWithDefault(OrganizationType)(OrganizationTypeEnum.individual).annotations({\n      description: \"The type of the organization\",\n    }),\n    ownerUserId: SharedEntityIds.UserId.annotations({\n      description: \"The owner of the organization\",\n    }),\n    isPersonal: BS.BoolFalse.annotations({\n      description: \"Whether this organization is auto-created for a user\",\n    }),\n    maxMembers: BS.FieldOptionOmittable(\n      S.NonNegativeInt.annotations({\n        description: \"The maximum number of members allowed in the organization\",\n      })\n    ),\n    features: BS.FieldOptionOmittable(BS.Json),\n    settings: BS.FieldOptionOmittable(BS.Json),\n    subscriptionTier: BS.toOptionalWithDefault(SubscriptionTier)(SubscriptionTier.Enum.free).annotations({\n      description: \"The subscription tier of the organization\",\n    }),\n    subscriptionStatus: BS.toOptionalWithDefault(SubscriptionStatus)(SubscriptionStatus.Enum.active).annotations({\n      description: \"The subscription status of the organization\",\n    }),\n  }),\n  {\n    title: \"Organization Model\",\n    description: \"Organization model representing organizations.\",\n    schemaId: OrganizationModelSchemaId,\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\nexport const organizationTypeKit = BS.stringLiteralKit(\"individual\", \"team\", \"enterprise\");\n\nexport const makeOrganizationTypePgEnum = organizationTypeKit.toPgEnum;\n\nexport const OrganizationTypeEnum = organizationTypeKit.Enum;\n\nexport const OrganizationTypeOptions = organizationTypeKit.Options;\n\nexport class OrganizationType extends organizationTypeKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/shared-domain/Organization/schemas/OrganizationType\"),\n  identifier: \"OrganizationType\",\n  title: \"Organization Type\",\n  description: \"The type of organization (individual, team, enterprise)\",\n}) {\n  static readonly Options = organizationTypeKit.Options;\n  static readonly Enum = organizationTypeKit.Enum;\n}\n\nexport namespace OrganizationType {\n  export type Type = S.Schema.Type<typeof OrganizationType>;\n  export type Encoded = S.Schema.Encoded<typeof OrganizationType>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nconst kit = BS.stringLiteralKit(\"active\", \"canceled\");\n\nexport const makeSubscriptionStatusPgEnum = kit.toPgEnum;\nexport const SubscriptionStatusEnum = kit.Enum;\nexport const SubscriptionStatusOptions = kit.Options;\n\nexport class SubscriptionStatus extends kit.Schema {\n  static readonly Options = kit.Options;\n  static readonly Enum = kit.Enum;\n}\n\nexport namespace SubscriptionStatus {\n  export type Type = S.Schema.Type<typeof SubscriptionStatus>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionStatus>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nconst kit = BS.stringLiteralKit(\"free\", \"plus\", \"pro\", \"enterprise\");\n\nexport const makeSubscriptionTierPgEnum = kit.toPgEnum;\nexport const SubscriptionTierEnum = kit.Enum;\nexport const SubscriptionTierOptions = kit.Options;\n\nexport class SubscriptionTier extends kit.Schema {\n  static readonly Options = kit.Options;\n  static readonly Enum = kit.Enum;\n}\n\nexport namespace SubscriptionTier {\n  export type Type = S.Schema.Type<typeof SubscriptionTier>;\n  export type Encoded = S.Schema.Encoded<typeof SubscriptionTier>;\n}\n","import { BS } from \"@beep/schema\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\n\nexport const TeamModelSchemaId = Symbol.for(\"@beep/shared-domain/TeamModel\");\n\n/**\n * Team model representing teams within organizations.\n * Maps to the `team` table in the database.\n */\nexport class Model extends M.Class<Model>(`TeamModel`)(\n  makeFields(SharedEntityIds.TeamId, {\n    /** Team name */\n    name: S.NonEmptyString.annotations({\n      description: \"The team's name\",\n    }),\n\n    /** Team description */\n    description: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"Description of the team's purpose\",\n      })\n    ),\n\n    /** Team slug for URLs */\n    slug: BS.Slug.annotations({\n      description: \"URL-friendly team identifier\",\n    }),\n\n    /** Team metadata */\n    metadata: BS.FieldOptionOmittable(\n      S.String.annotations({\n        description: \"JSON metadata for additional team data\",\n      })\n    ),\n  }),\n  {\n    title: \"Team Model\",\n    description: \"Team model representing teams within organizations.\",\n    schemaId: TeamModelSchemaId,\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nexport const UserGenderKit = BS.stringLiteralKit(\"male\", \"female\");\n\nexport const UserGenderEnum = UserGenderKit.Enum;\n\nexport const makeUserGenderPgEnum = UserGenderKit.toPgEnum;\n\nexport const UserGenderOptions = UserGenderKit.Options;\n\nexport class UserGender extends UserGenderKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/iam-domain/User/UserGender\"),\n  identifier: \"UserGender\",\n  title: \"User Gender\",\n  description: \"The user's role in the system\",\n}) {\n  static readonly Options = UserGenderKit.Options;\n  static readonly Enum = UserGenderKit.Enum;\n  static readonly DropDownOptions = UserGenderKit.Options.map((option) => ({\n    label: option,\n    value: option,\n  }));\n}\n\nexport namespace UserGender {\n  export type Type = S.Schema.Type<typeof UserGender>;\n  export type Encoded = S.Schema.Encoded<typeof UserGender>;\n}\n","import { BS } from \"@beep/schema\";\nimport type * as S from \"effect/Schema\";\n\nexport const UserRoleKit = BS.stringLiteralKit(\"admin\", \"super_admin\", \"user\", \"tenant\", \"guest\");\n\nexport const UserRoleEnum = UserRoleKit.Enum;\n\nexport const makeUserRolePgEnum = UserRoleKit.toPgEnum;\n\nexport const UserRoleOptions = UserRoleKit.Options;\n\nexport class UserRole extends UserRoleKit.Schema.annotations({\n  schemaId: Symbol.for(\"@beep/iam-domain/User/UserRole\"),\n  identifier: \"UserRole\",\n  title: \"User Role\",\n  description: \"The user's role in the system\",\n}) {\n  static readonly Options = UserRoleKit.Options;\n  static readonly Enum = UserRoleKit.Enum;\n}\n\nexport namespace UserRole {\n  export type Type = S.Schema.Type<typeof UserRole>;\n  export type Encoded = S.Schema.Encoded<typeof UserRole>;\n}\n","import { BS } from \"@beep/schema\";\nimport { makeFields } from \"@beep/shared-domain/common\";\nimport * as M from \"@effect/sql/Model\";\nimport * as S from \"effect/Schema\";\nimport { SharedEntityIds } from \"../../entity-ids\";\nimport { UserGender, UserRole } from \"./schemas\";\n\n/**\n * User model representing application users with authentication and profile data.\n * Maps to the `user` table in the database.\n */\nexport class Model extends M.Class<Model>(`UserModel`)(\n  makeFields(SharedEntityIds.UserId, {\n    /** User's display name */\n    name: S.NonEmptyString.annotations({\n      description: \"The user's display name\",\n    }),\n\n    /** User's email address (unique) */\n    email: BS.Email.annotations({\n      description: \"The user's email address\",\n    }),\n\n    /** Whether the user's email has been verified */\n    emailVerified: BS.BoolWithDefault(false),\n\n    /** User's profile image URL */\n    image: BS.FieldOptionOmittable(\n      S.String.pipe(S.pattern(/^https?:\\/\\/.+/)).annotations({\n        description: \"URL to the user's profile image\",\n      })\n    ),\n\n    /** User's role in the system */\n    role: BS.toOptionalWithDefault(UserRole)(UserRole.Enum.user).annotations({\n      description: \"The user's role in the system\",\n    }),\n    /* The user's gender */\n    gender: BS.toOptionalWithDefault(UserGender)(UserGender.Enum.male).annotations({\n      description: \"The user's gender\",\n    }),\n\n    /** Whether the user is banned */\n    banned: BS.BoolWithDefault(false).annotations({\n      description: \"Whether the user is currently banned\",\n    }),\n\n    /** Reason for ban if user is banned */\n    banReason: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"Reason why the user was banned\",\n      })\n    ),\n\n    /** When the ban expires */\n    banExpires: BS.FieldOptionOmittable(\n      BS.DateTimeFromDate({\n        description: \"When the user's ban expires\",\n      })\n    ),\n\n    /** Whether this is an anonymous user */\n    isAnonymous: BS.BoolWithDefault(false).annotations({\n      description: \"Whether this user is anonymous (guest user)\",\n    }),\n\n    phoneNumber: BS.FieldOptionOmittable(\n      BS.Phone.annotations({\n        description: \"The user's phone number\",\n      })\n    ),\n\n    phoneNumberVerified: BS.BoolWithDefault(false).annotations({\n      description: \"Whether the user's phone number has been verified\",\n    }),\n\n    /** Whether two-factor authentication is enabled */\n    twoFactorEnabled: BS.BoolWithDefault(false).annotations({\n      description: \"Whether two-factor authentication is enabled for this user\",\n    }),\n\n    username: BS.FieldOptionOmittable(\n      S.NonEmptyTrimmedString.pipe(S.lowercased()).annotations({\n        description: \"The user's username\",\n      })\n    ),\n\n    displayUsername: BS.FieldOptionOmittable(\n      S.NonEmptyTrimmedString.annotations({\n        description: \"The user's display name\",\n      })\n    ),\n\n    /** Stripe customer ID for billing */\n    stripeCustomerId: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"Stripe customer ID for billing integration\",\n      })\n    ),\n\n    lastLoginMethod: BS.FieldOptionOmittable(\n      S.NonEmptyString.annotations({\n        description: \"The user's last login method\",\n      })\n    ),\n  }),\n  {\n    title: \"User Model\",\n    description: \"User model representing application users with authentication and profile data.\",\n    schemaId: Symbol.for(\"@beep/iam-domain/UserModel\"),\n  }\n) {}\n","import { BS } from \"@beep/schema\";\nimport * as O from \"effect/Option\";\nimport type * as S from \"effect/Schema\";\nimport { Model } from \"./User.model\";\n\nexport class NewUser extends BS.Class<NewUser>(\"NewUser\")(\n  Model.insert.pick(\"email\", \"name\", \"username\", \"phoneNumber\", \"gender\", \"displayUsername\"),\n  {\n    schemaId: Symbol.for(\"@beep/iam-domain/User/NewUser\"),\n    title: \"New User\",\n    description: \"The shape of a new user\",\n  }\n) {\n  static readonly create = (input: NewUser.Type) =>\n    Model.insert.make({\n      email: input.email,\n      name: input.name,\n      username: input.username,\n      phoneNumber: input.phoneNumber,\n      gender: input.gender,\n      displayUsername: input.displayUsername,\n      emailVerified: false,\n      phoneNumberVerified: false,\n      banned: false,\n      createdBy: O.some(\"system\"),\n      updatedBy: O.some(\"system\"),\n      source: O.some(\"sign-up\"),\n    });\n}\n\nexport namespace NewUser {\n  export type Type = S.Schema.Type<typeof NewUser>;\n  export type Encoded = S.Schema.Encoded<typeof NewUser>;\n}\n","import { PathBuilder } from \"@beep/constants/paths/utils\";\nimport * as F from \"effect/Function\";\nimport type { IamEntityIds, SharedEntityIds } from \"../entity-ids\";\n\n// Base builders\n\nconst auth = PathBuilder.createRoot(\"/auth\");\nconst signIn = auth.child(\"sign-in\");\nconst signUp = auth.child(\"sign-up\");\nconst updatePassword = auth.child(\"update-password\");\nconst requestResetPassword = auth.child(\"request-reset-password\");\nconst resetPassword = auth.child(\"reset-password\");\nconst verifyEmail = auth.child(\"verify-email\");\nconst verifyPhone = auth.child(\"verify-phone\");\nconst verifyPhoneResend = verifyPhone.child(\"resend\");\nconst acceptInvitation = auth.child(\"accept-invitation\");\nconst passkey = auth.child(\"passkey\");\nconst passkeyManage = passkey.child(\"manage\");\nconst passkeyRegister = passkey.child(\"register\");\nconst anonymous = auth.child(\"anonymous\");\nconst anonymousUpgrade = anonymous.child(\"upgrade\");\nconst signOut = auth.child(\"sign-out\");\nconst oneTimeToken = auth.child(\"one-time-token\");\nconst oneTimeTokenGenerate = oneTimeToken.child(\"generate\");\nconst oneTimeTokenVerify = oneTimeToken.child(\"verify\");\nconst siweRoot = auth.child(\"siwe\");\nconst siweConnect = siweRoot.child(\"connect\");\nconst siweVerify = siweRoot.child(\"verify\");\nconst oauth = auth.child(\"oauth\");\nconst oauthCallback = oauth.child(\"callback\");\nconst oauthSuccess = oauth.child(\"success\");\nconst oauthError = oauth.child(\"error\");\nconst oauthComplete = oauth.child(\"complete\");\nconst oauthLink = oauth.child(\"link\");\nconst oauthProvider = (providerId: string) => oauth.child(providerId);\nconst authCallback = auth.child(\"callback\");\nconst authStatus = auth.child(\"status\");\nconst authSuccess = auth.child(\"success\");\nconst authFailure = auth.child(\"failure\");\nconst twoFactor = auth.child(\"two-factor\");\nconst twoFactorChallenge = twoFactor.child(\"challenge\");\nconst twoFactorOtp = twoFactor.child(\"otp\");\nconst twoFactorTotp = twoFactor.child(\"totp\");\nconst twoFactorRecovery = twoFactor.child(\"recovery\");\nconst twoFactorBackupCodes = twoFactor.child(\"backup-codes\");\nconst twoFactorDevices = twoFactor.child(\"devices\");\nconst device = auth.child(\"device\");\nconst deviceStart = device.child(\"start\");\nconst devicePoll = device.child(\"poll\");\nconst deviceVerify = device.child(\"verify\");\nconst deviceStatus = device.child(\"status\");\nconst account = (id: IamEntityIds.AccountId.Type) => PathBuilder.createRoot(\"/account\").child(id);\nconst dashboard = PathBuilder.createRoot(\"/dashboard\");\nconst dashboardBilling = dashboard.child(\"billing\");\nconst dashboardBillingSubscribe = dashboardBilling.child(\"subscribe\");\nconst dashboardBillingPortal = dashboardBilling.child(\"portal\");\nconst dashboardBillingSuccess = dashboardBilling.child(\"success\");\nconst dashboardBillingCancel = dashboardBilling.child(\"cancel\");\nconst dashboardBillingHistory = dashboardBilling.child(\"history\");\nconst dashboardSecurity = dashboard.child(\"security\");\nconst dashboardSecuritySessions = dashboardSecurity.child(\"sessions\");\nconst dashboardSecurityDevices = dashboardSecurity.child(\"devices\");\nconst dashboardSecurityPasskeys = dashboardSecurity.child(\"passkeys\");\nconst dashboardSecurityTwoFactor = dashboardSecurity.child(\"two-factor\");\nconst dashboardSecurityRecovery = dashboardSecurity.child(\"recovery-codes\");\nconst dashboardSecurityJwt = dashboardSecurity.child(\"jwt\");\nconst dashboardApiKeys = dashboard.child(\"api-keys\");\nconst dashboardApiKeysCreate = dashboardApiKeys.child(\"new\");\nconst dashboardApiKey = (keyId: string) => dashboardApiKeys.child(keyId);\nconst dashboardAdmin = dashboard.child(\"admin\");\nconst dashboardAdminUsers = dashboardAdmin.child(\"users\");\nconst dashboardAdminUser = (id: SharedEntityIds.UserId.Type) => dashboardAdminUsers.child(id);\nconst dashboardAdminSso = dashboardAdmin.child(\"sso\");\nconst dashboardAdminSsoProvider = (providerId: string) => dashboardAdminSso.child(providerId);\nconst dashboardAdminOidc = dashboardAdmin.child(\"oidc\");\nconst dashboardAdminOidcClient = (clientId: string) => dashboardAdminOidc.child(clientId);\nconst dashboardAdminPermissions = dashboardAdmin.child(\"permissions\");\nconst dashboardAdminOauthClients = dashboardAdmin.child(\"oauth-clients\");\nconst dashboardAdminOauthClient = (clientId: string) => dashboardAdminOauthClients.child(clientId);\nconst user = dashboard.child(\"user\");\nconst fileManager = dashboard.child(\"file-manager\");\nconst organization = (id: SharedEntityIds.OrganizationId.Type) => PathBuilder.createRoot(\"/organizations\").child(id);\nconst oauth2 = PathBuilder.createRoot(\"/oauth2\");\nconst oauth2Authorize = oauth2.child(\"authorize\");\nconst oauth2Consent = oauth2.child(\"consent\");\nconst oauth2Register = oauth2.child(\"register\");\nconst oauth2Userinfo = oauth2.child(\"userinfo\");\nconst oauth2Clients = oauth2.child(\"clients\");\nconst oauth2Client = (clientId: string) => oauth2Clients.child(clientId);\nconst apiRoot = PathBuilder.createRoot(\"/api\");\nconst apiAuth = apiRoot.child(\"auth\");\nconst apiAuthJwks = apiAuth.child(\"jwks\");\nconst apiAuthDevice = apiAuth.child(\"device\");\nconst apiOauth2 = apiRoot.child(\"oauth2\");\nconst apiOauth2Authorize = apiOauth2.child(\"authorize\");\nconst apiOauth2Token = apiOauth2.child(\"token\");\nconst apiOauth2Userinfo = apiOauth2.child(\"userinfo\");\nconst apiOauth2Register = apiOauth2.child(\"register\");\nconst apiOauth2Client = apiOauth2.child(\"client\");\nconst apiOauth2ClientId = (clientId: string) => apiOauth2Client.child(clientId);\n\ntype AuthSignInMethod = \"anonymous\" | \"email\" | \"oauth\" | \"oneTap\" | \"otp\" | \"passkey\" | \"totp\" | \"username\";\n\ntype AuthSignUpMethod = \"email\" | \"username\";\n// todo it would be sic to add metadata annotations to individual parts.\nexport const paths = PathBuilder.collection({\n  // static\n  root: \"/\",\n  comingSoon: \"/coming-soon\",\n  maintenance: \"/maintenance\",\n  pricing: \"/pricing\",\n  payment: \"/payment\",\n  about: \"/about-us\",\n  contact: \"/contact-us\",\n  faqs: \"/faqs\",\n  terms: \"/terms\",\n  privacy: \"/privacy-policy\",\n  // auth\n  auth: {\n    signIn: signIn.root,\n    signUp: signUp.root,\n    signOut: signOut.root,\n    updatePassword: updatePassword.root,\n    requestResetPassword: requestResetPassword.root,\n    resetPassword: resetPassword.root,\n    status: authStatus.root,\n    success: authSuccess.root,\n    failure: authFailure.root,\n    callback: authCallback.root,\n    verification: {\n      email: F.pipe(\n        verifyEmail,\n        (ve) =>\n          ({\n            root: ve.root,\n            verify: (token: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                token,\n              }),\n            callback: (token: string, callbackURL: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                token,\n                callbackURL,\n              }),\n            error: (errorCode: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                error: errorCode,\n              }),\n            status: (status: string) =>\n              PathBuilder.dynamicQueries(ve.root)({\n                status,\n              }),\n          }) as const\n      ),\n      phone: F.pipe(\n        verifyPhone,\n        (vp) =>\n          ({\n            root: vp.root,\n            verify: (code: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                code,\n              }),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                status,\n              }),\n            error: (errorCode: string) =>\n              PathBuilder.dynamicQueries(vp.root)({\n                error: errorCode,\n              }),\n            resend: verifyPhoneResend.root,\n          }) as const\n      ),\n    },\n    twoFactor: F.pipe(\n      twoFactor,\n      (tf) =>\n        ({\n          root: tf.root,\n          challenge: F.pipe(\n            twoFactorChallenge,\n            (challenge) =>\n              ({\n                root: challenge.root,\n                withToken: (token: string) =>\n                  PathBuilder.dynamicQueries(challenge.root)({\n                    token,\n                  }),\n                trustedDevice: (token: string) =>\n                  PathBuilder.dynamicQueries(challenge.root)({\n                    token,\n                    trustDevice: \"true\",\n                  }),\n              }) as const\n          ),\n          otp: F.pipe(\n            twoFactorOtp,\n            (otp) =>\n              ({\n                root: otp.root,\n                withStatus: (status: string) =>\n                  PathBuilder.dynamicQueries(otp.root)({\n                    status,\n                  }),\n                error: (errorCode: string) =>\n                  PathBuilder.dynamicQueries(otp.root)({\n                    error: errorCode,\n                  }),\n              }) as const\n          ),\n          totp: F.pipe(\n            twoFactorTotp,\n            (totpValue) =>\n              ({\n                root: totpValue.root,\n                withState: (state: string) =>\n                  PathBuilder.dynamicQueries(totpValue.root)({\n                    state,\n                  }),\n                error: (errorCode: string) =>\n                  PathBuilder.dynamicQueries(totpValue.root)({\n                    error: errorCode,\n                  }),\n              }) as const\n          ),\n          recovery: F.pipe(\n            twoFactorRecovery,\n            (recovery) =>\n              ({\n                root: recovery.root,\n                verify: recovery(\"verify\"),\n                withToken: (token: string) =>\n                  PathBuilder.dynamicQueries(recovery.root)({\n                    token,\n                  }),\n              }) as const\n          ),\n          backupCodes: {\n            root: twoFactorBackupCodes.root,\n          },\n          devices: {\n            root: twoFactorDevices.root,\n          },\n        }) as const\n    ),\n    acceptInvitation: acceptInvitation.root,\n    device: {\n      root: device.root,\n      start: deviceStart.root,\n      poll: devicePoll.root,\n      status: deviceStatus.root,\n      verify: deviceVerify.root,\n      approve: device(\"approve\"),\n      denied: device(\"denied\"),\n      success: device(\"success\"),\n      withUserCode: (userCode: string) =>\n        PathBuilder.dynamicQueries(device.root)({\n          userCode,\n        }),\n    },\n    passkey: passkey.root,\n    anonymous: anonymous.root,\n    oauth: oauth.root,\n    oneTimeToken: oneTimeToken.root,\n    siwe: siweRoot.root,\n    routes: {\n      signIn: F.pipe(\n        signIn,\n        (si) =>\n          ({\n            root: si.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                callbackURL,\n              }),\n            withMethod: (method: AuthSignInMethod) =>\n              PathBuilder.dynamicQueries(si.root)({\n                method,\n              }),\n            withCallbackAndMethod: (callbackURL: string, method: AuthSignInMethod) =>\n              PathBuilder.dynamicQueries(si.root)({\n                callbackURL,\n                method,\n              }),\n            withError: (errorCode: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                error: errorCode,\n              }),\n            withState: (state: string) =>\n              PathBuilder.dynamicQueries(si.root)({\n                state,\n              }),\n          }) as const\n      ),\n      signUp: F.pipe(\n        signUp,\n        (su) =>\n          ({\n            root: su.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                callbackURL,\n              }),\n            withMethod: (method: AuthSignUpMethod) =>\n              PathBuilder.dynamicQueries(su.root)({\n                method,\n              }),\n            withPlan: (plan: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                plan,\n              }),\n            withSource: (source: string) =>\n              PathBuilder.dynamicQueries(su.root)({\n                source,\n              }),\n          }) as const\n      ),\n      requestResetPassword: F.pipe(\n        requestResetPassword,\n        (rrp) =>\n          ({\n            root: rrp.root,\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(rrp.root)({\n                status,\n              }),\n            withEmail: (email: string) =>\n              PathBuilder.dynamicQueries(rrp.root)({\n                email,\n              }),\n          }) as const\n      ),\n      resetPassword: F.pipe(\n        resetPassword,\n        (rp) =>\n          ({\n            root: rp.root,\n            withToken: (token: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n              }),\n            withTokenAndStatus: (token: string, status: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                status,\n              }),\n            withTokenAndError: (token: string, error: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                error,\n              }),\n            withTokenAndCallback: (token: string, callbackURL: string) =>\n              PathBuilder.dynamicQueries(rp.root)({\n                token,\n                callbackURL,\n              }),\n          }) as const\n      ),\n      acceptInvitation: F.pipe(\n        acceptInvitation,\n        (ai) =>\n          ({\n            root: ai.root,\n            token: PathBuilder.dynamicPath(ai.root),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(ai.root)({\n                status,\n              }),\n          }) as const\n      ),\n      oauth: {\n        root: oauth.root,\n        callback: oauthCallback.root,\n        success: oauthSuccess.root,\n        error: oauthError.root,\n        complete: oauthComplete.root,\n        link: oauthLink.root,\n        withState: (state: string) =>\n          PathBuilder.dynamicQueries(oauth.root)({\n            state,\n          }),\n        provider: F.flow(\n          oauthProvider,\n          (provider) =>\n            ({\n              root: provider.root,\n              callback: provider(\"callback\"),\n              link: provider(\"link\"),\n              complete: provider(\"complete\"),\n              error: provider(\"error\"),\n            }) as const\n        ),\n      },\n      passkey: F.pipe(\n        passkey,\n        (pk) =>\n          ({\n            root: pk.root,\n            manage: passkeyManage.root,\n            register: passkeyRegister.root,\n            withState: (state: string) =>\n              PathBuilder.dynamicQueries(pk.root)({\n                state,\n              }),\n            withError: (errorCode: string) =>\n              PathBuilder.dynamicQueries(pk.root)({\n                error: errorCode,\n              }),\n          }) as const\n      ),\n      anonymous: F.pipe(\n        anonymous,\n        (anon) =>\n          ({\n            root: anon.root,\n            upgrade: anonymousUpgrade.root,\n            withCallback: (callbackURL: string) =>\n              PathBuilder.dynamicQueries(anon.root)({\n                callbackURL,\n              }),\n          }) as const\n      ),\n      oneTimeToken: F.pipe(\n        oneTimeToken,\n        (ott) =>\n          ({\n            root: ott.root,\n            generate: oneTimeTokenGenerate.root,\n            verify: oneTimeTokenVerify.root,\n            withToken: (token: string) =>\n              PathBuilder.dynamicQueries(oneTimeTokenVerify.root)({\n                token,\n              }),\n            withStatus: (status: string) =>\n              PathBuilder.dynamicQueries(ott.root)({\n                status,\n              }),\n          }) as const\n      ),\n      siwe: F.pipe(\n        siweRoot,\n        (siwe) =>\n          ({\n            root: siwe.root,\n            connect: siweConnect.root,\n            verify: siweVerify.root,\n            withRedirect: (redirect: string) =>\n              PathBuilder.dynamicQueries(siwe.root)({\n                redirect,\n              }),\n          }) as const\n      ),\n    },\n  },\n  settings: {\n    root: \"/settings\",\n  },\n  admin: {\n    root: \"/admin\",\n  },\n  organizations: {\n    root: \"/organizations\",\n    ...F.flow(organization, (o) => ({\n      root: o.root,\n      edit: o(\"edit\"),\n      members: o(\"members\"),\n      settings: o(\"settings\"),\n      billing: o(\"billing\"),\n      invitations: o(\"invitations\"),\n      security: o(\"security\"),\n    })),\n  },\n  account: F.flow(account, (a) => ({\n    root: a.root,\n    edit: a(\"edit\"),\n    security: a(\"security\"),\n    preferences: a(\"preferences\"),\n    notifications: a(\"notifications\"),\n    sessions: a(\"sessions\"),\n    devices: a(\"devices\"),\n    apiKeys: a(\"api-keys\"),\n    passkeys: a(\"passkeys\"),\n    twoFactor: a(\"two-factor\"),\n    recoveryCodes: a(\"recovery-codes\"),\n    jwt: a(\"jwt\"),\n  })),\n  fileManager: {\n    root: fileManager.root,\n  },\n  // dashboard\n  dashboard: {\n    root: dashboard.root,\n    user: {\n      root: user.root,\n      account: user(\"account\"),\n      edit: (id: SharedEntityIds.UserId.Type) => user.child(id)(\"edit\"),\n    },\n    security: {\n      root: dashboardSecurity.root,\n      sessions: dashboardSecuritySessions.root,\n      devices: dashboardSecurityDevices.root,\n      passkeys: dashboardSecurityPasskeys.root,\n      twoFactor: dashboardSecurityTwoFactor.root,\n      recoveryCodes: dashboardSecurityRecovery.root,\n      jwt: dashboardSecurityJwt.root,\n    },\n    billing: {\n      root: dashboardBilling.root,\n      subscribe: dashboardBillingSubscribe.root,\n      portal: dashboardBillingPortal.root,\n      success: dashboardBillingSuccess.root,\n      cancel: dashboardBillingCancel.root,\n      history: dashboardBillingHistory.root,\n    },\n    apiKeys: {\n      root: dashboardApiKeys.root,\n      create: dashboardApiKeysCreate.root,\n      detail: F.flow(\n        dashboardApiKey,\n        (apiKey) =>\n          ({\n            root: apiKey.root,\n            edit: apiKey(\"edit\"),\n            rotate: apiKey(\"rotate\"),\n          }) as const\n      ),\n    },\n    admin: {\n      root: dashboardAdmin.root,\n      permissions: dashboardAdminPermissions.root,\n      users: {\n        root: dashboardAdminUsers.root,\n        create: dashboardAdminUsers(\"create\"),\n        detail: F.flow(\n          dashboardAdminUser,\n          (adminUser) =>\n            ({\n              root: adminUser.root,\n              edit: adminUser(\"edit\"),\n              sessions: adminUser(\"sessions\"),\n              impersonate: adminUser(\"impersonate\"),\n              revokeSession: adminUser(\"revoke-session\"),\n              revokeSessions: adminUser(\"revoke-sessions\"),\n              ban: adminUser(\"ban\"),\n              unban: adminUser(\"unban\"),\n              permissions: adminUser(\"permissions\"),\n            }) as const\n        ),\n      },\n      sso: {\n        root: dashboardAdminSso.root,\n        create: dashboardAdminSso(\"new\"),\n        provider: F.flow(\n          dashboardAdminSsoProvider,\n          (provider) =>\n            ({\n              root: provider.root,\n              settings: provider(\"settings\"),\n              delete: provider(\"delete\"),\n            }) as const\n        ),\n      },\n      oidc: {\n        root: dashboardAdminOidc.root,\n        register: dashboardAdminOidc(\"register\"),\n        client: F.flow(\n          dashboardAdminOidcClient,\n          (client) =>\n            ({\n              root: client.root,\n              edit: client(\"edit\"),\n              secrets: client(\"secrets\"),\n            }) as const\n        ),\n      },\n      oauthClients: {\n        root: dashboardAdminOauthClients.root,\n        client: F.flow(\n          dashboardAdminOauthClient,\n          (client) =>\n            ({\n              root: client.root,\n              revoke: client(\"revoke\"),\n            }) as const\n        ),\n      },\n    },\n  },\n  oauth2: {\n    root: oauth2.root,\n    authorize: oauth2Authorize.root,\n    consent: oauth2Consent.root,\n    register: oauth2Register.root,\n    userinfo: oauth2Userinfo.root,\n    clients: {\n      root: oauth2Clients.root,\n      client: F.flow(\n        oauth2Client,\n        (client) =>\n          ({\n            root: client.root,\n            edit: client(\"edit\"),\n            secrets: client(\"secrets\"),\n          }) as const\n      ),\n    },\n  },\n  api: {\n    root: apiRoot.root,\n    auth: {\n      root: apiAuth.root,\n      jwks: apiAuthJwks.root,\n      device: {\n        root: apiAuthDevice.root,\n      },\n    },\n    oauth2: {\n      root: apiOauth2.root,\n      authorize: apiOauth2Authorize.root,\n      token: apiOauth2Token.root,\n      userinfo: apiOauth2Userinfo.root,\n      register: apiOauth2Register.root,\n      client: F.flow(\n        apiOauth2ClientId,\n        (client) =>\n          ({\n            root: client.root,\n          }) as const\n      ),\n    },\n  },\n} as const);\n"],"names":[],"mappings":"4MAAA,EAAA,CAAA,CAAA,QAAA,QAAA,EAAA,EAAA,CAAA,CAAA,QAGA,EAAA,EAAA,CAAA,CAAA,QACA,EAAA,EAAA,CAAA,CAAA,QASO,IAAM,EAAe,CAC1B,UAAW,EAAA,EAAE,CAAC,+BAA+B,CAAC,CAC5C,YAAa,0CACf,GACA,UAAW,EAAA,EAAE,CAAC,+BAA+B,CAAC,CAC5C,YAAa,+CACf,GACA,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAChC,EAAA,EAAE,CAAC,gBAAgB,CAAC,CAClB,YAAa,uDACf,GAEJ,EA+Ba,EAAgB,CAxB7B,GAJmC,CACjC,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,MAAQ,EAC3C,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,MAAQ,EAC3C,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,MAAQ,CAC7C,CAyBE,CACA,EADG,CACA,CAAY,CAEf,QAAS,EAAA,MAHa,GAGF,CAAC,EAAA,GAAK,CAAC,IAAI,CAAC,EAAA,oBAAsB,CAAC,KAEvD,OAAQ,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,MAAQ,CAC1C,EAGa,EAAa,CACxB,EACA,KAUO,CADP,GAHsB,CADtB,GAHiB,CACf,GAAI,EAAS,aAAa,CAC1B,OAAQ,EAAS,gBAAgB,AACnC,CAEE,CACA,EADG,CACA,CAAa,AAClB,CAEE,CACA,EADG,CACA,CAAC,AALO,CAMb,UAFkB,YC/EpB,EAAA,CAAA,CAAA,8BAGO,IAAM,EAAY,EAAS,IAAI,CAAC,UAAW,CAChD,MAAO,YACP,YAAa,CACX,YAAa,qCACb,SAAU,OAAO,GAAG,CAAC,8CACvB,CACF,GAOa,EAAW,EAAS,IAAI,CAAC,SAAU,CAC9C,MAAO,WACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,4CACrB,YAAa,oCACf,CACF,GAOa,EAAe,EAAS,IAAI,CAAC,aAAc,CACtD,MAAO,eACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,kDACrB,YAAa,uCACf,CACF,GAOa,EAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,4CACrB,YAAa,gCACf,CACF,GAOa,EAAW,EAAS,IAAI,CAAC,SAAU,CAC9C,MAAO,WACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,8CACrB,YAAa,kCACf,CACF,GAOa,EAAqB,EAAS,IAAI,CAAC,qBAAsB,CACpE,MAAO,qBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,wDACrB,YAAa,+CACf,CACF,GAOa,EAAqB,EAAS,IAAI,CAAC,oBAAqB,CACnE,MAAO,qBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,wDACrB,YAAa,8CACf,CACF,GAOa,EAAiB,EAAS,IAAI,CAAC,gBAAiB,CAC3D,MAAO,iBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,oDACrB,YAAa,0CACf,CACF,GAOa,EAAY,EAAS,IAAI,CAAC,UAAW,CAChD,MAAO,UACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,+CACrB,YAAa,mCACf,CACF,GAOa,EAAc,EAAS,IAAI,CAAC,aAAc,CACrD,MAAO,cACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,iDACrB,YAAa,sCACf,CACF,GAYa,EAAY,EAAS,IAAI,CAAC,UAAW,CAChD,MAAO,YACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,+CACrB,YAAa,mCACf,CACF,GAOa,EAAgB,EAAS,IAAI,CAAC,eAAgB,CACzD,MAAO,gBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,mDACrB,YAAa,yCACf,CACF,GAOa,EAAiB,EAAS,IAAI,CAAC,eAAgB,CAC1D,MAAO,iBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,oDACrB,YAAa,wCACf,CACF,GAOa,EAAe,EAAS,IAAI,CAAC,cAAe,CACvD,MAAO,eACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,kDACrB,YAAa,uCACf,CACF,GAOa,EAAc,EAAS,IAAI,CAAC,aAAc,CACrD,MAAO,cACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,iDACrB,YAAa,sCACf,CACF,GAEa,EAAiB,EAAS,IAAI,CAAC,eAAgB,CAC1D,MAAO,iBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,oDACrB,YAAa,wCACf,CACF,GAOa,EAAkB,EAAS,IAAI,CAAC,iBAAkB,CAC7D,MAAO,kBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,qDACrB,YAAa,0CACf,CACF,GAOa,EAAqB,EAAS,IAAI,CAAC,oBAAqB,CACnE,MAAO,qBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,wDACrB,YAAa,8CACf,CACF,GAOa,EAAe,EAAS,IAAI,CAAC,cAAe,CACvD,MAAO,qBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,kDACrB,YAAa,uCACf,CACF,qYC/OO,IAAM,EAAiB,EAAS,IAAI,CAAC,eAAgB,CAC1D,MAAO,iBACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,uDACrB,YAAa,yCACf,CACF,GAMa,EAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,+CACrB,YAAa,gCACf,CACF,GAOa,EAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,+CACrB,YAAa,gCACf,CACF,GAOa,EAAa,EAAS,IAAI,CAAC,YAAa,CACnD,MAAO,aACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,mDACrB,YAAa,sCACf,CACF,GAOa,EAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,4CACrB,YAAa,gCACf,CACF,6FCzDO,OAAM,UAAoB,EAAA,KAAO,CACtC,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,WAAW,CAAC,CACZ,SAAU,OAAO,GAAG,CAAC,6CACrB,YAAa,gBACb,MAAO,gBACP,WAAY,aACd,GAAI,uCCNa,EAAA,GAAA,GAAA,CAAA,CAAA,IACF,kBAAA,CAAqB,EAAA,EAAE,CAAC,gBAAgB,CACnD,EAAO,SAAS,CAChB,EAAO,SAAS,CAChB,EAAe,SAAS,CACxB,EAAO,SAAS,CAChB,EAAW,SAAS,CAGf,OAAM,UAAwB,EAAA,kBAAA,CAAmB,MAAM,CAAC,WAAW,CAAC,CACzE,SAAU,OAAO,GAAG,CAAC,qDACrB,YAAa,gEACb,WAAY,kBACZ,MAAO,mBACT,GACE,OAAgB,OAAS,EAAA,kBAAA,CAAmB,QAAQ,CAAC,YAAa,AAClE,QAAgB,KAAO,EAAA,kBAAA,CAAmB,IAC1C,AAD8C,AAAC,QAC/B,QAAU,EAAA,kBAAA,CAAmB,OAAO,AAAC,AACrD,QAAgB,GAAK,EAAA,kBAAA,CAAmB,EAAE,AAAC,AAC7C,GAVa,eAAA,CAAA,MAkBE,EAAA,IAAA,EAAA,CAAA,CAAA,IACF,eAAA,CAAkB,EAAA,EAAE,CAAC,gBAAgB,CAChD,EAAU,SAAS,CACnB,EAAS,SAAS,CAClB,EAAa,SAAS,CACtB,EAAO,SAAS,CAChB,EAAS,SAAS,CAClB,EAAmB,SAAS,CAC5B,EAAmB,SAAS,CAC5B,EAAe,SAAS,CACxB,EAAU,SAAS,CACnB,EAAY,SAAS,CACrB,EAAU,SAAS,CACnB,EAAc,SAAS,CACvB,EAAe,SAAS,CACxB,EAAa,SAAS,CACtB,EAAY,SAAS,CACrB,EAAe,SAAS,CACxB,EAAgB,SAAS,CACzB,EAAmB,SAAS,CAC5B,EAAa,SAAS,CAGjB,OAAM,UAAqB,EAAA,eAAA,CAAgB,MAAM,CAAC,WAAW,CAAC,CACnE,SAAU,OAAO,GAAG,CAAC,kDACrB,YAAa,mEACb,WAAY,eACZ,MAAO,gBACT,GACE,OAAgB,OAAS,EAAA,eAAA,CAAgB,QAAQ,CAAC,YAAa,AAC/D,QAAgB,KAAO,EAAA,eAAA,CAAgB,IAAI,AAAC,AAC5C,QAAgB,QAAU,EAAA,eAAA,CAAgB,OAAQ,AAClD,AADiD,QACjC,GAAK,EAAA,eAAA,CAAgB,EAAE,AAAC,AAC1C,GAVa,YAAA,CAAA,EAkBR,IAAM,EAAkB,EAAA,EAAE,CAAC,gBAAgB,IAC7C,EAAc,eAAe,CAAC,OAAO,IACrC,EAAiB,kBAAkB,CAAC,OAAO,CAGzC,OAAM,UAAqB,EAAgB,MAAM,CAAC,WAAW,CAAC,CACnE,SAAU,OAAO,GAAG,CAAC,8CACrB,YAAa,sFACb,WAAY,eACZ,MAAO,gBACT,GACE,OAAgB,OAAS,EAAgB,QAAQ,CAAC,YAAa,AAC/D,QAAgB,KAAO,EAAgB,IACvC,AAD2C,AAAC,QAC5B,QAAU,EAAgB,OAC5C,AADoD,AAAD,uGCjG5C,OAAM,UAAc,EAAA,KAAO,CAAQ,CAAC,aAAa,CAAC,EACvD,EAAW,EAA4B,CAErC,WAAY,EACZ,SAAU,EACV,OAAQ,EAAA,MAAQ,CAChB,cAAe,EAAA,EAAE,CAAC,oBAAoB,CAAC,GACvC,OAAQ,EACR,UAAW,EAAA,SAAW,CACpB,EAAA,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CACnB,YAAa,0BACf,IAEF,OAAQ,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,EAAE,EACrC,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,EAC1C,cAAe,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,EAC9C,UAAW,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,EAC1C,cAAe,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,EAC9C,aAAc,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,EAC7C,SAAU,EAAA,EAAE,CAAC,oBAAoB,CAAC,EAAA,EAAE,CAAC,IAAI,CAC3C,IACC,mDC1BI,IAAM,EAAgB,EAAA,EAAE,CAAC,gBAAgB,IAC3C,EAAc,eAAe,CAAC,OAAO,IACrC,EAAiB,kBAAkB,CAAC,OAAO,CAGzC,OAAM,UAAmB,EAAc,MAAM,CAAC,WAAW,CAAC,CAC/D,SAAU,OAAO,GAAG,CAAC,kCACrB,YAAa,iEACb,MAAO,cACP,WAAY,YACd,GACE,OAAgB,OAAS,EAAc,QAAQ,CAAC,eAAgB,AAChE,QAAgB,QAAU,EAAc,OACxC,AADgD,AAAD,QAC/B,KAAO,EAAc,IAAI,AAAC,AAC1C,QAAgB,GAAK,EAAc,EAAE,AAAC,AACxC,8DCdO,IAAM,EAAc,EAAS,IAAI,CAAC,YAAa,CACpD,MAAO,cACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,iDACrB,YAAa,sCACf,CACF,GAOa,EAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,4CACrB,YAAa,iCACf,CACF,GAOa,EAAa,EAAS,IAAI,CAAC,WAAY,CAClD,MAAO,aACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,gDACrB,YAAa,oCACf,CACF,GAOa,EAAU,EAAS,IAAI,CAAC,QAAS,CAC5C,MAAO,UACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,6CACrB,YAAa,kCACf,CACF,GAMa,EAAQ,EAAS,IAAI,CAAC,MAAO,CACxC,MAAO,QACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,2CACrB,YAAa,+BACf,CACF,GAMa,GAAc,EAAS,IAAI,CAAC,YAAa,CACpD,MAAO,cACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,iDACrB,YAAa,qCACf,CACF,GAOa,GAAS,EAAS,IAAI,CAAC,OAAQ,CAC1C,MAAO,SACP,YAAa,CACX,SAAU,OAAO,GAAG,CAAC,4CACrB,YAAa,gCACf,CACF,wSCnFO,OAAM,WAAc,EAAA,KAAO,CAAQ,CAAC,SAAS,CAAC,EACnD,EAAW,GAAgB,MAAM,CAAE,CAEjC,eAAgB,GAAgB,cAAc,AAChD,IACC,8BCWH,EAAA,CAAA,CAAA,QAAA,IAAA,GAAA,EAAA,CAAA,CAAA,aAEA,GAAA,EAAA,CAAA,CAAA,QACA,GAAA,EAAA,CAAA,CAAA,QACA,GAAA,EAAA,CAAA,CAAA,QACA,GAAA,EAAA,CAAA,CAAA,wBCxBA,EAAA,CAAA,CAAA,QAAA,IAAA,GAAA,EAAA,CAAA,CAAA,OAAA,GAAA,EAAA,CAAA,CAAA,wBCCO,IAAM,GAAsB,EAAA,EAAE,CAAC,gBAAgB,CAAC,aAAc,OAAQ,cAEhE,GAA6B,GAAoB,QAAQ,CAEzD,GAAuB,GAAoB,IAAI,CAE/C,GAA0B,GAAoB,OAAO,AAE3D,OAAM,WAAyB,GAAoB,MAAM,CAAC,WAAW,CAAC,CAC3E,SAAU,OAAO,GAAG,CAAC,6DACrB,WAAY,mBACZ,MAAO,oBACP,YAAa,yDACf,GACE,OAAgB,QAAU,GAAoB,OAAO,AAAC,AACtD,QAAgB,KAAO,GAAoB,IAC7C,AADkD,AAAD,iKCdjD,IAAM,GAAM,EAAA,EAAE,CAAC,gBAAgB,CAAC,SAAU,YAE7B,GAA+B,GAAI,QAAQ,CAC3C,GAAyB,GAAI,IAAI,CACjC,GAA4B,GAAI,OAAO,AAE7C,OAAM,WAA2B,GAAI,MAAM,CAChD,OAAgB,QAAU,GAAI,OAAO,AAAC,AACtC,QAAgB,KAAO,GAAI,IAAI,AAAC,AAClC,8ICTA,IAAM,GAAM,EAAA,EAAE,CAAC,gBAAgB,CAAC,OAAQ,OAAQ,MAAO,cAE1C,GAA6B,GAAI,QAAQ,CACzC,GAAuB,GAAI,IAAI,CAC/B,GAA0B,GAAI,OAAO,AAE3C,OAAM,WAAyB,GAAI,MAAM,CAC9C,OAAgB,QAAU,GAAI,OAAQ,AACtC,AADqC,QACrB,KAAO,GAAI,IAAI,AAAC,AAClC,qJHJO,IAAM,GAA4B,OAAO,GAAG,CAAC,wCAO7C,OAAM,WAAc,GAAA,KAAO,CAAQ,CAAC,iBAAiB,CAAC,EAC3D,EAAW,GAAgB,cAAc,CAAE,CAEzC,KAAM,GAAA,cAAgB,CAAC,WAAW,CAAC,CACjC,YAAa,iCACf,GAGA,KAAM,GAAA,IAAI,CAAC,IAAI,CAAC,GAAA,OAAS,CAAC,8BAA+B,GAAA,SAAW,CAAC,GAAI,GAAA,SAAW,CAAC,KAAK,WAAW,CAAC,CACpG,YAAa,8CACf,GAGA,KAAM,GAAA,EAAE,CAAC,oBAAoB,CAC3B,GAAA,GAAG,CAAC,WAAW,CAAC,CACd,YAAa,gCACf,IAIF,SAAU,GAAA,EAAE,CAAC,oBAAoB,CAC/B,GAAA,MAAQ,CAAC,WAAW,CAAC,CACnB,YAAa,gDACf,IAEF,KAAM,GAAA,EAAE,CAAC,qBAAqB,CAAC,IAAkB,GAAqB,UAAU,EAAE,WAAW,CAAC,CAC5F,YAAa,8BACf,GACA,YAAa,GAAgB,MAAM,CAAC,WAAW,CAAC,CAC9C,YAAa,+BACf,GACA,WAAY,GAAA,EAAE,CAAC,SAAS,CAAC,WAAW,CAAC,CACnC,YAAa,sDACf,GACA,WAAY,GAAA,EAAE,CAAC,oBAAoB,CACjC,GAAA,cAAgB,CAAC,WAAW,CAAC,CAC3B,YAAa,2DACf,IAEF,SAAU,GAAA,EAAE,CAAC,oBAAoB,CAAC,GAAA,EAAE,CAAC,IAAI,EACzC,SAAU,GAAA,EAAE,CAAC,oBAAoB,CAAC,GAAA,EAAE,CAAC,IAAI,EACzC,iBAAkB,GAAA,EAAE,CAAC,qBAAqB,CAAC,IAAkB,GAAiB,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CACnG,YAAa,2CACf,GACA,mBAAoB,GAAA,EAAE,CAAC,qBAAqB,CAAC,IAAoB,GAAmB,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAC3G,YAAa,6CACf,EACF,GACA,CACE,MAAO,qBACP,YAAa,iDACb,SAAU,EACZ,GACC,4ED7BI,OAAM,WAA2B,GAAA,MAAQ,CAAC,WAAW,CAAC,CAC3D,SAAU,OAAO,GAAG,CAAC,gEACrB,WAAY,qBACZ,MAAO,uBACP,YACE,sKACF,SAAU,CAAC,KAAM,KAAM,KAAM,KAAM,KAAK,AAC1C,GAAI,CAoBG,MAAM,WAA2B,GAAA,qBAAuB,CAAC,IAAI,CAClE,GAAA,OAAS,CAAC,GAAA,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBACxB,GAAA,KAAO,CAAC,uBACR,WAAW,CAAC,CACZ,SAAU,OAAO,GAAG,CAAC,gEACrB,WAAY,qBACZ,MAAO,uBACP,YACE,mKACF,SAAU,CACR,GAAA,EAAE,CAAC,WAAW,CAAC,MACf,GAAA,EAAE,CAAC,WAAW,CAAC,MACf,GAAA,EAAE,CAAC,WAAW,CAAC,MACf,GAAA,EAAE,CAAC,WAAW,CAAC,MACf,GAAA,EAAE,CAAC,WAAW,CAAC,MAEnB,AADG,GACC,CA8BG,MAAM,WAAoB,GAAA,eAAiB,CAAC,GAAoB,GAAoB,CACzF,QAAQ,EACR,OAAQ,CAAC,EAAS,EAAG,IACnB,GAAA,GAAe,CAAC,CACd,IAAK,IAAM,GAAA,iBAAmB,CAAC,IAAoB,GACnD,MAAO,IACL,IAAI,GAAA,IAAgB,CAAC,EAAK,EAAS,wEACvC,GACF,OAAQ,CAAC,EAAS,EAAG,IACnB,GAAA,GAAe,CAAC,CACd,IAAK,IAAM,GAAA,iBAAmB,CAAC,IAAoB,GACnD,MAAO,IAAM,IAAI,GAAA,IAAgB,CAAC,EAAK,EAAS,yDAClD,EACJ,GAAG,WAAW,CAAC,CACb,SAAU,OAAO,GAAG,CAAC,yDACrB,WAAY,cACZ,MAAO,8BACP,YACE,8LACJ,GAiBE,OAAgB,WAAa,AAAC,IAE5B,IAAM,EAAY,KAAK,GAAG,CAAC,AADT,GAAA,MAAW,CAAC,IACQ,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAG,GAAG,QAAQ,CAAC,EAAG,KAC3E,OAAO,GAAA,UAAY,CAAC,IAAa,EACnC,CAAE,AACJ,CA+BA,IAAM,GAAkB,CACtB,IACA,GAAA,QAAQ,CACR,IACA,UACA,IACA,GACA,IACA,GACA,IACA,GAAA,aAAe,CAAC,GAAgB,cAAc,EAC9C,IACA,GAAA,MAAQ,CACR,IACA,GAAA,MAAQ,CACR,IACA,GAAA,MAAQ,CACR,IACA,GAAA,EAAE,CAAC,WAAW,CACd,IACA,GAAA,EAAE,CAAC,WAAW,CACd,IACA,GAAA,aAAe,CAAC,GAAgB,MAAM,EACtC,IACA,GAAA,MAAQ,CACT,AAmBM,OAAM,WAA0B,GAAA,eAAiB,IAAI,IAAiB,WAAW,CAAC,CACvF,SAAU,OAAO,GAAG,CAAC,+DACrB,WAAY,oBACZ,MAAO,sBACP,YACE,8LACJ,GAAI,CAiCG,IAAM,GAAmB,GAAA,qBAAuB,IAAI,IAAiB,WAAW,CAAC,CACtF,SAAU,OAAO,GAAG,CAAC,8DACrB,WAAY,mBACZ,MAAO,qBACP,YACE,qKACJ,GAgCa,GAAoB,GAAA,EAAE,CAAC,MAAM,CAAC,CACzC,IAAK,GAAA,QAAQ,CACb,OAAQ,GAAgB,MAAM,CAC9B,iBAAkB,GAClB,eAAgB,GAAgB,cAAc,CAC9C,WAAY,EACZ,iBAAkB,EAClB,gBAAiB,GAAA,MAAQ,CACzB,kBAAmB,GAAA,EAAE,CAAC,aAAa,AACrC,GAAG,WAAW,CAAC,CACb,SAAU,OAAO,GAAG,CAAC,+DACrB,WAAY,oBACZ,MAAO,gCACP,YACE,+LACF,SAAU,CACR,CACE,IAAK,MACL,OAAQ,GAAgB,MAAM,CAAC,IAAI,CAAC,8CACpC,iBAAkB,aAClB,eAAgB,GAAgB,cAAc,CAAC,IAAI,CAAC,sDACpD,WAAY,OACZ,iBAAkB,GAAgB,MAAM,CAAC,IAAI,CAAC,8CAC9C,gBAAiB,SACjB,kBAAmB,KACrB,EACD,AACH,EAsDO,OAAM,WAAmB,GAAA,eAAiB,CAAC,GAAmB,GAAmB,CACtF,QAAQ,EACR,OAAQ,CAAC,EAAG,EAAG,KACb,IAAM,EAAU,GAAA,GAAY,CAAC,IAAI,CAC/B,GAAA,OAAc,CAAC,AAAC,GACd,GAAA,OAAc,CACZ,GAAA,GAAU,CAAC,CACT,GAAA,OAAc,CAAC,GACf,GAAA,OAAc,CAAC,GAAY,UAAU,CAAC,EAAE,MAAM,GAC9C,GAAA,MAAQ,CAAC,GAAA,EAAE,CAAC,aAAa,EAAE,EAAE,iBAAiB,EAC9C,GAAA,MAAQ,CAAC,GAAA,EAAE,CAAC,uBAAuB,EAAE,GAAA,UAAmB,CAAC,EAAK,UAC/D,EACD,CAAC,CAAC,EAAK,EAAa,EAAmB,EAAM,GAC3C,GAAA,OAAc,CACZ,GAAA,MAAQ,CAAC,IAAkB,CACzB,IACA,EAAE,GAAG,CACL,IACA,UACA,IACA,EACA,IACA,EAAE,gBAAgB,CAClB,IACA,EAAE,cAAc,CAChB,IACA,EAAE,UAAU,CACZ,IACA,EAAE,gBAAgB,CAClB,IACA,EAAE,eAAe,CACjB,IACA,GAAA,UAAmB,CAAC,EAAK,QACzB,IACA,EACA,IACA,EAAE,MAAM,CACR,IACA,EACD,EACA,AAAD,GAAU,GAAA,MAAQ,CAAC,IAAmB,OAMhD,OAAO,GAAA,GAAU,CAAC,CAChB,IAAK,IAAM,GAAA,OAAc,CAAC,GAC1B,MAAO,AAAC,GAAM,IAAI,GAAA,IAAgB,CAAC,EAAK,EAAG,CAAC,qBAAqB,EAAE,EAAA,CAAG,CACxE,EACF,EACA,OAAQ,CAAC,EAAG,EAAG,KACb,IAAM,EAAU,GAAA,OAAc,CAAC,GAAA,MAAQ,CAAC,IAAkB,GAAI,AAAC,GAC7D,GAAA,OAAc,CACZ,GAAA,GAAU,CAAC,CACT,GAAA,OAAc,CAAC,CAAS,CAAC,EAAE,EAC3B,GAAA,OAAc,CAAC,CAAS,CAAC,EAAE,EAC3B,GAAA,aAAe,CAAC,GAAgB,cAAc,EAAE,CAAS,CAAC,EAAE,EAC5D,GAAA,aAAe,CAAC,GAAY,CAAS,CAAC,GAAG,EACzC,GAAA,aAAe,CAAC,GAAa,CAAS,CAAC,GAAG,EAC1C,GAAA,OAAc,CAAC,CAAS,CAAC,GAAG,EAC5B,GAAA,aAAe,CAAC,GAAgB,MAAM,EAAE,CAAS,CAAC,GAAG,EACrD,GAAA,aAAe,CAAC,GAAA,EAAE,CAAC,aAAa,EAAE,CAAS,CAAC,GAAG,EAChD,EACD,CAAC,CACC,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACD,GACC,GAAA,MAAQ,CAAC,IAAmB,KAC1B,SACA,mBACA,iBACA,EACA,8BACA,EACA,oCACA,CACF,KAIN,OAAO,GAAA,GAAU,CAAC,CAChB,IAAK,IAAM,GAAA,OAAc,CAAC,GAC1B,MAAQ,AAAD,GAAO,IAAI,GAAA,IAAgB,CAAC,EAAK,EAAG,CAAC,6BAA6B,EAAE,EAAA,CAAG,CAChF,EACF,CACF,GAAG,WAAW,CAAC,CACb,SAAU,OAAO,GAAG,CAAC,wDACrB,WAAY,aACZ,MAAO,6BACP,YACE,wRACF,cAAe,4XAQjB,GAAI,mPKteG,IAAM,GAAoB,OAAO,GAAG,CAAC,gCAMrC,OAAM,WAAc,GAAA,KAAO,CAAQ,CAAC,SAAS,CAAC,EACnD,EAAW,GAAgB,MAAM,CAAE,CAEjC,KAAM,GAAA,cAAgB,CAAC,WAAW,CAAC,CACjC,YAAa,iBACf,GAGA,YAAa,GAAA,EAAE,CAAC,oBAAoB,CAClC,GAAA,MAAQ,CAAC,WAAW,CAAC,CACnB,YAAa,mCACf,IAIF,KAAM,GAAA,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CACxB,YAAa,8BACf,GAGA,SAAU,GAAA,EAAE,CAAC,oBAAoB,CAC/B,GAAA,MAAQ,CAAC,WAAW,CAAC,CACnB,YAAa,wCACf,GAEJ,GACA,CACE,MAAO,aACP,YAAa,sDACb,SAAU,EACZ,GACC,sECxCI,IAAM,GAAgB,EAAA,EAAE,CAAC,gBAAgB,CAAC,OAAQ,UAE5C,GAAiB,GAAc,IAAI,CAEnC,GAAuB,GAAc,QAAQ,CAE7C,GAAoB,GAAc,OAExC,AAF+C,OAEzC,WAAmB,GAAc,MAAM,CAAC,WAAW,CAAC,CAC/D,SAAU,OAAO,GAAG,CAAC,oCACrB,WAAY,aACZ,MAAO,cACP,YAAa,+BACf,GACE,OAAgB,QAAU,GAAc,OAAO,AAAC,AAChD,QAAgB,KAAO,GAAc,IAAI,AAAC,AAC1C,QAAgB,gBAAkB,GAAc,OAAO,CAAC,GAAG,CAAC,AAAC,IAAY,CACvE,IADsE,EAC/D,EACP,MAAO,EACT,CAAC,CAAG,AACN,kICpBO,IAAM,GAAc,EAAA,EAAE,CAAC,gBAAgB,CAAC,QAAS,cAAe,OAAQ,SAAU,SAE5E,GAAe,GAAY,IAAI,CAE/B,GAAqB,GAAY,QAAQ,CAEzC,GAAkB,GAAY,OAAO,AAE3C,OAAM,WAAiB,GAAY,MAAM,CAAC,WAAW,CAAC,CAC3D,SAAU,OAAO,GAAG,CAAC,kCACrB,WAAY,WACZ,MAAO,YACP,YAAa,+BACf,GACE,OAAgB,QAAU,GAAY,OAAO,AAAC,AAC9C,QAAgB,KAAO,GAAY,IAAI,AAAC,AAC1C,+JCRO,OAAM,WAAc,GAAA,KAAO,CAAQ,CAAC,SAAS,CAAC,EACnD,EAAW,GAAgB,MAAM,CAAE,CAEjC,KAAM,GAAA,cAAgB,CAAC,WAAW,CAAC,CACjC,YAAa,yBACf,GAGA,MAAO,GAAA,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAC1B,YAAa,0BACf,GAGA,cAAe,GAAA,EAAE,CAAC,eAAe,EAAC,GAGlC,MAAO,GAAA,EAAE,CAAC,oBAAoB,CAC5B,GAAA,MAAQ,CAAC,IAAI,CAAC,GAAA,OAAS,CAAC,mBAAmB,WAAW,CAAC,CACrD,YAAa,iCACf,IAIF,KAAM,GAAA,EAAE,CAAC,qBAAqB,CAAC,IAAU,GAAS,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CACvE,YAAa,+BACf,GAEA,OAAQ,GAAA,EAAE,CAAC,qBAAqB,CAAC,IAAY,GAAW,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAC7E,YAAa,mBACf,GAGA,OAAQ,GAAA,EAAE,CAAC,eAAe,EAAC,GAAO,WAAW,CAAC,CAC5C,YAAa,sCACf,GAGA,UAAW,GAAA,EAAE,CAAC,oBAAoB,CAChC,GAAA,cAAgB,CAAC,WAAW,CAAC,CAC3B,YAAa,gCACf,IAIF,WAAY,GAAA,EAAE,CAAC,oBAAoB,CACjC,GAAA,EAAE,CAAC,gBAAgB,CAAC,CAClB,YAAa,6BACf,IAIF,YAAa,GAAA,EAAE,CAAC,eAAe,EAAC,GAAO,WAAW,CAAC,CACjD,YAAa,6CACf,GAEA,YAAa,GAAA,EAAE,CAAC,oBAAoB,CAClC,GAAA,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CACnB,YAAa,yBACf,IAGF,oBAAqB,GAAA,EAAE,CAAC,eAAe,EAAC,GAAO,WAAW,CAAC,CACzD,YAAa,mDACf,GAGA,iBAAkB,GAAA,EAAE,CAAC,eAAe,EAAC,GAAO,WAAW,CAAC,CACtD,YAAa,4DACf,GAEA,SAAU,GAAA,EAAE,CAAC,oBAAoB,CAC/B,GAAA,qBAAuB,CAAC,IAAI,CAAC,GAAA,UAAY,IAAI,WAAW,CAAC,CACvD,YAAa,qBACf,IAGF,gBAAiB,GAAA,EAAE,CAAC,oBAAoB,CACtC,GAAA,qBAAuB,CAAC,WAAW,CAAC,CAClC,YAAa,yBACf,IAIF,iBAAkB,GAAA,EAAE,CAAC,oBAAoB,CACvC,GAAA,cAAgB,CAAC,WAAW,CAAC,CAC3B,YAAa,4CACf,IAGF,gBAAiB,GAAA,EAAE,CAAC,oBAAoB,CACtC,GAAA,cAAgB,CAAC,WAAW,CAAC,CAC3B,YAAa,8BACf,GAEJ,GACA,CACE,MAAO,aACP,YAAa,kFACb,SAAU,OAAO,GAAG,CAAC,6BACvB,GACC,uCC9GH,GAAA,EAAA,CAAA,CAAA,OAIO,OAAM,WAAgB,GAAA,EAAE,CAAC,KAAK,CAAU,WAC7C,GAAM,MAAM,CAAC,IAAI,CAAC,QAAS,OAAQ,WAAY,cAAe,SAAU,mBACxE,CACE,SAAU,OAAO,GAAG,CAAC,iCACrB,MAAO,WACP,YAAa,yBACf,GAEA,OAAgB,OAAS,AAAC,GACxB,GAAM,MAAM,CAAC,IAAI,CAAC,CAChB,MAAO,EAAM,KAAK,CAClB,KAAM,EAAM,IAAI,CAChB,SAAU,EAAM,QAAQ,CACxB,YAAa,EAAM,WAAW,CAC9B,OAAQ,EAAM,MAAM,CACpB,gBAAiB,EAAM,eAAe,CACtC,eAAe,EACf,qBAAqB,EACrB,QAAQ,EACR,UAAW,GAAA,IAAM,CAAC,UAClB,UAAW,GAAA,IAAM,CAAC,UAClB,OAAQ,GAAA,IAAM,CAAC,UACjB,EAAG,AACP,6EC5BA,EAAA,CAAA,CAAA,OAAA,IAAA,GAAA,EAAA,CAAA,CAAA,QACA,GAAA,EAAA,CAAA,CAAA,QAKA,IAAM,GAAO,GAAA,WAAW,CAAC,UAAU,CAAC,SAC9B,GAAS,GAAK,KAAK,CAAC,WACpB,GAAS,GAAK,KAAK,CAAC,WACpB,GAAiB,GAAK,KAAK,CAAC,mBAC5B,GAAuB,GAAK,KAAK,CAAC,0BAClC,GAAgB,GAAK,KAAK,CAAC,kBAC3B,GAAc,GAAK,KAAK,CAAC,gBACzB,GAAc,GAAK,KAAK,CAAC,gBACzB,GAAoB,GAAY,KAAK,CAAC,UACtC,GAAmB,GAAK,KAAK,CAAC,qBAC9B,GAAU,GAAK,KAAK,CAAC,WACrB,GAAgB,GAAQ,KAAK,CAAC,UAC9B,GAAkB,GAAQ,KAAK,CAAC,YAChC,GAAY,GAAK,KAAK,CAAC,aACvB,GAAmB,GAAU,KAAK,CAAC,WACnC,GAAU,GAAK,KAAK,CAAC,YACrB,GAAe,GAAK,KAAK,CAAC,kBAC1B,GAAuB,GAAa,KAAK,CAAC,YAC1C,GAAqB,GAAa,KAAK,CAAC,UACxC,GAAW,GAAK,KAAK,CAAC,QACtB,GAAc,GAAS,KAAK,CAAC,WAC7B,GAAa,GAAS,KAAK,CAAC,UAC5B,GAAQ,GAAK,KAAK,CAAC,SACnB,GAAgB,GAAM,KAAK,CAAC,YAC5B,GAAe,GAAM,KAAK,CAAC,WAC3B,GAAa,GAAM,KAAK,CAAC,SACzB,GAAgB,GAAM,KAAK,CAAC,YAC5B,GAAY,GAAM,KAAK,CAAC,QAExB,GAAe,GAAK,KAAK,CAAC,YAC1B,GAAa,GAAK,KAAK,CAAC,UACxB,GAAc,GAAK,KAAK,CAAC,WACzB,GAAc,GAAK,KAAK,CAAC,WACzB,GAAY,GAAK,KAAK,CAAC,cACvB,GAAqB,GAAU,KAAK,CAAC,aACrC,GAAe,GAAU,KAAK,CAAC,OAC/B,GAAgB,GAAU,KAAK,CAAC,QAChC,GAAoB,GAAU,KAAK,CAAC,YACpC,GAAuB,GAAU,KAAK,CAAC,gBACvC,GAAmB,GAAU,KAAK,CAAC,WACnC,GAAS,GAAK,KAAK,CAAC,UACpB,GAAc,GAAO,KAAK,CAAC,SAC3B,GAAa,GAAO,KAAK,CAAC,QAC1B,GAAe,GAAO,KAAK,CAAC,UAC5B,GAAe,GAAO,KAAK,CAAC,UAE5B,GAAY,GAAA,WAAW,CAAC,UAAU,CAAC,cACnC,GAAmB,GAAU,KAAK,CAAC,WACnC,GAA4B,GAAiB,KAAK,CAAC,aACnD,GAAyB,GAAiB,KAAK,CAAC,UAChD,GAA0B,GAAiB,KAAK,CAAC,WACjD,GAAyB,GAAiB,KAAK,CAAC,UAChD,GAA0B,GAAiB,KAAK,CAAC,WACjD,GAAoB,GAAU,KAAK,CAAC,YACpC,GAA4B,GAAkB,KAAK,CAAC,YACpD,GAA2B,GAAkB,KAAK,CAAC,WACnD,GAA4B,GAAkB,KAAK,CAAC,YACpD,GAA6B,GAAkB,KAAK,CAAC,cACrD,GAA4B,GAAkB,KAAK,CAAC,kBACpD,GAAuB,GAAkB,KAAK,CAAC,OAC/C,GAAmB,GAAU,KAAK,CAAC,YACnC,GAAyB,GAAiB,KAAK,CAAC,OAEhD,GAAiB,GAAU,KAAK,CAAC,SACjC,GAAsB,GAAe,KAAK,CAAC,SAE3C,GAAoB,GAAe,KAAK,CAAC,OAEzC,GAAqB,GAAe,KAAK,CAAC,QAE1C,GAA4B,GAAe,KAAK,CAAC,eACjD,GAA6B,GAAe,KAAK,CAAC,iBAElD,GAAO,GAAU,KAAK,CAAC,QACvB,GAAc,GAAU,KAAK,CAAC,gBAE9B,GAAS,GAAA,WAAW,CAAC,UAAU,CAAC,WAChC,GAAkB,GAAO,KAAK,CAAC,aAC/B,GAAgB,GAAO,KAAK,CAAC,WAC7B,GAAiB,GAAO,KAAK,CAAC,YAC9B,GAAiB,GAAO,KAAK,CAAC,YAC9B,GAAgB,GAAO,KAAK,CAAC,WAE7B,GAAU,GAAA,WAAW,CAAC,UAAU,CAAC,QACjC,GAAU,GAAQ,KAAK,CAAC,QACxB,GAAc,GAAQ,KAAK,CAAC,QAC5B,GAAgB,GAAQ,KAAK,CAAC,UAC9B,GAAY,GAAQ,KAAK,CAAC,UAC1B,GAAqB,GAAU,KAAK,CAAC,aACrC,GAAiB,GAAU,KAAK,CAAC,SACjC,GAAoB,GAAU,KAAK,CAAC,YACpC,GAAoB,GAAU,KAAK,CAAC,YACpC,GAAkB,GAAU,KAAK,CAAC,UAO3B,GAAQ,GAAA,WAAW,CAAC,UAAU,CAAC,CAE1C,KAAM,IACN,WAAY,eACZ,YAAa,eACb,QAAS,WACT,QAAS,WACT,MAAO,YACP,QAAS,cACT,KAAM,QACN,MAAO,SACP,QAAS,kBAET,KAAM,CACJ,OAAQ,GAAO,IAAI,CACnB,OAAQ,GAAO,IAAI,CACnB,QAAS,GAAQ,IAAI,CACrB,eAAgB,GAAe,IAAI,CACnC,qBAAsB,GAAqB,IAAI,CAC/C,cAAe,GAAc,IAAI,CACjC,OAAQ,GAAW,IAAI,CACvB,QAAS,GAAY,IAAI,CACzB,QAAS,GAAY,IAAI,CACzB,SAAU,GAAa,IAAI,CAC3B,aAAc,CACZ,MAAO,GAAA,IAAM,CACX,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,OAAQ,AAAC,GACP,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,CACF,GACF,SAAU,CAAC,EAAe,IACxB,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,cACA,CACF,GACF,MAAO,AAAC,GACN,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,CAClC,MAAO,CACT,GACF,OAAQ,AAAC,GACP,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACJ,CAAC,EAEL,MAAO,GAAA,IAAM,CACX,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,OAAS,AAAD,GACN,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,MAClC,CACF,GACF,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACF,MAAO,AAAC,GACN,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,CAClC,MAAO,CACT,GACF,OAAQ,GAAkB,IAAI,CAChC,CAAC,CAEP,EACA,UAAW,GAAA,IAAM,CACf,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,UAAW,GAAA,IAAM,CACf,GACA,AAAC,IACE,CACC,KAAM,EADR,AACkB,IAAI,CACpB,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAU,IAAI,EAAE,OACzC,CACF,GACF,cAAgB,AAAD,GACb,GAAA,WAAW,CAAC,cAAc,CAAC,EAAU,IAAI,EAAE,OACzC,EACA,YAAa,MACf,GACJ,CAAC,EAEL,IAAK,GAAA,IAAM,CACT,GACA,AAAC,IACE,CACC,CADF,IACQ,EAAI,IAAI,CACd,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAI,IAAI,EAAE,QACnC,CACF,GACF,MAAO,AAAC,GACN,GAAA,WAAW,CAAC,cAAc,CAAC,EAAI,IAAI,EAAE,CACnC,MAAO,CACT,GACJ,CAAC,EAEL,KAAM,GAAA,IAAM,CACV,GACC,AAAD,IACG,CACC,KAAM,EADR,AACkB,IAAI,CACpB,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAU,IAAI,EAAE,OACzC,CACF,GACF,MAAQ,AAAD,GACL,GAAA,WAAW,CAAC,cAAc,CAAC,EAAU,IAAI,EAAE,CACzC,MAAO,CACT,GACJ,CAAC,EAEL,SAAU,GAAA,IAAM,CACd,GACA,AAAC,IACE,CACC,KAAM,CADR,CACiB,IAAI,CACnB,OAAQ,EAAS,UACjB,UAAY,AAAD,GACT,GAAA,WAAW,CAAC,cAAc,CAAC,EAAS,IAAI,EAAE,OACxC,CACF,GACJ,CAAC,EAEL,YAAa,CACX,KAAM,GAAqB,IAAI,AACjC,EACA,QAAS,CACP,KAAM,GAAiB,IAAI,AAC7B,EACF,CAAC,EAEL,iBAAkB,GAAiB,IAAI,CACvC,OAAQ,CACN,KAAM,GAAO,IAAI,CACjB,MAAO,GAAY,IAAI,CACvB,KAAM,GAAW,IAAI,CACrB,OAAQ,GAAa,IAAI,CACzB,OAAQ,GAAa,IAAI,CACzB,QAAS,GAAO,WAChB,OAAQ,GAAO,UACf,QAAS,GAAO,WAChB,aAAe,AAAD,GACZ,GAAA,WAAW,CAAC,cAAc,CAAC,GAAO,IAAI,EAAE,UACtC,CACF,EACJ,EACA,QAAS,GAAQ,IAAI,CACrB,UAAW,GAAU,IAAI,CACzB,MAAO,GAAM,IAAI,CACjB,aAAc,GAAa,IAAI,CAC/B,KAAM,GAAS,IAAI,CACnB,OAAQ,CACN,OAAQ,GAAA,IAAM,CACZ,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,aAAc,AAAC,GACb,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,aAClC,CACF,GACF,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACF,sBAAuB,CAAC,EAAqB,IAC3C,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,aAClC,EACA,QACF,GACF,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,CAClC,MAAO,CACT,GACF,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,CACF,GACJ,CAAC,EAEL,OAAQ,GAAA,IAAM,CACZ,GACC,AAAD,GACG,EAAD,AACE,KAAM,EAAG,IAAI,CACb,aAAc,AAAC,GACb,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,aAClC,CACF,GACF,WAAa,AAAD,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACF,SAAU,AAAC,GACT,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,MAClC,CACF,GACF,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACJ,CAAC,EAEL,qBAAsB,GAAA,IAAM,CAC1B,GACA,AAAC,IACE,CACC,CADF,IACQ,EAAI,IAAI,CACd,WAAa,AAAD,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAI,IAAI,EAAE,CACnC,QACF,GACF,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAI,IAAI,EAAE,OACnC,CACF,EACJ,CAAC,GAEL,cAAe,GAAA,IAAM,CACnB,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,CACF,GACF,mBAAoB,CAAC,EAAe,IAClC,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,SACA,CACF,GACF,kBAAmB,CAAC,EAAe,IACjC,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,QACA,CACF,GACF,qBAAsB,CAAC,EAAe,IACpC,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,cACA,CACF,GACJ,CAAC,EAEL,iBAAkB,GAAA,IAAM,CACtB,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,MAAO,GAAA,WAAW,CAAC,WAAW,CAAC,EAAG,IAAI,EACtC,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,QAClC,CACF,GACJ,CAAC,EAEL,MAAO,CACL,KAAM,GAAM,IAAI,CAChB,SAAU,GAAc,IAAI,CAC5B,QAAS,GAAa,IAAI,CAC1B,MAAO,GAAW,IAAI,CACtB,SAAU,GAAc,IAAI,CAC5B,KAAM,GAAU,IAAI,CACpB,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,GAAM,IAAI,EAAE,OACrC,CACF,GACF,SAAU,GAAA,IAAM,CA5VF,AAAC,AA6Vb,GA7VoC,GAAM,KAAK,CAAC,GA8VhD,AAAC,IACE,CACC,KAAM,CADR,CACiB,IAAI,CACnB,SAAU,EAAS,YACnB,KAAM,EAAS,QACf,SAAU,EAAS,YACnB,MAAO,EAAS,SAClB,CAAC,CAEP,EACA,QAAS,GAAA,IAAM,CACb,GACA,AAAC,IACE,CAAD,AACE,KAAM,EAAG,IAAI,CACb,OAAQ,GAAc,IAAI,CAC1B,SAAU,GAAgB,IAAI,CAC9B,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,OAClC,CACF,GACF,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,EAAG,IAAI,EAAE,CAClC,MAAO,CACT,EACJ,CAAC,GAEL,UAAW,GAAA,IAAM,CACf,GACC,AAAD,GACG,EACC,EADF,GACQ,EAAK,IAAI,CACf,QAAS,GAAiB,IAAI,CAC9B,aAAc,AAAC,GACb,GAAA,WAAW,CAAC,cAAc,CAAC,EAAK,IAAI,EAAE,aACpC,CACF,GACJ,CAAC,EAEL,aAAc,GAAA,IAAM,CAClB,GACA,AAAC,IACE,CACC,CADF,IACQ,EAAI,IAAI,CACd,SAAU,GAAqB,IAAI,CACnC,OAAQ,GAAmB,IAAI,CAC/B,UAAW,AAAC,GACV,GAAA,WAAW,CAAC,cAAc,CAAC,GAAmB,IAAI,EAAE,OAClD,CACF,GACF,WAAY,AAAC,GACX,GAAA,WAAW,CAAC,cAAc,CAAC,EAAI,IAAI,EAAE,QACnC,CACF,GACJ,CAAC,EAEL,KAAM,GAAA,IAAM,CACV,GACA,AAAC,IACE,CACC,EADF,GACQ,EAAK,IAAI,CACf,QAAS,GAAY,IAAI,CACzB,OAAQ,GAAW,IAAI,CACvB,aAAc,AAAC,GACb,GAAA,WAAW,CAAC,cAAc,CAAC,EAAK,IAAI,EAAE,UACpC,CACF,GACJ,CAAC,CAEP,CACF,EACA,SAAU,CACR,KAAM,WACR,EACA,MAAO,CACL,KAAM,QACR,EACA,cAAe,CACb,KAAM,iBACN,GAAG,GAAA,IAAM,CA9XS,AA8XR,AA9XO,GAA6C,GAAA,WAAW,CAAC,UAAU,CAAC,kBAAkB,KAAK,CAAC,GA8XrF,AAAC,IAAM,AAAC,CAC9B,KAAM,EAAE,IAAI,CACZ,KAAM,EAAE,QACR,QAAS,EAAE,WACX,SAAU,EAAE,YACZ,QAAS,EAAE,WACX,YAAa,EAAE,eACf,SAAU,EAAE,YACd,CAAC,CAAE,AACL,EACA,QAAS,GAAA,IAAM,CAtaD,AAAC,AAsaC,GAtamC,GAAA,WAAW,CAAC,UAAU,CAAC,YAAY,KAAK,CAAC,GAsanE,AAAC,IAAM,AAAC,CAC/B,KAAM,EAAE,IAAI,CACZ,KAAM,EAAE,QACR,SAAU,EAAE,YACZ,YAAa,EAAE,eACf,cAAe,EAAE,iBACjB,SAAU,EAAE,YACZ,QAAS,EAAE,WACX,QAAS,EAAE,YACX,SAAU,EAAE,YACZ,UAAW,EAAE,cACb,cAAe,EAAE,kBACjB,IAAK,EAAE,OACT,CAAC,EACD,YAAa,CACX,KAAM,GAAY,IAAI,AACxB,EAEA,UAAW,CACT,KAAM,GAAU,IAAI,CACpB,KAAM,CACJ,KAAM,GAAK,IAAI,CACf,QAAS,GAAK,WACd,KAAM,AAAC,GAAoC,GAAK,KAAK,CAAC,GAAI,OAC5D,EACA,SAAU,CACR,KAAM,GAAkB,IAAI,CAC5B,SAAU,GAA0B,IAAI,CACxC,QAAS,GAAyB,IAAI,CACtC,SAAU,GAA0B,IAAI,CACxC,UAAW,GAA2B,IAAI,CAC1C,cAAe,GAA0B,IAAI,CAC7C,IAAK,GAAqB,IAAI,AAChC,EACA,QAAS,CACP,KAAM,GAAiB,IAAI,CAC3B,UAAW,GAA0B,IAAI,CACzC,OAAQ,GAAuB,IAAI,CACnC,QAAS,GAAwB,IAAI,CACrC,OAAQ,GAAuB,IAAI,CACnC,QAAS,GAAwB,IAAI,AACvC,EACA,QAAS,CACP,KAAM,GAAiB,IAAI,CAC3B,OAAQ,GAAuB,IAAI,CACnC,OAAQ,GAAA,IAAM,CAlcI,AAAC,AAmcjB,GAncmC,GAAiB,KAAK,CAAC,GAoczD,AAAD,GACG,EACC,IADF,CACQ,EAAO,IAAI,CACjB,KAAM,EAAO,QACb,OAAQ,EAAO,UACjB,CAAC,CAEP,EACA,MAAO,CACL,KAAM,GAAe,IAAI,CACzB,YAAa,GAA0B,IAAI,CAC3C,MAAO,CACL,KAAM,GAAoB,IAAI,CAC9B,OAAQ,GAAoB,UAC5B,OAAQ,GAAA,IAAM,CA/cM,AAgdlB,AAhdiB,GAAqC,GAAoB,KAAK,CAAC,GAidhF,AAAC,GACE,EACC,KAAM,EADR,AACkB,IAAI,CACpB,KAAM,EAAU,QAChB,SAAU,EAAU,YACpB,YAAa,EAAU,eACvB,cAAe,EAAU,kBACzB,eAAgB,EAAU,mBAC1B,IAAK,EAAU,OACf,MAAO,EAAU,SACjB,YAAa,EAAU,eACzB,CAAC,CAEP,EACA,IAAK,CACH,KAAM,GAAkB,IAAI,CAC5B,OAAQ,GAAkB,OAC1B,SAAU,GAAA,IAAM,CACd,AAjewB,AAAC,GAAuB,GAAkB,KAAK,CAAC,GAkexE,AAAC,IACE,CACC,KAAM,CADR,CACiB,IAAI,CACnB,SAAU,EAAS,YACnB,OAAQ,EAAS,UACnB,CAAC,CAEP,EACA,KAAM,CACJ,KAAM,GAAmB,IAAI,CAC7B,SAAU,GAAmB,YAC7B,OAAQ,GAAA,IAAM,CA3eW,AAAC,AA4exB,GA5e6C,GAAmB,KAAK,CAAC,GA6etE,AAAC,IACE,CACC,IADF,CACQ,EAAO,IAAI,CACjB,KAAM,EAAO,QACb,QAAS,EAAO,WAClB,CAAC,CAEP,EACA,aAAc,CACZ,KAAM,GAA2B,IAAI,CACrC,OAAQ,GAAA,IAAM,CApfY,AAAC,AAqfzB,GArf8C,GAA2B,KAAK,CAAC,GAsf/E,AAAC,IACE,CACC,IADF,CACQ,EAAO,IAAI,CACjB,OAAQ,EAAO,UACjB,CAAC,CAEP,CACF,CACF,EACA,OAAQ,CACN,KAAM,GAAO,IAAI,CACjB,UAAW,GAAgB,IAAI,CAC/B,QAAS,GAAc,IAAI,CAC3B,SAAU,GAAe,IAAI,CAC7B,SAAU,GAAe,IAAI,CAC7B,QAAS,CACP,KAAM,GAAc,IAAI,CACxB,OAAQ,GAAA,IAAM,CA7fC,AAAC,AA8fd,GA9fmC,GAAc,KAAK,CAAC,GA+fvD,AAAC,IACE,CACC,IADF,CACQ,EAAO,IAAI,CACjB,KAAM,EAAO,QACb,QAAS,EAAO,WAClB,CAAC,CAEP,CACF,EACA,IAAK,CACH,KAAM,GAAQ,IAAI,CAClB,KAAM,CACJ,KAAM,GAAQ,IAAI,CAClB,KAAM,GAAY,IAAI,CACtB,OAAQ,CACN,KAAM,GAAc,IAAI,AAC1B,CACF,EACA,OAAQ,CACN,KAAM,GAAU,IAAI,CACpB,UAAW,GAAmB,IAAI,CAClC,MAAO,GAAe,IAAI,CAC1B,SAAU,GAAkB,IAAI,CAChC,SAAU,GAAkB,IAAI,CAChC,OAAQ,GAAA,IAAM,CA5gBM,AA6gBlB,AA7gBmB,GAAqB,GAAgB,KAAK,CAAC,GA8gB9D,AAAC,IACE,CACC,IADF,CACQ,EAAO,IAAI,CACnB,CAAC,CAEP,CACF,CACF"}