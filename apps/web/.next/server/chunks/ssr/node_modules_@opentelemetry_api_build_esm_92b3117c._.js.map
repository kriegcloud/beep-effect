{"version":3,"sources":["turbopack:///[project]/node_modules/@opentelemetry/api/src/context/context.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/context-api.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/context/NoopContextManager.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/api/context.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/version.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/internal/global-utils.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/platform/node/globalThis.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/diag/types.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/diag-api.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/internal/semver.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/api/diag.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/baggage/utils.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/api/propagation.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/baggage/context-helpers.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/propagation-api.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/trace_flags.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/api/trace.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/NoopTracer.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/context-utils.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace-api.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/metrics/Metric.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/SamplingResult.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/status.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/span_kind.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/internal/tracestate-validators.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/internal/tracestate-impl.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/trace/internal/utils.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/metrics/NoopMeter.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/diag/consoleLogger.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/metrics/NoopMeterProvider.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/api/metrics.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/index.ts","turbopack:///[project]/node_modules/@opentelemetry/api/src/metrics-api.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.9.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface DiagLoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link DiagLoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: DiagLoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\nimport { Link } from './link';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  addLink(_link: Link): this {\n    return this;\n  }\n\n  addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Advisory options influencing aggregation configuration parameters.\n * @experimental\n */\nexport interface MetricAdvice {\n  /**\n   * Hint the explicit bucket boundaries for SDK if the metric is been\n   * aggregated with a HistogramAggregator.\n   */\n  explicitBucketBoundaries?: number[];\n}\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n\n  /**\n   * The advice influencing aggregation configuration parameters.\n   * @experimental\n   */\n  advice?: MetricAdvice;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Gauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n/**\n * @deprecated please use {@link Attributes}\n */\nexport type MetricAttributes = Attributes;\n\n/**\n * @deprecated please use {@link AttributeValue}\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: ObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: BatchObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\nexport interface Observable<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableGauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { validateKey, validateValue } from './tracestate-validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceStateImpl implements TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceStateImpl {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceStateImpl {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceStateImpl {\n    const traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceState } from '../trace_state';\nimport { TraceStateImpl } from './tracestate-impl';\n\nexport function createTraceState(rawTraceState?: string): TraceState {\n  return new TraceStateImpl(rawTraceState);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Gauge,\n  Histogram,\n  MetricAttributes,\n  MetricOptions,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createGauge}\n   */\n  createGauge(_name: string, _options?: MetricOptions): Gauge {\n    return NOOP_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopGaugeMetric extends NoopMetric implements Gauge {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogger, DiagLogFunction } from './types';\n\ntype ConsoleMapKeys = 'error' | 'warn' | 'info' | 'debug' | 'trace';\nconst consoleMap: { n: keyof DiagLogger; c: ConsoleMapKeys }[] = [\n  { n: 'error', c: 'error' },\n  { n: 'warn', c: 'warn' },\n  { n: 'info', c: 'info' },\n  { n: 'debug', c: 'debug' },\n  { n: 'verbose', c: 'trace' },\n];\n\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nexport class DiagConsoleLogger implements DiagLogger {\n  constructor() {\n    function _consoleFunc(funcName: ConsoleMapKeys): DiagLogFunction {\n      return function (...args) {\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          let theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n\n    for (let i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  public error!: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  public warn!: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  public info!: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario. Useful scenarios would be to log the execution\n   * order of async operations\n   */\n  public debug!: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  public verbose!: DiagLogFunction;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from './Meter';\nimport { MeterProvider } from './MeterProvider';\nimport { NOOP_METER } from './NoopMeter';\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nexport class NoopMeterProvider implements MeterProvider {\n  getMeter(_name: string, _version?: string, _options?: MeterOptions): Meter {\n    return NOOP_METER;\n  }\n}\n\nexport const NOOP_METER_PROVIDER = new NoopMeterProvider();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter, MeterOptions } from '../metrics/Meter';\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'metrics';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nexport class MetricsAPI {\n  private static _instance?: MetricsAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Metrics API */\n  public static getInstance(): MetricsAPI {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  public setGlobalMeterProvider(provider: MeterProvider): boolean {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  }\n\n  /**\n   * Returns the global meter provider.\n   */\n  public getMeterProvider(): MeterProvider {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  }\n\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  public getMeter(\n    name: string,\n    version?: string,\n    options?: MeterOptions\n  ): Meter {\n    return this.getMeterProvider().getMeter(name, version, options);\n  }\n\n  /** Remove the global meter provider */\n  public disable(): void {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BaggageEntry, BaggageEntryMetadata, Baggage } from './baggage/types';\nexport { baggageEntryMetadataFromString } from './baggage/utils';\nexport { Exception } from './common/Exception';\nexport { HrTime, TimeInput } from './common/Time';\nexport { Attributes, AttributeValue } from './common/Attributes';\n\n// Context APIs\nexport { createContextKey, ROOT_CONTEXT } from './context/context';\nexport { Context, ContextManager } from './context/types';\nexport type { ContextAPI } from './api/context';\n\n// Diag APIs\nexport { DiagConsoleLogger } from './diag/consoleLogger';\nexport {\n  DiagLogFunction,\n  DiagLogger,\n  DiagLogLevel,\n  ComponentLoggerOptions,\n  DiagLoggerOptions,\n} from './diag/types';\nexport type { DiagAPI } from './api/diag';\n\n// Metrics APIs\nexport { createNoopMeter } from './metrics/NoopMeter';\nexport { MeterOptions, Meter } from './metrics/Meter';\nexport { MeterProvider } from './metrics/MeterProvider';\nexport {\n  ValueType,\n  Counter,\n  Gauge,\n  Histogram,\n  MetricOptions,\n  Observable,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n  BatchObservableCallback,\n  MetricAdvice,\n  MetricAttributes,\n  MetricAttributeValue,\n  ObservableCallback,\n} from './metrics/Metric';\nexport {\n  BatchObservableResult,\n  ObservableResult,\n} from './metrics/ObservableResult';\nexport type { MetricsAPI } from './api/metrics';\n\n// Propagation APIs\nexport {\n  TextMapPropagator,\n  TextMapSetter,\n  TextMapGetter,\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n} from './propagation/TextMapPropagator';\nexport type { PropagationAPI } from './api/propagation';\n\n// Trace APIs\nexport { SpanAttributes, SpanAttributeValue } from './trace/attributes';\nexport { Link } from './trace/link';\nexport { ProxyTracer, TracerDelegator } from './trace/ProxyTracer';\nexport { ProxyTracerProvider } from './trace/ProxyTracerProvider';\nexport { Sampler } from './trace/Sampler';\nexport { SamplingDecision, SamplingResult } from './trace/SamplingResult';\nexport { SpanContext } from './trace/span_context';\nexport { SpanKind } from './trace/span_kind';\nexport { Span } from './trace/span';\nexport { SpanOptions } from './trace/SpanOptions';\nexport { SpanStatus, SpanStatusCode } from './trace/status';\nexport { TraceFlags } from './trace/trace_flags';\nexport { TraceState } from './trace/trace_state';\nexport { createTraceState } from './trace/internal/utils';\nexport { TracerProvider } from './trace/tracer_provider';\nexport { Tracer } from './trace/tracer';\nexport { TracerOptions } from './trace/tracer_options';\nexport {\n  isSpanContextValid,\n  isValidTraceId,\n  isValidSpanId,\n} from './trace/spancontext-utils';\nexport {\n  INVALID_SPANID,\n  INVALID_TRACEID,\n  INVALID_SPAN_CONTEXT,\n} from './trace/invalid-span-constants';\nexport type { TraceAPI } from './api/trace';\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { context } from './context-api';\nimport { diag } from './diag-api';\nimport { metrics } from './metrics-api';\nimport { propagation } from './propagation-api';\nimport { trace } from './trace-api';\n\n// Named export.\nexport { context, diag, metrics, propagation, trace };\n// Default export.\nexport default {\n  context,\n  diag,\n  metrics,\n  propagation,\n  trace,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { MetricsAPI } from './api/metrics';\n/** Entrypoint for metrics API */\nexport const metrics = MetricsAPI.getInstance();\n"],"names":[],"mappings":"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AAA,EAAA,CAAA,SAAkB,CAAA,+ECHpB,IAAA,EEA4C,CCCrC,AECA,AHFA,ADDA,AKCA,ANAA,AOCA,ACEA,AJHA,CHDyC,AOIgB,CDFvD,ALDA,AMGA,AFHA,AHCA,ACDA,AHDA,AIGA,ALDP,AQE8D,CCHM,ETGpD,CMHmC,CAAC,ALDoB,CAAC,ADK1E,GAHU,CEDQ,ACCA,ACDA,AGCA,CPCjB,AKAkB,CLEb,AGHc,AIAA,ALDA,AEAA,CCEC,CGCyC,APJxC,COIyC,CFHvC,ALDA,EGCE,AFAA,AIAA,AHCA,AIAA,APGM,CKFL,ALEM,CQDL,EAAE,EFHE,CNEjB,EACd,CQAmC,GPJG,CGCC,ADCA,CAAC,AFFA,AMEA,AHDA,CGCC,AFCA,AHFA,CGEC,AHFA,gBKG/B,EJII,EAAA,iBIHJ,EAAkB,IEFd,EAAE,AHGA,EAAE,ELDI,CIEC,CHHD,AODA,uBFGZ,ENAW,CMCtB,ENCI,AQHA,GTSM,EACV,CORS,ANDa,CCKR,qBKFF,EAAA,UAAU,CAAC,IAAA,6GCOvB,EPJI,OAAA,EOKe,CAAgD,EAAhD,CLCA,CAAiB,GKDjB,GAAA,CAAA,IAAA,EPJmB,AAAD,CAAC,EOInB,IAAA,CAAA,YAAY,CAAZ,EAmDrB,8BA/Ca,CAAX,kBACS,GFHM,CAAA,CAAA,YAAA,EEOf,EAAA,SAAA,CAAA,YAAY,CAAZ,SAAa,CAAY,CAAE,CAAe,SACjC,IAAI,AACb,CADc,ALSb,AKRA,CFHG,CHUY,yBKJhB,CNCwC,CAAC,OMD3B,CAA2B,EACvC,OAAO,IAAI,CAAC,+BAIL,CAAa,CAAE,CAA4B,SAC3C,IAAA,qBAGF,CAAP,SAAQ,CAAW,SACV,CNoB0B,CAAC,CIzBtB,CAAA,EEQd,CHLC,CAAA,SAAA,CAAA,QGKO,CAAR,SAAS,CAAc,SACd,IAAI,AACb,CADc,AACb,CNmBc,qBMhBN,CAAT,SAAU,CAAmB,SACpB,IAAI,AACb,CADc,AACb,AHHF,CHoBmB,AMdlB,EAAA,SAAA,CAAA,UAAU,CAAV,SAAW,CAAa,EACtB,OAAA,IAAW,CAAC,CAId,ANYkB,CAAC,AFZH,CQAhB,ARAiB,SQAjB,CAAA,GAAG,CAAH,SA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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44]}