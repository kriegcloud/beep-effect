You are starting a fresh Codex CLI session in the `beep-effect` monorepo.
Your mission: document every Better Auth execution-boundary client method so it can be instrumented.
Work from the existing `BETTER_AUTH_CLIENT_AND_METHODS_LIST.md` at repo root and extend it section by section.

Global guardrails:
- Prefer Context7 Better Auth docs (e.g. https://www.better-auth.com/llms.txt) or the local `node_modules/better-auth` sources to confirm method behaviour.
- Treat execution boundaries as any client method that returns a `Promise` / `BetterFetchResponse` requiring runtime execution via `packages/runtime/client/src/services/runtime/live-layer.ts`.
- Follow project import conventions (`effect` namespace imports, no native array/string helpers) when touching code.
- Do not run long-lived dev servers; suggest commands instead (e.g. `bun run dev`).

Preparation checklist:
- [ ] Open `packages/iam/sdk/src/adapters/better-auth/client.ts` to confirm which client plugins are wired.
- [ ] Keep `packages/iam/infra/src/adapters/better-auth/plugins/plugins.ts` visible as the source of truth for plugin coverage.
- [ ] Skim existing sections in `BETTER_AUTH_CLIENT_AND_METHODS_LIST.md` to mirror tone and detail.

For each plugin below, repeat the workflow:
1. Research
   - [ ] Locate the client pluginâ€™s exported actions (Context7 docs, SDK source, or `node_modules/better-auth/dist/**`).
   - [ ] Identify every method that kicks off a network call / wraps `BetterFetch` / otherwise yields a `Promise`.
   - [ ] Capture return payload shape and documented error structures (codes, HTTP statuses, tagged errors).
2. Document
   - [ ] Add or update the Markdown section `## <plugin-name>` (use lowercase kebab for headings; `base` is reserved for core methods).
   - [ ] Append unchecked checkbox items named exactly as they would appear when exposed through `packages/iam/sdk/src/clients/...` (e.g. `auth.pluginName.method`).
   - [ ] Include a Context7 or upstream doc link per item, plus concise description, outputs, and error notes.
   - [ ] Preserve alphabetical ordering of sections and keep formatting consistent with existing entries.
3. Verify
   - [ ] Re-read the new section to ensure every execution boundary is captured once.
   - [ ] `git diff` the Markdown file to sanity-check the edit footprint.

Plugin roster to process (mark off as you finish documenting each section):
- [ ] admin
- [ ] anonymous
- [ ] api-key
- [ ] bearer
- [ ] captcha
- [ ] custom-session
- [ ] device-authorization
- [ ] dub-analytics
- [ ] generic-oauth
- [ ] have-i-been-pwned
- [ ] jwt
- [ ] last-login-method
- [ ] localization
- [ ] mcp
- [ ] multi-session
- [ ] next-cookies
- [ ] oidc-provider
- [ ] one-tap
- [ ] one-time-token
- [ ] open-api
- [ ] organization
- [ ] passkey
- [ ] phone-number
- [ ] siwe
- [ ] sso
- [ ] stripe
- [ ] two-factor
- [ ] username

After all sections are complete:
- [ ] Re-run through the checklist to confirm no plugin missed.
- [ ] Summarize remaining gaps (if any) in your final response to the user.
