#!/usr/bin/env node
import { generateLocalesContent } from "@beep/repo-scripts/i18n";
import { FsUtils, FsUtilsLive } from "@beep/tooling-utils/FsUtils";
import { RepoUtils, RepoUtilsLive } from "@beep/tooling-utils/RepoUtils";
import * as FetchHttpClient from "@effect/platform/FetchHttpClient";
import * as FileSystem from "@effect/platform/FileSystem";
import * as Path from "@effect/platform/Path";
import * as BunContext from "@effect/platform-bun/BunContext";
import * as BunFileSystem from "@effect/platform-bun/BunFileSystem";
import * as BunPath from "@effect/platform-bun/BunPath";
import * as BunRuntime from "@effect/platform-bun/BunRuntime";
import * as A from "effect/Array";
import * as Cause from "effect/Cause";
import * as Console from "effect/Console";
import * as Effect from "effect/Effect";
import * as Layer from "effect/Layer";
import * as Str from "effect/String";

const GENERATED_RELATIVE_DIR = ["packages", "common", "constants", "src", "_generated"] as const;

const GENERATED_FILENAME = "ALL_LOCALES.generated.ts" as const;

const fetchLayer = Layer.sync(FetchHttpClient.Fetch, () => globalThis.fetch.bind(globalThis));
const repoLayer = Layer.provideMerge(FsUtilsLive)(RepoUtilsLive);

const program = Effect.gen(function* () {
  const fs = yield* FileSystem.FileSystem;
  const path = yield* Path.Path;
  const fsUtils = yield* FsUtils;
  const repo = yield* RepoUtils;

  const content = yield* generateLocalesContent;

  const outputDir = A.reduce(GENERATED_RELATIVE_DIR, repo.REPOSITORY_ROOT, (acc, segment) => path.join(acc, segment));

  yield* fsUtils.mkdirCached(outputDir);

  const outputFilePath = path.join(outputDir, GENERATED_FILENAME);

  const fileContent = Str.concat(content)(
    "// Auto-generated by tooling/repo-scripts/src/generate-locales.ts\n// Do not edit manually.\n\n"
  );

  yield* fs.writeFileString(outputFilePath, fileContent);

  const loggedPath = path.relative(repo.REPOSITORY_ROOT, outputFilePath);
  yield* Console.log(`✨ Wrote ${loggedPath}`);
}).pipe(
  Effect.provide([
    repoLayer,
    fetchLayer,
    FetchHttpClient.layer,
    BunFileSystem.layer,
    BunPath.layerPosix,
    BunContext.layer,
  ]),
  Effect.catchAll((error) =>
    Effect.gen(function* () {
      yield* Console.log("\n💥 Program failed:", String(error));
      const cause = Cause.fail(error);
      yield* Console.log("\n🔍 Error details:", Cause.pretty(cause));
      return yield* Effect.fail(error);
    })
  )
);

BunRuntime.runMain(program);
